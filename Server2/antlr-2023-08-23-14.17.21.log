2023-08-23 14:17:15:815 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-23 14:17:15:954 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-23 14:17:18:223 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE block2 (returns []interface{} blk2) (@ init {
    $blk2 = []interface{}{}
    var listInt []IInstructionContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
    listInt = localctx.(*Block2Context).GetIns()
    for _, e := range listInt {
        $blk2 = append($blk2, e.GetInst())
    }
}))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block2 LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $block2.blk2) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block2 LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block2.blk2) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-23 14:17:18:251 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE block2 (returns []interface{} blk2) (@ init {
    $blk2 = []interface{}{}
    var listInt []IInstructionContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
    listInt = localctx.(*Block2Context).GetIns()
    for _, e := range listInt {
        $blk2 = append($blk2, e.GetInst())
    }
}))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block2 LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $block2.blk2) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block2 LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block2.blk2) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-23 14:17:18:256 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE block2 (returns []interface{} blk2) (@ init {
    $blk2 = []interface{}{}
    var listInt []IInstructionContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
    listInt = localctx.(*Block2Context).GetIns()
    for _, e := range listInt {
        $blk2 = append($blk2, e.GetInst())
    }
}))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block2 LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $block2.blk2) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block2 LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block2.blk2) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-23 14:17:18:256 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-08-23 14:17:18:342 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} PARIZQ<tokenIndex=421> expr<tokenIndex=423> PARDER<tokenIndex=425> { $e = $expr.e } 
        | list=listArray<tokenIndex=433> { $e = $list.p} 
        | CORIZQ<tokenIndex=439> listParams<tokenIndex=441> CORDER<tokenIndex=443> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=449>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=455>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=461> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=467> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MUL<tokenIndex=296>|DIV<tokenIndex=298>) right=expr<tokenIndex=303,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(ADD<tokenIndex=316>|SUB<tokenIndex=318>) right=expr<tokenIndex=323,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(MAY_IG<tokenIndex=336>|MAYOR<tokenIndex=338>) right=expr<tokenIndex=343,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=(MEN_IG<tokenIndex=356>|MENOR<tokenIndex=358>) right=expr<tokenIndex=363,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=(IG_IG<tokenIndex=376>|DIF<tokenIndex=378>) right=expr<tokenIndex=383,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=AND<tokenIndex=395> right=expr<tokenIndex=399,p=10> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> op=OR<tokenIndex=411> right=expr<tokenIndex=415,p=9> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-23 14:17:18:421 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 421))) (expr (ELEMENT_OPTIONS (= tokenIndex 423))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 425))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 433)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 439))) (listParams (ELEMENT_OPTIONS (= tokenIndex 441))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 443))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 449))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 455))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 461))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 467))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 296))) (DIV (ELEMENT_OPTIONS (= tokenIndex 298))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 303) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 316))) (SUB (ELEMENT_OPTIONS (= tokenIndex 318))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 323) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 336))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 338))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 343) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 356))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 358))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 363) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 376))) (DIF (ELEMENT_OPTIONS (= tokenIndex 378))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 383) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 395)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 399) (= p 10)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 411)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 415) (= p 9)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-23 14:17:18:423 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=492> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=484> expr<tokenIndex=486> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-08-23 14:17:18:432 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 492))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 484))) (expr (ELEMENT_OPTIONS (= tokenIndex 486))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-08-23 14:17:18:434 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=521> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=511> expr<tokenIndex=513> CORDER<tokenIndex=515> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-08-23 14:17:18:442 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 521))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 511))) (expr (ELEMENT_OPTIONS (= tokenIndex 513))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 515))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-08-23 14:17:18:506 grammar LogManager.java:25 import INT=1
2023-08-23 14:17:18:507 grammar LogManager.java:25 import FLOAT=2
2023-08-23 14:17:18:507 grammar LogManager.java:25 import BOOL=3
2023-08-23 14:17:18:507 grammar LogManager.java:25 import STR=4
2023-08-23 14:17:18:507 grammar LogManager.java:25 import CHAR=5
2023-08-23 14:17:18:507 grammar LogManager.java:25 import VAR=6
2023-08-23 14:17:18:508 grammar LogManager.java:25 import LET=7
2023-08-23 14:17:18:508 grammar LogManager.java:25 import VOID=8
2023-08-23 14:17:18:508 grammar LogManager.java:25 import TRU=9
2023-08-23 14:17:18:508 grammar LogManager.java:25 import FAL=10
2023-08-23 14:17:18:508 grammar LogManager.java:25 import PRINT=11
2023-08-23 14:17:18:508 grammar LogManager.java:25 import IF=12
2023-08-23 14:17:18:508 grammar LogManager.java:25 import ELSE=13
2023-08-23 14:17:18:508 grammar LogManager.java:25 import WHILE=14
2023-08-23 14:17:18:508 grammar LogManager.java:25 import FOR=15
2023-08-23 14:17:18:509 grammar LogManager.java:25 import IN=16
2023-08-23 14:17:18:509 grammar LogManager.java:25 import SWITCH=17
2023-08-23 14:17:18:511 grammar LogManager.java:25 import CASE=18
2023-08-23 14:17:18:511 grammar LogManager.java:25 import DEFAULT=19
2023-08-23 14:17:18:512 grammar LogManager.java:25 import BREAK=20
2023-08-23 14:17:18:512 grammar LogManager.java:25 import RETURN=21
2023-08-23 14:17:18:512 grammar LogManager.java:25 import CONTINUE=22
2023-08-23 14:17:18:512 grammar LogManager.java:25 import GUARD=23
2023-08-23 14:17:18:512 grammar LogManager.java:25 import FUNC=24
2023-08-23 14:17:18:512 grammar LogManager.java:25 import NIL=25
2023-08-23 14:17:18:512 grammar LogManager.java:25 import STRUCT=26
2023-08-23 14:17:18:513 grammar LogManager.java:25 import MUTATING=27
2023-08-23 14:17:18:513 grammar LogManager.java:25 import SELF=28
2023-08-23 14:17:18:513 grammar LogManager.java:25 import INOUT=29
2023-08-23 14:17:18:513 grammar LogManager.java:25 import APPEND=30
2023-08-23 14:17:18:513 grammar LogManager.java:25 import REMOVELAST=31
2023-08-23 14:17:18:514 grammar LogManager.java:25 import REMOVE=32
2023-08-23 14:17:18:514 grammar LogManager.java:25 import AT=33
2023-08-23 14:17:18:514 grammar LogManager.java:25 import ISEMPTY=34
2023-08-23 14:17:18:514 grammar LogManager.java:25 import COUNT=35
2023-08-23 14:17:18:514 grammar LogManager.java:25 import NUMBER=36
2023-08-23 14:17:18:514 grammar LogManager.java:25 import STRING=37
2023-08-23 14:17:18:514 grammar LogManager.java:25 import ID=38
2023-08-23 14:17:18:515 grammar LogManager.java:25 import DIF=39
2023-08-23 14:17:18:515 grammar LogManager.java:25 import IG_IG=40
2023-08-23 14:17:18:515 grammar LogManager.java:25 import NOT=41
2023-08-23 14:17:18:515 grammar LogManager.java:25 import OR=42
2023-08-23 14:17:18:515 grammar LogManager.java:25 import AND=43
2023-08-23 14:17:18:515 grammar LogManager.java:25 import IG=44
2023-08-23 14:17:18:515 grammar LogManager.java:25 import MAY_IG=45
2023-08-23 14:17:18:515 grammar LogManager.java:25 import MEN_IG=46
2023-08-23 14:17:18:516 grammar LogManager.java:25 import MAYOR=47
2023-08-23 14:17:18:516 grammar LogManager.java:25 import MENOR=48
2023-08-23 14:17:18:517 grammar LogManager.java:25 import MUL=49
2023-08-23 14:17:18:517 grammar LogManager.java:25 import DIV=50
2023-08-23 14:17:18:517 grammar LogManager.java:25 import ADD=51
2023-08-23 14:17:18:517 grammar LogManager.java:25 import SUB=52
2023-08-23 14:17:18:518 grammar LogManager.java:25 import MOD=53
2023-08-23 14:17:18:518 grammar LogManager.java:25 import PARIZQ=54
2023-08-23 14:17:18:520 grammar LogManager.java:25 import PARDER=55
2023-08-23 14:17:18:521 grammar LogManager.java:25 import LLAVEIZQ=56
2023-08-23 14:17:18:522 grammar LogManager.java:25 import LLAVEDER=57
2023-08-23 14:17:18:522 grammar LogManager.java:25 import D_PTS=58
2023-08-23 14:17:18:522 grammar LogManager.java:25 import CORIZQ=59
2023-08-23 14:17:18:522 grammar LogManager.java:25 import CORDER=60
2023-08-23 14:17:18:522 grammar LogManager.java:25 import COMA=61
2023-08-23 14:17:18:522 grammar LogManager.java:25 import WHITESPACE=62
2023-08-23 14:17:18:522 grammar LogManager.java:25 import COMMENT=63
2023-08-23 14:17:18:522 grammar LogManager.java:25 import LINE_COMMENT=64
2023-08-23 14:17:18:523 grammar LogManager.java:25 import 'Int'=1
2023-08-23 14:17:18:523 grammar LogManager.java:25 import 'Float'=2
2023-08-23 14:17:18:523 grammar LogManager.java:25 import 'Bool'=3
2023-08-23 14:17:18:524 grammar LogManager.java:25 import 'String'=4
2023-08-23 14:17:18:524 grammar LogManager.java:25 import 'Character'=5
2023-08-23 14:17:18:524 grammar LogManager.java:25 import 'var'=6
2023-08-23 14:17:18:524 grammar LogManager.java:25 import 'let'=7
2023-08-23 14:17:18:524 grammar LogManager.java:25 import 'void'=8
2023-08-23 14:17:18:524 grammar LogManager.java:25 import 'true'=9
2023-08-23 14:17:18:524 grammar LogManager.java:25 import 'false'=10
2023-08-23 14:17:18:524 grammar LogManager.java:25 import 'print'=11
2023-08-23 14:17:18:525 grammar LogManager.java:25 import 'if'=12
2023-08-23 14:17:18:525 grammar LogManager.java:25 import 'else'=13
2023-08-23 14:17:18:525 grammar LogManager.java:25 import 'while'=14
2023-08-23 14:17:18:525 grammar LogManager.java:25 import 'for'=15
2023-08-23 14:17:18:525 grammar LogManager.java:25 import 'in'=16
2023-08-23 14:17:18:525 grammar LogManager.java:25 import 'switch'=17
2023-08-23 14:17:18:525 grammar LogManager.java:25 import 'case'=18
2023-08-23 14:17:18:525 grammar LogManager.java:25 import 'default'=19
2023-08-23 14:17:18:526 grammar LogManager.java:25 import 'break'=20
2023-08-23 14:17:18:526 grammar LogManager.java:25 import 'return'=21
2023-08-23 14:17:18:526 grammar LogManager.java:25 import 'continue'=22
2023-08-23 14:17:18:526 grammar LogManager.java:25 import 'guard'=23
2023-08-23 14:17:18:526 grammar LogManager.java:25 import 'func'=24
2023-08-23 14:17:18:526 grammar LogManager.java:25 import 'nil'=25
2023-08-23 14:17:18:526 grammar LogManager.java:25 import 'struct'=26
2023-08-23 14:17:18:526 grammar LogManager.java:25 import 'mutating'=27
2023-08-23 14:17:18:526 grammar LogManager.java:25 import 'self'=28
2023-08-23 14:17:18:526 grammar LogManager.java:25 import 'inout'=29
2023-08-23 14:17:18:526 grammar LogManager.java:25 import 'append'=30
2023-08-23 14:17:18:526 grammar LogManager.java:25 import 'removeLast'=31
2023-08-23 14:17:18:526 grammar LogManager.java:25 import 'remove'=32
2023-08-23 14:17:18:526 grammar LogManager.java:25 import 'at'=33
2023-08-23 14:17:18:526 grammar LogManager.java:25 import 'isEmpty'=34
2023-08-23 14:17:18:528 grammar LogManager.java:25 import 'count'=35
2023-08-23 14:17:18:528 grammar LogManager.java:25 import '!='=39
2023-08-23 14:17:18:528 grammar LogManager.java:25 import '=='=40
2023-08-23 14:17:18:528 grammar LogManager.java:25 import '!'=41
2023-08-23 14:17:18:528 grammar LogManager.java:25 import '||'=42
2023-08-23 14:17:18:528 grammar LogManager.java:25 import '&&'=43
2023-08-23 14:17:18:528 grammar LogManager.java:25 import '='=44
2023-08-23 14:17:18:528 grammar LogManager.java:25 import '>='=45
2023-08-23 14:17:18:528 grammar LogManager.java:25 import '<='=46
2023-08-23 14:17:18:529 grammar LogManager.java:25 import '>'=47
2023-08-23 14:17:18:529 grammar LogManager.java:25 import '<'=48
2023-08-23 14:17:18:531 grammar LogManager.java:25 import '*'=49
2023-08-23 14:17:18:531 grammar LogManager.java:25 import '/'=50
2023-08-23 14:17:18:531 grammar LogManager.java:25 import '+'=51
2023-08-23 14:17:18:531 grammar LogManager.java:25 import '-'=52
2023-08-23 14:17:18:531 grammar LogManager.java:25 import '%'=53
2023-08-23 14:17:18:531 grammar LogManager.java:25 import '('=54
2023-08-23 14:17:18:531 grammar LogManager.java:25 import ')'=55
2023-08-23 14:17:18:532 grammar LogManager.java:25 import '{'=56
2023-08-23 14:17:18:532 grammar LogManager.java:25 import '}'=57
2023-08-23 14:17:18:532 grammar LogManager.java:25 import ':'=58
2023-08-23 14:17:18:532 grammar LogManager.java:25 import '['=59
2023-08-23 14:17:18:533 grammar LogManager.java:25 import ']'=60
2023-08-23 14:17:18:533 grammar LogManager.java:25 import ','=61
2023-08-23 14:17:18:534 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, MAYOR=47, MENOR=48, MUL=49, DIV=50, ADD=51, SUB=52, MOD=53, PARIZQ=54, PARDER=55, LLAVEIZQ=56, LLAVEDER=57, D_PTS=58, CORIZQ=59, CORDER=60, COMA=61, WHITESPACE=62, COMMENT=63, LINE_COMMENT=64, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '>'=47, '<'=48, '*'=49, '/'=50, '+'=51, '-'=52, '%'=53, '('=54, ')'=55, '{'=56, '}'=57, ':'=58, '['=59, ']'=60, ','=61}
2023-08-23 14:17:18:537 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, MAYOR=47, MENOR=48, MUL=49, DIV=50, ADD=51, SUB=52, MOD=53, PARIZQ=54, PARDER=55, LLAVEIZQ=56, LLAVEDER=57, D_PTS=58, CORIZQ=59, CORDER=60, COMA=61, WHITESPACE=62, COMMENT=63, LINE_COMMENT=64}
2023-08-23 14:17:18:538 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '>'=47, '<'=48, '*'=49, '/'=50, '+'=51, '-'=52, '%'=53, '('=54, ')'=55, '{'=56, '}'=57, ':'=58, '['=59, ']'=60, ','=61}
2023-08-23 14:17:18:638 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-23 14:17:18:638 LL1 LogManager.java:25 look=[{6, 11..12, 14}, {<EOF>, 57}]
2023-08-23 14:17:18:641 LL1 LogManager.java:25 LL(1)? true
2023-08-23 14:17:18:641 LL1 LogManager.java:25 
DECISION 1 in rule block2
2023-08-23 14:17:18:643 LL1 LogManager.java:25 look=[{6, 11..12, 14}, 57]
2023-08-23 14:17:18:643 LL1 LogManager.java:25 LL(1)? true
2023-08-23 14:17:18:643 LL1 LogManager.java:25 
DECISION 2 in rule instruction
2023-08-23 14:17:18:643 LL1 LogManager.java:25 look=[11, 12, 6, 14]
2023-08-23 14:17:18:643 LL1 LogManager.java:25 LL(1)? true
2023-08-23 14:17:18:643 LL1 LogManager.java:25 
DECISION 3 in rule ifstmt
2023-08-23 14:17:18:644 LL1 LogManager.java:25 look=[12, 12, 12]
2023-08-23 14:17:18:644 LL1 LogManager.java:25 LL(1)? false
2023-08-23 14:17:18:644 LL1 LogManager.java:25 
DECISION 4 in rule types
2023-08-23 14:17:18:644 LL1 LogManager.java:25 look=[1, 2, 4, 3, 59]
2023-08-23 14:17:18:644 LL1 LogManager.java:25 LL(1)? true
2023-08-23 14:17:18:644 LL1 LogManager.java:25 
DECISION 5 in rule expr
2023-08-23 14:17:18:645 LL1 LogManager.java:25 look=[54, 38, 59, 36, 37, 9, 10]
2023-08-23 14:17:18:645 LL1 LogManager.java:25 LL(1)? true
2023-08-23 14:17:18:645 LL1 LogManager.java:25 
DECISION 6 in rule expr
2023-08-23 14:17:18:645 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-23 14:17:18:645 LL1 LogManager.java:25 LL(1)? false
2023-08-23 14:17:18:645 LL1 LogManager.java:25 
DECISION 7 in rule expr
2023-08-23 14:17:18:647 LL1 LogManager.java:25 look=[null, null]
2023-08-23 14:17:18:648 LL1 LogManager.java:25 LL(1)? false
2023-08-23 14:17:18:648 LL1 LogManager.java:25 
DECISION 8 in rule listParams
2023-08-23 14:17:18:648 LL1 LogManager.java:25 look=[null, 60]
2023-08-23 14:17:18:648 LL1 LogManager.java:25 LL(1)? false
2023-08-23 14:17:18:648 LL1 LogManager.java:25 
DECISION 9 in rule listArray
2023-08-23 14:17:18:652 LL1 LogManager.java:25 look=[null, null]
2023-08-23 14:17:18:652 LL1 LogManager.java:25 LL(1)? false
2023-08-23 14:17:18:674 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-23 14:17:18:740 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-23 14:17:18:742 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-08-23 14:17:18:746 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-08-23 14:17:18:755 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-23 14:17:18:756 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-08-23 14:17:18:775 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-23 14:17:18:776 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-08-23 14:17:18:776 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-08-23 14:17:18:777 action-translator LogManager.java:25 translate 
    $blk2 = []interface{}{}
    var listInt []IInstructionContext

2023-08-23 14:17:18:777 action-translator LogManager.java:25 attr [@-1,7:10='blk2',<0>,40:5]
2023-08-23 14:17:18:778 action-translator LogManager.java:25 translate 
    listInt = localctx.(*Block2Context).GetIns()
    for _, e := range listInt {
        $blk2 = append($blk2, e.GetInst())
    }

2023-08-23 14:17:18:779 action-translator LogManager.java:25 attr [@-1,94:97='blk2',<0>,47:9]
2023-08-23 14:17:18:779 action-translator LogManager.java:25 attr [@-1,109:112='blk2',<0>,47:24]
2023-08-23 14:17:18:782 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-23 14:17:18:782 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,53:14]
2023-08-23 14:17:18:783 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,53:22].[@-1,20:23='prnt',<0>,53:32]
2023-08-23 14:17:18:783 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-08-23 14:17:18:784 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,54:11]
2023-08-23 14:17:18:784 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,54:19].[@-1,17:22='ifinst',<0>,54:26]
2023-08-23 14:17:18:785 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-08-23 14:17:18:785 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,55:20]
2023-08-23 14:17:18:786 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,55:28].[@-1,26:28='dec',<0>,55:44]
2023-08-23 14:17:18:787 action-translator LogManager.java:25 translate  $inst = $whilestmt.whl 
2023-08-23 14:17:18:788 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,56:14]
2023-08-23 14:17:18:788 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,56:22].[@-1,20:22='whl',<0>,56:32]
2023-08-23 14:17:18:795 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-23 14:17:18:795 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,60:29]
2023-08-23 14:17:18:795 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,60:59].[@-1,38:41='line',<0>,60:65]
2023-08-23 14:17:18:801 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,60:71].[@-1,50:52='pos',<0>,60:77]
2023-08-23 14:17:18:802 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,60:82].[@-1,60:60='e',<0>,60:87]
2023-08-23 14:17:18:817 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-08-23 14:17:18:818 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,64:40]
2023-08-23 14:17:18:821 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,64:69].[@-1,34:37='line',<0>,64:72]
2023-08-23 14:17:18:821 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,64:79].[@-1,44:46='pos',<0>,64:82]
2023-08-23 14:17:18:822 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,64:88].[@-1,55:55='e',<0>,64:93]
2023-08-23 14:17:18:822 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,64:97].[@-1,65:67='blk',<0>,64:103]
2023-08-23 14:17:18:824 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $block2.blk2) 
2023-08-23 14:17:18:825 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,65:70]
2023-08-23 14:17:18:825 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,65:99].[@-1,34:37='line',<0>,65:102]
2023-08-23 14:17:18:826 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,65:109].[@-1,44:46='pos',<0>,65:112]
2023-08-23 14:17:18:826 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,65:118].[@-1,55:55='e',<0>,65:123]
2023-08-23 14:17:18:827 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,65:127].[@-1,65:67='blk',<0>,65:133]
2023-08-23 14:17:18:827 action-translator LogManager.java:25 qattr [@-1,71:76='block2',<0>,65:139].[@-1,78:81='blk2',<0>,65:146]
2023-08-23 14:17:18:828 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) 
2023-08-23 14:17:18:828 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,66:52]
2023-08-23 14:17:18:829 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,66:81].[@-1,34:37='line',<0>,66:84]
2023-08-23 14:17:18:831 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,66:91].[@-1,44:46='pos',<0>,66:94]
2023-08-23 14:17:18:831 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,66:100].[@-1,55:55='e',<0>,66:105]
2023-08-23 14:17:18:832 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,66:109].[@-1,65:67='blk',<0>,66:115]
2023-08-23 14:17:18:832 action-translator LogManager.java:25 qattr [@-1,85:90='ifstmt',<0>,66:135].[@-1,92:97='ifinst',<0>,66:142]
2023-08-23 14:17:18:836 action-translator LogManager.java:25 translate  $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block2.blk2) 
2023-08-23 14:17:18:837 action-translator LogManager.java:25 attr [@-1,2:4='whl',<0>,70:44]
2023-08-23 14:17:18:838 action-translator LogManager.java:25 qattr [@-1,31:35='WHILE',<0>,70:73].[@-1,37:40='line',<0>,70:79]
2023-08-23 14:17:18:839 action-translator LogManager.java:25 qattr [@-1,44:48='WHILE',<0>,70:86].[@-1,50:52='pos',<0>,70:92]
2023-08-23 14:17:18:841 action-translator LogManager.java:25 qattr [@-1,56:59='expr',<0>,70:98].[@-1,61:61='e',<0>,70:103]
2023-08-23 14:17:18:842 action-translator LogManager.java:25 qattr [@-1,65:70='block2',<0>,70:107].[@-1,72:75='blk2',<0>,70:114]
2023-08-23 14:17:18:846 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) 
2023-08-23 14:17:18:848 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,74:32]
2023-08-23 14:17:18:848 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,74:67].[@-1,41:44='line',<0>,74:71]
2023-08-23 14:17:18:851 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,74:78].[@-1,52:54='pos',<0>,74:82]
2023-08-23 14:17:18:852 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,74:88].[@-1,61:64='text',<0>,74:91]
2023-08-23 14:17:18:853 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,74:98].[@-1,74:75='ty',<0>,74:104]
2023-08-23 14:17:18:854 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,74:109].[@-1,84:84='e',<0>,74:114]
2023-08-23 14:17:18:858 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-08-23 14:17:18:858 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,78:8]
2023-08-23 14:17:18:862 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-08-23 14:17:18:862 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,79:10]
2023-08-23 14:17:18:863 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-08-23 14:17:18:864 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,80:8]
2023-08-23 14:17:18:865 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-08-23 14:17:18:865 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,81:9]
2023-08-23 14:17:18:866 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-08-23 14:17:18:866 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,82:18]
2023-08-23 14:17:18:874 action-translator LogManager.java:25 translate 
2023-08-23 14:17:18:875 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-23 14:17:18:886 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:82]
2023-08-23 14:17:18:886 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:87].[@-1,12:12='e',<0>,2:92]
2023-08-23 14:17:18:887 action-translator LogManager.java:25 translate  $e = $list.p
2023-08-23 14:17:18:887 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:43]
2023-08-23 14:17:18:887 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,3:48].[@-1,12:12='p',<0>,3:53]
2023-08-23 14:17:18:888 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-08-23 14:17:18:888 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:85]
2023-08-23 14:17:18:888 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,4:111].[@-1,35:38='line',<0>,4:118]
2023-08-23 14:17:18:889 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,4:125].[@-1,49:51='pos',<0>,4:132]
2023-08-23 14:17:18:890 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,4:138].[@-1,66:66='l',<0>,4:149]
2023-08-23 14:17:18:892 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-23 14:17:18:892 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,7:30].[@-1,39:42='text',<0>,7:37]
2023-08-23 14:17:18:894 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,8:43].[@-1,102:105='text',<0>,8:50]
2023-08-23 14:17:18:898 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,12:13]
2023-08-23 14:17:18:898 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,12:43].[@-1,240:243='line',<0>,12:50]
2023-08-23 14:17:18:899 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,12:56].[@-1,253:255='pos',<0>,12:63]
2023-08-23 14:17:18:901 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,14:37].[@-1,341:344='text',<0>,14:44]
2023-08-23 14:17:18:901 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,18:13]
2023-08-23 14:17:18:902 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,18:43].[@-1,474:477='line',<0>,18:50]
2023-08-23 14:17:18:902 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,18:56].[@-1,487:489='pos',<0>,18:63]
2023-08-23 14:17:18:905 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-23 14:17:18:905 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,23:16].[@-1,25:28='text',<0>,23:23]
2023-08-23 14:17:18:906 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,24:9]
2023-08-23 14:17:18:908 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,24:39].[@-1,77:80='line',<0>,24:46]
2023-08-23 14:17:18:910 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,24:53].[@-1,91:93='pos',<0>,24:60]
2023-08-23 14:17:18:911 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-23 14:17:18:912 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:32]
2023-08-23 14:17:18:912 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,26:62].[@-1,36:39='line',<0>,26:66]
2023-08-23 14:17:18:912 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,26:73].[@-1,47:49='pos',<0>,26:77]
2023-08-23 14:17:18:914 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-23 14:17:18:914 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,27:32]
2023-08-23 14:17:18:915 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,27:62].[@-1,36:39='line',<0>,27:66]
2023-08-23 14:17:18:917 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,27:73].[@-1,47:49='pos',<0>,27:77]
2023-08-23 14:17:18:923 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-23 14:17:18:925 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-23 14:17:18:925 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:139]
2023-08-23 14:17:18:925 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,30:169].[@-1,37:41='start',<0>,30:174]
2023-08-23 14:17:18:927 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,30:192].[@-1,60:64='start',<0>,30:197]
2023-08-23 14:17:18:927 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,30:217].[@-1,85:85='e',<0>,30:222]
2023-08-23 14:17:18:927 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,30:226].[@-1,92:95='text',<0>,30:229]
2023-08-23 14:17:18:928 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,30:236].[@-1,105:105='e',<0>,30:242]
2023-08-23 14:17:18:928 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-23 14:17:18:931 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-23 14:17:18:932 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:149]
2023-08-23 14:17:18:932 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,31:179].[@-1,37:41='start',<0>,31:184]
2023-08-23 14:17:18:932 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,31:202].[@-1,60:64='start',<0>,31:207]
2023-08-23 14:17:18:933 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,31:227].[@-1,85:85='e',<0>,31:232]
2023-08-23 14:17:18:933 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,31:236].[@-1,92:95='text',<0>,31:239]
2023-08-23 14:17:18:933 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,31:246].[@-1,105:105='e',<0>,31:252]
2023-08-23 14:17:18:934 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-23 14:17:18:935 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-23 14:17:18:936 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:154]
2023-08-23 14:17:18:936 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:184].[@-1,37:41='start',<0>,32:189]
2023-08-23 14:17:18:938 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:207].[@-1,60:64='start',<0>,32:212]
2023-08-23 14:17:18:938 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:232].[@-1,85:85='e',<0>,32:237]
2023-08-23 14:17:19:004 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:241].[@-1,92:95='text',<0>,32:244]
2023-08-23 14:17:19:005 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:251].[@-1,105:105='e',<0>,32:257]
2023-08-23 14:17:19:005 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-23 14:17:19:006 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-23 14:17:19:006 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:154]
2023-08-23 14:17:19:008 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:184].[@-1,37:41='start',<0>,33:189]
2023-08-23 14:17:19:008 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:207].[@-1,60:64='start',<0>,33:212]
2023-08-23 14:17:19:009 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:232].[@-1,85:85='e',<0>,33:237]
2023-08-23 14:17:19:011 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:241].[@-1,92:95='text',<0>,33:244]
2023-08-23 14:17:19:011 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:251].[@-1,105:105='e',<0>,33:257]
2023-08-23 14:17:19:012 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-23 14:17:19:013 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-23 14:17:19:013 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:151]
2023-08-23 14:17:19:014 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:181].[@-1,37:41='start',<0>,34:186]
2023-08-23 14:17:19:016 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:204].[@-1,60:64='start',<0>,34:209]
2023-08-23 14:17:19:016 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:229].[@-1,85:85='e',<0>,34:234]
2023-08-23 14:17:19:017 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:238].[@-1,92:95='text',<0>,34:241]
2023-08-23 14:17:19:017 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:248].[@-1,105:105='e',<0>,34:254]
2023-08-23 14:17:19:017 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-23 14:17:19:019 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-23 14:17:19:019 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:125]
2023-08-23 14:17:19:019 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:155].[@-1,37:41='start',<0>,35:160]
2023-08-23 14:17:19:021 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:178].[@-1,60:64='start',<0>,35:183]
2023-08-23 14:17:19:021 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:203].[@-1,85:85='e',<0>,35:208]
2023-08-23 14:17:19:022 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:212].[@-1,92:95='text',<0>,35:215]
2023-08-23 14:17:19:022 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:222].[@-1,105:105='e',<0>,35:228]
2023-08-23 14:17:19:022 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-23 14:17:19:023 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-23 14:17:19:023 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:123]
2023-08-23 14:17:19:023 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:153].[@-1,37:41='start',<0>,36:158]
2023-08-23 14:17:19:024 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:176].[@-1,60:64='start',<0>,36:181]
2023-08-23 14:17:19:024 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:201].[@-1,85:85='e',<0>,36:206]
2023-08-23 14:17:19:024 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:210].[@-1,92:95='text',<0>,36:213]
2023-08-23 14:17:19:025 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:220].[@-1,105:105='e',<0>,36:226]
2023-08-23 14:17:19:028 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-23 14:17:19:030 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-23 14:17:19:031 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-23 14:17:19:031 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-23 14:17:19:031 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-23 14:17:19:031 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-23 14:17:19:031 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-23 14:17:19:033 action-translator LogManager.java:25 translate 
2023-08-23 14:17:19:034 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-08-23 14:17:19:035 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-08-23 14:17:19:037 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-08-23 14:17:19:037 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-08-23 14:17:19:037 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-08-23 14:17:19:037 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-23 14:17:19:039 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-08-23 14:17:19:041 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-08-23 14:17:19:041 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-08-23 14:17:19:041 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-08-23 14:17:19:042 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-23 14:17:19:043 action-translator LogManager.java:25 translate 
2023-08-23 14:17:19:044 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-08-23 14:17:19:044 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-08-23 14:17:19:044 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:62].[@-1,33:36='line',<0>,2:65]
2023-08-23 14:17:19:045 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:72].[@-1,43:45='pos',<0>,2:75]
2023-08-23 14:17:19:045 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:81].[@-1,52:55='text',<0>,2:84]
2023-08-23 14:17:19:046 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-23 14:17:19:053 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-08-23 14:17:19:053 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:127]
2023-08-23 14:17:19:053 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:159].[@-1,39:43='start',<0>,5:164]
2023-08-23 14:17:19:054 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:182].[@-1,62:66='start',<0>,5:187]
2023-08-23 14:17:19:055 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:207].[@-1,87:87='p',<0>,5:212]
2023-08-23 14:17:19:056 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:216].[@-1,96:96='e',<0>,5:221]
2023-08-23 14:17:19:056 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-23 14:17:20:153 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-23 14:17:20:153 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-23 14:17:20:892 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-23 14:17:20:893 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

