2023-08-30 12:56:03:892 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMILLA (BLOCK (ALT '"'))) (RULE FLECHA (BLOCK (ALT '->'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-30 12:56:04:074 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMILLA (BLOCK (ALT '"'))) (RULE FLECHA (BLOCK (ALT '->'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-30 12:56:06:995 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT VAR ID (= op IG) types PARIZQ expr PARDER { $dec = instructions.NewCastDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE returnstmt (returns interfaces.Instruction ret) (BLOCK (ALT RETURN expr { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) }) (ALT RETURN { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (= left expr) (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op COMA) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) types CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-30 12:56:07:011 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT VAR ID (= op IG) types PARIZQ expr PARDER { $dec = instructions.NewCastDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUB_IG SUM_IG)) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE returnstmt (returns interfaces.Instruction ret) (BLOCK (ALT RETURN expr { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) }) (ALT RETURN { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op COMA) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) types CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-30 12:56:07:017 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT VAR ID (= op IG) types PARIZQ expr PARDER { $dec = instructions.NewCastDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUB_IG SUM_IG)) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE returnstmt (returns interfaces.Instruction ret) (BLOCK (ALT RETURN expr { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) }) (ALT RETURN { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op COMA) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) types CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-30 12:56:07:017 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-08-30 12:56:07:134 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} SUB<tokenIndex=656> opDe=expr<tokenIndex=660,p=21> {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)} 
        | types<tokenIndex=666> PARIZQ<tokenIndex=668> expr<tokenIndex=670> PARDER<tokenIndex=672> { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) } 
        | PARIZQ<tokenIndex=846> expr<tokenIndex=848> PARDER<tokenIndex=850> { $e = $expr.e } 
        | CORIZQ<tokenIndex=856> CORDER<tokenIndex=858> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) } 
        | list=listArray<tokenIndex=866> { $e = $list.p} 
        | NUMBER<tokenIndex=874>
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=880>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=886> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=892> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | ID<tokenIndex=898> PUNTO<tokenIndex=900> COUNT<tokenIndex=902> { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) } 
        | ID<tokenIndex=908> PUNTO<tokenIndex=910> ISEMPTY<tokenIndex=912> { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) } 
        | NIL<tokenIndex=918> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NIL) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(SUB_IG<tokenIndex=685>|SUM_IG<tokenIndex=687>) expr<tokenIndex=690,p=20> { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(MUL<tokenIndex=703>|DIV<tokenIndex=705>|MOD<tokenIndex=707>) right=expr<tokenIndex=712,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(ADD<tokenIndex=725>|SUB<tokenIndex=727>) right=expr<tokenIndex=732,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MAY_IG<tokenIndex=745>|MAYOR<tokenIndex=747>) right=expr<tokenIndex=752,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(MEN_IG<tokenIndex=765>|MENOR<tokenIndex=767>) right=expr<tokenIndex=772,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(IG_IG<tokenIndex=785>|DIF<tokenIndex=787>) right=expr<tokenIndex=792,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=AND<tokenIndex=804> right=expr<tokenIndex=808,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=OR<tokenIndex=820> right=expr<tokenIndex=824,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=COMA<tokenIndex=836> right=expr<tokenIndex=840,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-30 12:56:07:265 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (SUB (ELEMENT_OPTIONS (= tokenIndex 656))) (= opDe (expr (ELEMENT_OPTIONS (= tokenIndex 660) (= p 21)))) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (types (ELEMENT_OPTIONS (= tokenIndex 666))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 668))) (expr (ELEMENT_OPTIONS (= tokenIndex 670))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 672))) { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 846))) (expr (ELEMENT_OPTIONS (= tokenIndex 848))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 850))) { $e = $expr.e }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 856))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 858))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 866)))) { $e = $list.p}) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 874))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 880))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 886))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 892))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 898))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 900))) (COUNT (ELEMENT_OPTIONS (= tokenIndex 902))) { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 908))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 910))) (ISEMPTY (ELEMENT_OPTIONS (= tokenIndex 912))) { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 918))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NIL) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (SUB_IG (ELEMENT_OPTIONS (= tokenIndex 685))) (SUM_IG (ELEMENT_OPTIONS (= tokenIndex 687))))) (expr (ELEMENT_OPTIONS (= tokenIndex 690) (= p 20))) { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 703))) (DIV (ELEMENT_OPTIONS (= tokenIndex 705))) (MOD (ELEMENT_OPTIONS (= tokenIndex 707))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 712) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 725))) (SUB (ELEMENT_OPTIONS (= tokenIndex 727))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 732) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 745))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 747))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 752) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 765))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 767))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 772) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 785))) (DIF (ELEMENT_OPTIONS (= tokenIndex 787))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 792) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 804)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 808) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 820)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 824) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (COMA (ELEMENT_OPTIONS (= tokenIndex 836)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 840) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-30 12:56:07:267 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=943> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=935> expr<tokenIndex=937> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-08-30 12:56:07:283 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 943))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 935))) (expr (ELEMENT_OPTIONS (= tokenIndex 937))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-08-30 12:56:07:284 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=974> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> types<tokenIndex=962> CORIZQ<tokenIndex=964> expr<tokenIndex=966> CORDER<tokenIndex=968> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-08-30 12:56:07:296 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 974))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (types (ELEMENT_OPTIONS (= tokenIndex 962))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 964))) (expr (ELEMENT_OPTIONS (= tokenIndex 966))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 968))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-08-30 12:56:07:353 grammar LogManager.java:25 import INT=1
2023-08-30 12:56:07:355 grammar LogManager.java:25 import FLOAT=2
2023-08-30 12:56:07:356 grammar LogManager.java:25 import BOOL=3
2023-08-30 12:56:07:357 grammar LogManager.java:25 import STR=4
2023-08-30 12:56:07:357 grammar LogManager.java:25 import CHAR=5
2023-08-30 12:56:07:357 grammar LogManager.java:25 import VAR=6
2023-08-30 12:56:07:357 grammar LogManager.java:25 import LET=7
2023-08-30 12:56:07:358 grammar LogManager.java:25 import VOID=8
2023-08-30 12:56:07:358 grammar LogManager.java:25 import TRU=9
2023-08-30 12:56:07:358 grammar LogManager.java:25 import FAL=10
2023-08-30 12:56:07:358 grammar LogManager.java:25 import PRINT=11
2023-08-30 12:56:07:358 grammar LogManager.java:25 import IF=12
2023-08-30 12:56:07:358 grammar LogManager.java:25 import ELSE=13
2023-08-30 12:56:07:358 grammar LogManager.java:25 import WHILE=14
2023-08-30 12:56:07:359 grammar LogManager.java:25 import FOR=15
2023-08-30 12:56:07:359 grammar LogManager.java:25 import IN=16
2023-08-30 12:56:07:362 grammar LogManager.java:25 import SWITCH=17
2023-08-30 12:56:07:362 grammar LogManager.java:25 import CASE=18
2023-08-30 12:56:07:362 grammar LogManager.java:25 import DEFAULT=19
2023-08-30 12:56:07:362 grammar LogManager.java:25 import BREAK=20
2023-08-30 12:56:07:362 grammar LogManager.java:25 import RETURN=21
2023-08-30 12:56:07:362 grammar LogManager.java:25 import CONTINUE=22
2023-08-30 12:56:07:363 grammar LogManager.java:25 import GUARD=23
2023-08-30 12:56:07:363 grammar LogManager.java:25 import FUNC=24
2023-08-30 12:56:07:363 grammar LogManager.java:25 import NIL=25
2023-08-30 12:56:07:363 grammar LogManager.java:25 import STRUCT=26
2023-08-30 12:56:07:363 grammar LogManager.java:25 import MUTATING=27
2023-08-30 12:56:07:363 grammar LogManager.java:25 import SELF=28
2023-08-30 12:56:07:363 grammar LogManager.java:25 import INOUT=29
2023-08-30 12:56:07:363 grammar LogManager.java:25 import APPEND=30
2023-08-30 12:56:07:363 grammar LogManager.java:25 import REMOVELAST=31
2023-08-30 12:56:07:363 grammar LogManager.java:25 import REMOVE=32
2023-08-30 12:56:07:364 grammar LogManager.java:25 import AT=33
2023-08-30 12:56:07:364 grammar LogManager.java:25 import ISEMPTY=34
2023-08-30 12:56:07:364 grammar LogManager.java:25 import COUNT=35
2023-08-30 12:56:07:364 grammar LogManager.java:25 import NUMBER=36
2023-08-30 12:56:07:364 grammar LogManager.java:25 import STRING=37
2023-08-30 12:56:07:365 grammar LogManager.java:25 import ID=38
2023-08-30 12:56:07:365 grammar LogManager.java:25 import DIF=39
2023-08-30 12:56:07:365 grammar LogManager.java:25 import IG_IG=40
2023-08-30 12:56:07:365 grammar LogManager.java:25 import NOT=41
2023-08-30 12:56:07:365 grammar LogManager.java:25 import OR=42
2023-08-30 12:56:07:365 grammar LogManager.java:25 import AND=43
2023-08-30 12:56:07:365 grammar LogManager.java:25 import IG=44
2023-08-30 12:56:07:365 grammar LogManager.java:25 import MAY_IG=45
2023-08-30 12:56:07:365 grammar LogManager.java:25 import MEN_IG=46
2023-08-30 12:56:07:366 grammar LogManager.java:25 import SUM_IG=47
2023-08-30 12:56:07:366 grammar LogManager.java:25 import SUB_IG=48
2023-08-30 12:56:07:366 grammar LogManager.java:25 import MAYOR=49
2023-08-30 12:56:07:366 grammar LogManager.java:25 import MENOR=50
2023-08-30 12:56:07:366 grammar LogManager.java:25 import MUL=51
2023-08-30 12:56:07:366 grammar LogManager.java:25 import DIV=52
2023-08-30 12:56:07:366 grammar LogManager.java:25 import ADD=53
2023-08-30 12:56:07:367 grammar LogManager.java:25 import SUB=54
2023-08-30 12:56:07:367 grammar LogManager.java:25 import MOD=55
2023-08-30 12:56:07:367 grammar LogManager.java:25 import PARIZQ=56
2023-08-30 12:56:07:367 grammar LogManager.java:25 import PARDER=57
2023-08-30 12:56:07:369 grammar LogManager.java:25 import LLAVEIZQ=58
2023-08-30 12:56:07:369 grammar LogManager.java:25 import LLAVEDER=59
2023-08-30 12:56:07:369 grammar LogManager.java:25 import D_PTS=60
2023-08-30 12:56:07:369 grammar LogManager.java:25 import CORIZQ=61
2023-08-30 12:56:07:369 grammar LogManager.java:25 import CORDER=62
2023-08-30 12:56:07:369 grammar LogManager.java:25 import COMA=63
2023-08-30 12:56:07:369 grammar LogManager.java:25 import PUNTO=64
2023-08-30 12:56:07:369 grammar LogManager.java:25 import COMILLA=65
2023-08-30 12:56:07:369 grammar LogManager.java:25 import FLECHA=66
2023-08-30 12:56:07:370 grammar LogManager.java:25 import WHITESPACE=67
2023-08-30 12:56:07:370 grammar LogManager.java:25 import COMMENT=68
2023-08-30 12:56:07:370 grammar LogManager.java:25 import LINE_COMMENT=69
2023-08-30 12:56:07:370 grammar LogManager.java:25 import 'Int'=1
2023-08-30 12:56:07:372 grammar LogManager.java:25 import 'Float'=2
2023-08-30 12:56:07:372 grammar LogManager.java:25 import 'Bool'=3
2023-08-30 12:56:07:372 grammar LogManager.java:25 import 'String'=4
2023-08-30 12:56:07:372 grammar LogManager.java:25 import 'Character'=5
2023-08-30 12:56:07:373 grammar LogManager.java:25 import 'var'=6
2023-08-30 12:56:07:373 grammar LogManager.java:25 import 'let'=7
2023-08-30 12:56:07:373 grammar LogManager.java:25 import 'void'=8
2023-08-30 12:56:07:373 grammar LogManager.java:25 import 'true'=9
2023-08-30 12:56:07:373 grammar LogManager.java:25 import 'false'=10
2023-08-30 12:56:07:373 grammar LogManager.java:25 import 'print'=11
2023-08-30 12:56:07:373 grammar LogManager.java:25 import 'if'=12
2023-08-30 12:56:07:374 grammar LogManager.java:25 import 'else'=13
2023-08-30 12:56:07:374 grammar LogManager.java:25 import 'while'=14
2023-08-30 12:56:07:374 grammar LogManager.java:25 import 'for'=15
2023-08-30 12:56:07:374 grammar LogManager.java:25 import 'in'=16
2023-08-30 12:56:07:374 grammar LogManager.java:25 import 'switch'=17
2023-08-30 12:56:07:374 grammar LogManager.java:25 import 'case'=18
2023-08-30 12:56:07:374 grammar LogManager.java:25 import 'default'=19
2023-08-30 12:56:07:374 grammar LogManager.java:25 import 'break'=20
2023-08-30 12:56:07:375 grammar LogManager.java:25 import 'return'=21
2023-08-30 12:56:07:375 grammar LogManager.java:25 import 'continue'=22
2023-08-30 12:56:07:375 grammar LogManager.java:25 import 'guard'=23
2023-08-30 12:56:07:376 grammar LogManager.java:25 import 'func'=24
2023-08-30 12:56:07:376 grammar LogManager.java:25 import 'nil'=25
2023-08-30 12:56:07:376 grammar LogManager.java:25 import 'struct'=26
2023-08-30 12:56:07:376 grammar LogManager.java:25 import 'mutating'=27
2023-08-30 12:56:07:376 grammar LogManager.java:25 import 'self'=28
2023-08-30 12:56:07:377 grammar LogManager.java:25 import 'inout'=29
2023-08-30 12:56:07:377 grammar LogManager.java:25 import 'append'=30
2023-08-30 12:56:07:377 grammar LogManager.java:25 import 'removeLast'=31
2023-08-30 12:56:07:377 grammar LogManager.java:25 import 'remove'=32
2023-08-30 12:56:07:377 grammar LogManager.java:25 import 'at'=33
2023-08-30 12:56:07:377 grammar LogManager.java:25 import 'isEmpty'=34
2023-08-30 12:56:07:377 grammar LogManager.java:25 import 'count'=35
2023-08-30 12:56:07:377 grammar LogManager.java:25 import '!='=39
2023-08-30 12:56:07:378 grammar LogManager.java:25 import '=='=40
2023-08-30 12:56:07:378 grammar LogManager.java:25 import '!'=41
2023-08-30 12:56:07:378 grammar LogManager.java:25 import '||'=42
2023-08-30 12:56:07:378 grammar LogManager.java:25 import '&&'=43
2023-08-30 12:56:07:378 grammar LogManager.java:25 import '='=44
2023-08-30 12:56:07:378 grammar LogManager.java:25 import '>='=45
2023-08-30 12:56:07:378 grammar LogManager.java:25 import '<='=46
2023-08-30 12:56:07:378 grammar LogManager.java:25 import '+='=47
2023-08-30 12:56:07:378 grammar LogManager.java:25 import '-='=48
2023-08-30 12:56:07:378 grammar LogManager.java:25 import '>'=49
2023-08-30 12:56:07:378 grammar LogManager.java:25 import '<'=50
2023-08-30 12:56:07:380 grammar LogManager.java:25 import '*'=51
2023-08-30 12:56:07:380 grammar LogManager.java:25 import '/'=52
2023-08-30 12:56:07:380 grammar LogManager.java:25 import '+'=53
2023-08-30 12:56:07:382 grammar LogManager.java:25 import '-'=54
2023-08-30 12:56:07:382 grammar LogManager.java:25 import '%'=55
2023-08-30 12:56:07:382 grammar LogManager.java:25 import '('=56
2023-08-30 12:56:07:382 grammar LogManager.java:25 import ')'=57
2023-08-30 12:56:07:382 grammar LogManager.java:25 import '{'=58
2023-08-30 12:56:07:383 grammar LogManager.java:25 import '}'=59
2023-08-30 12:56:07:383 grammar LogManager.java:25 import ':'=60
2023-08-30 12:56:07:383 grammar LogManager.java:25 import '['=61
2023-08-30 12:56:07:383 grammar LogManager.java:25 import ']'=62
2023-08-30 12:56:07:383 grammar LogManager.java:25 import ','=63
2023-08-30 12:56:07:383 grammar LogManager.java:25 import '.'=64
2023-08-30 12:56:07:383 grammar LogManager.java:25 import '"'=65
2023-08-30 12:56:07:383 grammar LogManager.java:25 import '->'=66
2023-08-30 12:56:07:384 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO=64, COMILLA=65, FLECHA=66, WHITESPACE=67, COMMENT=68, LINE_COMMENT=69, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, '.'=64, '"'=65, '->'=66}
2023-08-30 12:56:07:386 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO=64, COMILLA=65, FLECHA=66, WHITESPACE=67, COMMENT=68, LINE_COMMENT=69}
2023-08-30 12:56:07:387 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, '.'=64, '"'=65, '->'=66}
2023-08-30 12:56:07:553 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-30 12:56:07:559 LL1 LogManager.java:25 look=[{6..7, 11..12, 14..15, 20, 22..23, 38}, {<EOF>, 59}]
2023-08-30 12:56:07:560 LL1 LogManager.java:25 LL(1)? true
2023-08-30 12:56:07:560 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-30 12:56:07:560 LL1 LogManager.java:25 look=[11, 12, {6..7}, 14, 38, 15, 23, 20, 22, 38]
2023-08-30 12:56:07:561 LL1 LogManager.java:25 LL(1)? false
2023-08-30 12:56:07:561 LL1 LogManager.java:25 
DECISION 2 in rule ifstmt
2023-08-30 12:56:07:561 LL1 LogManager.java:25 look=[12, 12, 12]
2023-08-30 12:56:07:561 LL1 LogManager.java:25 LL(1)? false
2023-08-30 12:56:07:562 LL1 LogManager.java:25 
DECISION 3 in rule declarationstmt
2023-08-30 12:56:07:562 LL1 LogManager.java:25 look=[6, 6, 6, 7, 7]
2023-08-30 12:56:07:562 LL1 LogManager.java:25 LL(1)? false
2023-08-30 12:56:07:562 LL1 LogManager.java:25 
DECISION 4 in rule assignstmt
2023-08-30 12:56:07:562 LL1 LogManager.java:25 look=[38, 38]
2023-08-30 12:56:07:562 LL1 LogManager.java:25 LL(1)? false
2023-08-30 12:56:07:562 LL1 LogManager.java:25 
DECISION 5 in rule forstmt
2023-08-30 12:56:07:562 LL1 LogManager.java:25 look=[15, 15]
2023-08-30 12:56:07:562 LL1 LogManager.java:25 LL(1)? false
2023-08-30 12:56:07:562 LL1 LogManager.java:25 
DECISION 6 in rule returnstmt
2023-08-30 12:56:07:562 LL1 LogManager.java:25 look=[21, 21]
2023-08-30 12:56:07:562 LL1 LogManager.java:25 LL(1)? false
2023-08-30 12:56:07:562 LL1 LogManager.java:25 
DECISION 7 in rule fnArray
2023-08-30 12:56:07:562 LL1 LogManager.java:25 look=[38, 38, 38]
2023-08-30 12:56:07:563 LL1 LogManager.java:25 LL(1)? false
2023-08-30 12:56:07:563 LL1 LogManager.java:25 
DECISION 8 in rule types
2023-08-30 12:56:07:563 LL1 LogManager.java:25 look=[1, 2, 4, 3, 61, 65, 25]
2023-08-30 12:56:07:563 LL1 LogManager.java:25 LL(1)? true
2023-08-30 12:56:07:563 LL1 LogManager.java:25 
DECISION 9 in rule expr
2023-08-30 12:56:07:563 LL1 LogManager.java:25 look=[54, {1..4, 25, 61, 65}, 56, 61, 38, 36, 37, 9, 10, 38, 38, 25]
2023-08-30 12:56:07:563 LL1 LogManager.java:25 LL(1)? false
2023-08-30 12:56:07:564 LL1 LogManager.java:25 
DECISION 10 in rule expr
2023-08-30 12:56:07:564 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null, null]
2023-08-30 12:56:07:564 LL1 LogManager.java:25 LL(1)? false
2023-08-30 12:56:07:565 LL1 LogManager.java:25 
DECISION 11 in rule expr
2023-08-30 12:56:07:567 LL1 LogManager.java:25 look=[null, null]
2023-08-30 12:56:07:567 LL1 LogManager.java:25 LL(1)? false
2023-08-30 12:56:07:567 LL1 LogManager.java:25 
DECISION 12 in rule listParams
2023-08-30 12:56:07:567 LL1 LogManager.java:25 look=[null, <EOF>]
2023-08-30 12:56:07:567 LL1 LogManager.java:25 LL(1)? false
2023-08-30 12:56:07:567 LL1 LogManager.java:25 
DECISION 13 in rule listArray
2023-08-30 12:56:07:569 LL1 LogManager.java:25 look=[null, null]
2023-08-30 12:56:07:569 LL1 LogManager.java:25 LL(1)? false
2023-08-30 12:56:07:586 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-30 12:56:07:624 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-30 12:56:07:625 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-08-30 12:56:07:628 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-08-30 12:56:07:633 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-30 12:56:07:633 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-08-30 12:56:07:643 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-30 12:56:07:644 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,33:13]
2023-08-30 12:56:07:644 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,33:27]
2023-08-30 12:56:07:649 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-30 12:56:07:650 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:14]
2023-08-30 12:56:07:652 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,40:22].[@-1,20:23='prnt',<0>,40:32]
2023-08-30 12:56:07:653 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-08-30 12:56:07:654 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:11]
2023-08-30 12:56:07:654 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,41:19].[@-1,17:22='ifinst',<0>,41:26]
2023-08-30 12:56:07:657 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-08-30 12:56:07:658 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:20]
2023-08-30 12:56:07:658 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,42:28].[@-1,26:28='dec',<0>,42:44]
2023-08-30 12:56:07:659 action-translator LogManager.java:25 translate  $inst = $whilestmt.whl 
2023-08-30 12:56:07:659 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-08-30 12:56:07:660 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:22='whl',<0>,43:32]
2023-08-30 12:56:07:660 action-translator LogManager.java:25 translate  $inst = $assignstmt.asg 
2023-08-30 12:56:07:660 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:15]
2023-08-30 12:56:07:661 action-translator LogManager.java:25 qattr [@-1,10:19='assignstmt',<0>,44:23].[@-1,21:23='asg',<0>,44:34]
2023-08-30 12:56:07:661 action-translator LogManager.java:25 translate  $inst = $forstmt.fr 
2023-08-30 12:56:07:661 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:12]
2023-08-30 12:56:07:662 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,45:20].[@-1,18:19='fr',<0>,45:28]
2023-08-30 12:56:07:662 action-translator LogManager.java:25 translate  $inst = $guardstmt.grd 
2023-08-30 12:56:07:663 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:14]
2023-08-30 12:56:07:663 action-translator LogManager.java:25 qattr [@-1,10:18='guardstmt',<0>,46:22].[@-1,20:22='grd',<0>,46:32]
2023-08-30 12:56:07:663 action-translator LogManager.java:25 translate  $inst = $breakstmt.brk 
2023-08-30 12:56:07:664 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:14]
2023-08-30 12:56:07:664 action-translator LogManager.java:25 qattr [@-1,10:18='breakstmt',<0>,47:22].[@-1,20:22='brk',<0>,47:32]
2023-08-30 12:56:07:664 action-translator LogManager.java:25 translate  $inst = $continuestmt.cnt 
2023-08-30 12:56:07:665 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:17]
2023-08-30 12:56:07:665 action-translator LogManager.java:25 qattr [@-1,10:21='continuestmt',<0>,48:25].[@-1,23:25='cnt',<0>,48:38]
2023-08-30 12:56:07:666 action-translator LogManager.java:25 translate  $inst = $fnArray.p 
2023-08-30 12:56:07:666 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,49:12]
2023-08-30 12:56:07:667 action-translator LogManager.java:25 qattr [@-1,10:16='fnArray',<0>,49:20].[@-1,18:18='p',<0>,49:28]
2023-08-30 12:56:07:670 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-30 12:56:07:671 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,55:29]
2023-08-30 12:56:07:672 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,55:59].[@-1,38:41='line',<0>,55:65]
2023-08-30 12:56:07:676 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,55:71].[@-1,50:52='pos',<0>,55:77]
2023-08-30 12:56:07:678 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,55:82].[@-1,60:60='e',<0>,55:87]
2023-08-30 12:56:07:686 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-08-30 12:56:07:686 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,59:40]
2023-08-30 12:56:07:686 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,59:69].[@-1,34:37='line',<0>,59:72]
2023-08-30 12:56:07:687 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,59:79].[@-1,44:46='pos',<0>,59:82]
2023-08-30 12:56:07:687 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,59:88].[@-1,55:55='e',<0>,59:93]
2023-08-30 12:56:07:687 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,59:97].[@-1,65:67='blk',<0>,59:103]
2023-08-30 12:56:07:691 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) 
2023-08-30 12:56:07:691 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,60:75]
2023-08-30 12:56:07:691 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,60:104].[@-1,34:37='line',<0>,60:107]
2023-08-30 12:56:07:692 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,60:114].[@-1,44:46='pos',<0>,60:117]
2023-08-30 12:56:07:692 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,60:123].[@-1,55:55='e',<0>,60:128]
2023-08-30 12:56:07:693 action-translator LogManager.java:25 qattr [@-1,59:60='e1',<0>,60:132].[@-1,62:64='blk',<0>,60:135]
2023-08-30 12:56:07:693 action-translator LogManager.java:25 qattr [@-1,68:69='e2',<0>,60:141].[@-1,71:73='blk',<0>,60:144]
2023-08-30 12:56:07:694 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) 
2023-08-30 12:56:07:694 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,61:52]
2023-08-30 12:56:07:694 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,61:81].[@-1,34:37='line',<0>,61:84]
2023-08-30 12:56:07:695 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,61:91].[@-1,44:46='pos',<0>,61:94]
2023-08-30 12:56:07:695 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,61:100].[@-1,55:55='e',<0>,61:105]
2023-08-30 12:56:07:695 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,61:109].[@-1,65:67='blk',<0>,61:115]
2023-08-30 12:56:07:696 action-translator LogManager.java:25 qattr [@-1,85:90='ifstmt',<0>,61:135].[@-1,92:97='ifinst',<0>,61:142]
2023-08-30 12:56:07:702 action-translator LogManager.java:25 translate  $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-08-30 12:56:07:702 action-translator LogManager.java:25 attr [@-1,2:4='whl',<0>,65:43]
2023-08-30 12:56:07:703 action-translator LogManager.java:25 qattr [@-1,31:35='WHILE',<0>,65:72].[@-1,37:40='line',<0>,65:78]
2023-08-30 12:56:07:703 action-translator LogManager.java:25 qattr [@-1,44:48='WHILE',<0>,65:85].[@-1,50:52='pos',<0>,65:91]
2023-08-30 12:56:07:704 action-translator LogManager.java:25 qattr [@-1,56:59='expr',<0>,65:97].[@-1,61:61='e',<0>,65:102]
2023-08-30 12:56:07:704 action-translator LogManager.java:25 qattr [@-1,65:69='block',<0>,65:106].[@-1,71:73='blk',<0>,65:112]
2023-08-30 12:56:07:713 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) 
2023-08-30 12:56:07:713 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,69:32]
2023-08-30 12:56:07:714 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,69:67].[@-1,41:44='line',<0>,69:71]
2023-08-30 12:56:07:714 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,69:78].[@-1,52:54='pos',<0>,69:82]
2023-08-30 12:56:07:715 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,69:88].[@-1,61:64='text',<0>,69:91]
2023-08-30 12:56:07:725 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,69:98].[@-1,74:75='ty',<0>,69:104]
2023-08-30 12:56:07:725 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,69:109].[@-1,84:84='e',<0>,69:114]
2023-08-30 12:56:07:727 action-translator LogManager.java:25 translate  $dec = instructions.NewCastDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) 
2023-08-30 12:56:07:727 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,70:42]
2023-08-30 12:56:07:729 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,70:81].[@-1,45:48='line',<0>,70:85]
2023-08-30 12:56:07:732 action-translator LogManager.java:25 qattr [@-1,52:54='VAR',<0>,70:92].[@-1,56:58='pos',<0>,70:96]
2023-08-30 12:56:07:736 action-translator LogManager.java:25 qattr [@-1,62:63='ID',<0>,70:102].[@-1,65:68='text',<0>,70:105]
2023-08-30 12:56:07:736 action-translator LogManager.java:25 qattr [@-1,72:76='types',<0>,70:112].[@-1,78:79='ty',<0>,70:118]
2023-08-30 12:56:07:737 action-translator LogManager.java:25 qattr [@-1,83:86='expr',<0>,70:123].[@-1,88:88='e',<0>,70:128]
2023-08-30 12:56:07:740 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil) 
2023-08-30 12:56:07:740 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,71:24]
2023-08-30 12:56:07:740 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,71:59].[@-1,41:44='line',<0>,71:63]
2023-08-30 12:56:07:741 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,71:70].[@-1,52:54='pos',<0>,71:74]
2023-08-30 12:56:07:741 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,71:80].[@-1,61:64='text',<0>,71:83]
2023-08-30 12:56:07:742 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,71:90].[@-1,74:75='ty',<0>,71:96]
2023-08-30 12:56:07:744 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e) 
2023-08-30 12:56:07:744 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,72:32]
2023-08-30 12:56:07:745 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,72:67].[@-1,41:44='line',<0>,72:71]
2023-08-30 12:56:07:746 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,72:78].[@-1,52:54='pos',<0>,72:82]
2023-08-30 12:56:07:746 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,72:88].[@-1,61:64='text',<0>,72:91]
2023-08-30 12:56:07:747 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,72:98].[@-1,74:75='ty',<0>,72:104]
2023-08-30 12:56:07:747 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,72:109].[@-1,84:84='e',<0>,72:114]
2023-08-30 12:56:07:750 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil) 
2023-08-30 12:56:07:750 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,73:24]
2023-08-30 12:56:07:750 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,73:59].[@-1,41:44='line',<0>,73:63]
2023-08-30 12:56:07:751 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,73:70].[@-1,52:54='pos',<0>,73:74]
2023-08-30 12:56:07:751 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,73:80].[@-1,61:64='text',<0>,73:83]
2023-08-30 12:56:07:751 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,73:90].[@-1,74:75='ty',<0>,73:96]
2023-08-30 12:56:07:754 action-translator LogManager.java:25 translate  $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-08-30 12:56:07:754 action-translator LogManager.java:25 attr [@-1,2:4='asg',<0>,77:18]
2023-08-30 12:56:07:756 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,77:48].[@-1,35:38='line',<0>,77:51]
2023-08-30 12:56:07:757 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,77:58].[@-1,45:47='pos',<0>,77:61]
2023-08-30 12:56:07:759 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,77:67].[@-1,54:57='text',<0>,77:70]
2023-08-30 12:56:07:763 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,77:77].[@-1,66:66='e',<0>,77:82]
2023-08-30 12:56:07:765 action-translator LogManager.java:25 translate  $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); 
2023-08-30 12:56:07:766 action-translator LogManager.java:25 setAttr [@-1,2:4='asg',<0>,78:33] [@-1,7:89=' instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e)',<0>,78:38]
2023-08-30 12:56:07:766 action-translator LogManager.java:25 translate  instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e)
2023-08-30 12:56:07:766 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,78:68].[@-1,40:43='line',<0>,78:71]
2023-08-30 12:56:07:766 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,78:78].[@-1,50:52='pos',<0>,78:81]
2023-08-30 12:56:07:767 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,78:87].[@-1,59:62='text',<0>,78:90]
2023-08-30 12:56:07:767 action-translator LogManager.java:25 qattr [@-1,66:67='op',<0>,78:97].[@-1,69:72='text',<0>,78:100]
2023-08-30 12:56:07:767 action-translator LogManager.java:25 qattr [@-1,76:79='expr',<0>,78:107].[@-1,81:81='e',<0>,78:112]
2023-08-30 12:56:07:774 action-translator LogManager.java:25 translate  $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); 
2023-08-30 12:56:07:775 action-translator LogManager.java:25 setAttr [@-1,2:3='fr',<0>,82:76] [@-1,6:88=' instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk)',<0>,82:80]
2023-08-30 12:56:07:775 action-translator LogManager.java:25 translate  instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk)
2023-08-30 12:56:07:775 action-translator LogManager.java:25 qattr [@-1,24:26='FOR',<0>,82:98].[@-1,28:31='line',<0>,82:102]
2023-08-30 12:56:07:775 action-translator LogManager.java:25 qattr [@-1,35:37='FOR',<0>,82:109].[@-1,39:41='pos',<0>,82:113]
2023-08-30 12:56:07:777 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,82:119].[@-1,48:51='text',<0>,82:122]
2023-08-30 12:56:07:782 action-translator LogManager.java:25 qattr [@-1,55:58='exp1',<0>,82:129].[@-1,60:60='e',<0>,82:134]
2023-08-30 12:56:07:784 action-translator LogManager.java:25 qattr [@-1,64:67='exp2',<0>,82:138].[@-1,69:69='e',<0>,82:143]
2023-08-30 12:56:07:784 action-translator LogManager.java:25 qattr [@-1,73:77='block',<0>,82:147].[@-1,79:81='blk',<0>,82:153]
2023-08-30 12:56:07:786 action-translator LogManager.java:25 translate  $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); 
2023-08-30 12:56:07:787 action-translator LogManager.java:25 setAttr [@-1,2:3='fr',<0>,83:43] [@-1,6:77=' instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk)',<0>,83:47]
2023-08-30 12:56:07:787 action-translator LogManager.java:25 translate  instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk)
2023-08-30 12:56:07:787 action-translator LogManager.java:25 qattr [@-1,22:24='FOR',<0>,83:63].[@-1,26:29='line',<0>,83:67]
2023-08-30 12:56:07:788 action-translator LogManager.java:25 qattr [@-1,33:35='FOR',<0>,83:74].[@-1,37:39='pos',<0>,83:78]
2023-08-30 12:56:07:789 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,83:84].[@-1,46:49='text',<0>,83:87]
2023-08-30 12:56:07:791 action-translator LogManager.java:25 qattr [@-1,53:56='expr',<0>,83:94].[@-1,58:58='e',<0>,83:99]
2023-08-30 12:56:07:791 action-translator LogManager.java:25 qattr [@-1,62:66='block',<0>,83:103].[@-1,68:70='blk',<0>,83:109]
2023-08-30 12:56:07:794 action-translator LogManager.java:25 translate  $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) 
2023-08-30 12:56:07:794 action-translator LogManager.java:25 attr [@-1,2:4='grd',<0>,87:44]
2023-08-30 12:56:07:794 action-translator LogManager.java:25 qattr [@-1,31:35='GUARD',<0>,87:73].[@-1,37:40='line',<0>,87:79]
2023-08-30 12:56:07:795 action-translator LogManager.java:25 qattr [@-1,44:48='GUARD',<0>,87:86].[@-1,50:52='pos',<0>,87:92]
2023-08-30 12:56:07:795 action-translator LogManager.java:25 qattr [@-1,56:59='expr',<0>,87:98].[@-1,61:61='e',<0>,87:103]
2023-08-30 12:56:07:795 action-translator LogManager.java:25 qattr [@-1,65:69='block',<0>,87:107].[@-1,71:73='blk',<0>,87:113]
2023-08-30 12:56:07:797 action-translator LogManager.java:25 translate  $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) 
2023-08-30 12:56:07:799 action-translator LogManager.java:25 attr [@-1,2:4='brk',<0>,111:10]
2023-08-30 12:56:07:799 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,111:39].[@-1,37:40='line',<0>,111:45]
2023-08-30 12:56:07:800 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,111:52].[@-1,50:52='pos',<0>,111:58]
2023-08-30 12:56:07:802 action-translator LogManager.java:25 translate  $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) 
2023-08-30 12:56:07:803 action-translator LogManager.java:25 attr [@-1,2:4='cnt',<0>,115:13]
2023-08-30 12:56:07:803 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,115:45].[@-1,43:46='line',<0>,115:54]
2023-08-30 12:56:07:804 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,115:61].[@-1,59:61='pos',<0>,115:70]
2023-08-30 12:56:07:807 action-translator LogManager.java:25 translate  $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) 
2023-08-30 12:56:07:807 action-translator LogManager.java:25 attr [@-1,2:4='ret',<0>,119:16]
2023-08-30 12:56:07:808 action-translator LogManager.java:25 qattr [@-1,32:37='RETURN',<0>,119:46].[@-1,39:42='line',<0>,119:53]
2023-08-30 12:56:07:808 action-translator LogManager.java:25 qattr [@-1,46:51='RETURN',<0>,119:60].[@-1,53:55='pos',<0>,119:67]
2023-08-30 12:56:07:809 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,119:73].[@-1,64:64='e',<0>,119:78]
2023-08-30 12:56:07:810 action-translator LogManager.java:25 translate  $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) 
2023-08-30 12:56:07:810 action-translator LogManager.java:25 attr [@-1,2:4='ret',<0>,120:11]
2023-08-30 12:56:07:810 action-translator LogManager.java:25 qattr [@-1,32:37='RETURN',<0>,120:41].[@-1,39:42='line',<0>,120:48]
2023-08-30 12:56:07:812 action-translator LogManager.java:25 qattr [@-1,46:51='RETURN',<0>,120:55].[@-1,53:55='pos',<0>,120:62]
2023-08-30 12:56:07:814 action-translator LogManager.java:25 translate  $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-08-30 12:56:07:815 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,124:39]
2023-08-30 12:56:07:815 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,124:67].[@-1,33:36='line',<0>,124:70]
2023-08-30 12:56:07:815 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,124:77].[@-1,43:45='pos',<0>,124:80]
2023-08-30 12:56:07:816 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,124:86].[@-1,52:55='text',<0>,124:89]
2023-08-30 12:56:07:816 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,124:96].[@-1,64:64='e',<0>,124:101]
2023-08-30 12:56:07:817 action-translator LogManager.java:25 translate  $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-08-30 12:56:07:817 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,125:48]
2023-08-30 12:56:07:817 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,125:78].[@-1,35:38='line',<0>,125:81]
2023-08-30 12:56:07:818 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,125:88].[@-1,45:47='pos',<0>,125:91]
2023-08-30 12:56:07:819 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,125:97].[@-1,54:57='text',<0>,125:100]
2023-08-30 12:56:07:820 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,125:107].[@-1,66:66='e',<0>,125:112]
2023-08-30 12:56:07:820 action-translator LogManager.java:25 translate  $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) 
2023-08-30 12:56:07:821 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,126:38]
2023-08-30 12:56:07:821 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,126:70].[@-1,37:40='line',<0>,126:73]
2023-08-30 12:56:07:821 action-translator LogManager.java:25 qattr [@-1,44:45='ID',<0>,126:80].[@-1,47:49='pos',<0>,126:83]
2023-08-30 12:56:07:824 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,126:89].[@-1,56:59='text',<0>,126:92]
2023-08-30 12:56:07:827 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-08-30 12:56:07:828 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,135:8]
2023-08-30 12:56:07:829 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-08-30 12:56:07:830 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,136:10]
2023-08-30 12:56:07:830 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-08-30 12:56:07:830 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,137:8]
2023-08-30 12:56:07:831 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-08-30 12:56:07:832 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,138:9]
2023-08-30 12:56:07:833 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-08-30 12:56:07:833 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,139:24]
2023-08-30 12:56:07:834 action-translator LogManager.java:25 translate  $ty = environment.STR 
2023-08-30 12:56:07:834 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,140:24]
2023-08-30 12:56:07:834 action-translator LogManager.java:25 translate  $ty = environment.NIL 
2023-08-30 12:56:07:835 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,141:8]
2023-08-30 12:56:07:847 action-translator LogManager.java:25 translate 
2023-08-30 12:56:07:848 action-translator LogManager.java:25 translate $e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)
2023-08-30 12:56:07:848 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,2:65]
2023-08-30 12:56:07:848 action-translator LogManager.java:25 qattr [@-1,31:33='SUB',<0>,2:95].[@-1,35:38='line',<0>,2:99]
2023-08-30 12:56:07:849 action-translator LogManager.java:25 qattr [@-1,41:43='SUB',<0>,2:105].[@-1,45:47='pos',<0>,2:109]
2023-08-30 12:56:07:850 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,2:114].[@-1,55:55='e',<0>,2:119]
2023-08-30 12:56:07:850 action-translator LogManager.java:25 translate  $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) 
2023-08-30 12:56:07:851 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:101]
2023-08-30 12:56:07:852 action-translator LogManager.java:25 qattr [@-1,27:31='types',<0>,3:126].[@-1,33:37='start',<0>,3:132]
2023-08-30 12:56:07:853 action-translator LogManager.java:25 qattr [@-1,51:55='types',<0>,3:150].[@-1,57:61='start',<0>,3:156]
2023-08-30 12:56:07:853 action-translator LogManager.java:25 qattr [@-1,77:81='types',<0>,3:176].[@-1,83:84='ty',<0>,3:182]
2023-08-30 12:56:07:854 action-translator LogManager.java:25 qattr [@-1,88:91='expr',<0>,3:187].[@-1,93:93='e',<0>,3:192]
2023-08-30 12:56:07:854 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-30 12:56:07:854 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:79]
2023-08-30 12:56:07:854 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:84].[@-1,12:12='e',<0>,4:89]
2023-08-30 12:56:07:856 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) 
2023-08-30 12:56:07:857 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:58]
2023-08-30 12:56:07:857 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,5:84].[@-1,35:38='line',<0>,5:91]
2023-08-30 12:56:07:857 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,5:98].[@-1,49:51='pos',<0>,5:105]
2023-08-30 12:56:07:859 action-translator LogManager.java:25 translate  $e = $list.p
2023-08-30 12:56:07:860 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:43]
2023-08-30 12:56:07:860 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,6:48].[@-1,12:12='p',<0>,6:53]
2023-08-30 12:56:07:860 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-30 12:56:07:861 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,9:30].[@-1,39:42='text',<0>,9:37]
2023-08-30 12:56:07:861 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,10:43].[@-1,102:105='text',<0>,10:50]
2023-08-30 12:56:07:863 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,14:13]
2023-08-30 12:56:07:863 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,14:43].[@-1,240:243='line',<0>,14:50]
2023-08-30 12:56:07:864 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,14:56].[@-1,253:255='pos',<0>,14:63]
2023-08-30 12:56:07:864 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,16:37].[@-1,341:344='text',<0>,16:44]
2023-08-30 12:56:07:864 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,20:13]
2023-08-30 12:56:07:864 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,20:43].[@-1,474:477='line',<0>,20:50]
2023-08-30 12:56:07:865 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,20:56].[@-1,487:489='pos',<0>,20:63]
2023-08-30 12:56:07:866 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-30 12:56:07:866 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,25:16].[@-1,25:28='text',<0>,25:23]
2023-08-30 12:56:07:866 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,26:9]
2023-08-30 12:56:07:867 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,26:39].[@-1,77:80='line',<0>,26:46]
2023-08-30 12:56:07:867 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,26:53].[@-1,91:93='pos',<0>,26:60]
2023-08-30 12:56:07:868 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-30 12:56:07:868 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,28:32]
2023-08-30 12:56:07:868 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,28:62].[@-1,36:39='line',<0>,28:66]
2023-08-30 12:56:07:868 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,28:73].[@-1,47:49='pos',<0>,28:77]
2023-08-30 12:56:07:869 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-30 12:56:07:869 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,29:32]
2023-08-30 12:56:07:869 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,29:62].[@-1,36:39='line',<0>,29:66]
2023-08-30 12:56:07:870 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,29:73].[@-1,47:49='pos',<0>,29:77]
2023-08-30 12:56:07:871 action-translator LogManager.java:25 translate  $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) 
2023-08-30 12:56:07:872 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:75]
2023-08-30 12:56:07:872 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,30:101].[@-1,31:34='line',<0>,30:104]
2023-08-30 12:56:07:873 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,30:111].[@-1,41:43='pos',<0>,30:114]
2023-08-30 12:56:07:873 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,30:120].[@-1,50:53='text',<0>,30:123]
2023-08-30 12:56:07:874 action-translator LogManager.java:25 translate  $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) 
2023-08-30 12:56:07:875 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:77]
2023-08-30 12:56:07:875 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,31:105].[@-1,33:36='line',<0>,31:108]
2023-08-30 12:56:07:875 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,31:115].[@-1,43:45='pos',<0>,31:118]
2023-08-30 12:56:07:876 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,31:124].[@-1,52:55='text',<0>,31:127]
2023-08-30 12:56:07:876 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NIL) 
2023-08-30 12:56:07:876 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:32]
2023-08-30 12:56:07:877 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,32:62].[@-1,36:39='line',<0>,32:66]
2023-08-30 12:56:07:877 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,32:73].[@-1,47:49='pos',<0>,32:77]
2023-08-30 12:56:07:879 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-08-30 12:56:07:879 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) 
2023-08-30 12:56:07:880 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:139]
2023-08-30 12:56:07:880 action-translator LogManager.java:25 qattr [@-1,32:33='op',<0>,35:169].[@-1,35:38='line',<0>,35:172]
2023-08-30 12:56:07:880 action-translator LogManager.java:25 qattr [@-1,42:43='op',<0>,35:179].[@-1,45:47='pos',<0>,35:182]
2023-08-30 12:56:07:882 action-translator LogManager.java:25 qattr [@-1,56:57='op',<0>,35:193].[@-1,59:62='text',<0>,35:196]
2023-08-30 12:56:07:882 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,35:203].[@-1,71:71='e',<0>,35:208]
2023-08-30 12:56:07:882 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-08-30 12:56:07:883 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-30 12:56:07:883 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:169]
2023-08-30 12:56:07:883 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:199].[@-1,37:41='start',<0>,36:204]
2023-08-30 12:56:07:883 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:222].[@-1,60:64='start',<0>,36:227]
2023-08-30 12:56:07:884 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:247].[@-1,85:85='e',<0>,36:252]
2023-08-30 12:56:07:884 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:256].[@-1,92:95='text',<0>,36:259]
2023-08-30 12:56:07:884 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:266].[@-1,105:105='e',<0>,36:272]
2023-08-30 12:56:07:884 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-30 12:56:07:885 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-30 12:56:07:886 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:149]
2023-08-30 12:56:07:886 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:179].[@-1,37:41='start',<0>,37:184]
2023-08-30 12:56:07:887 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:202].[@-1,60:64='start',<0>,37:207]
2023-08-30 12:56:07:887 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:227].[@-1,85:85='e',<0>,37:232]
2023-08-30 12:56:07:887 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:236].[@-1,92:95='text',<0>,37:239]
2023-08-30 12:56:07:887 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:246].[@-1,105:105='e',<0>,37:252]
2023-08-30 12:56:07:888 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-30 12:56:07:890 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-30 12:56:07:890 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:154]
2023-08-30 12:56:07:890 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:184].[@-1,37:41='start',<0>,38:189]
2023-08-30 12:56:07:891 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:207].[@-1,60:64='start',<0>,38:212]
2023-08-30 12:56:07:891 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:232].[@-1,85:85='e',<0>,38:237]
2023-08-30 12:56:07:891 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:241].[@-1,92:95='text',<0>,38:244]
2023-08-30 12:56:07:892 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:251].[@-1,105:105='e',<0>,38:257]
2023-08-30 12:56:07:892 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-30 12:56:07:893 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-30 12:56:07:893 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:154]
2023-08-30 12:56:07:894 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:184].[@-1,37:41='start',<0>,39:189]
2023-08-30 12:56:07:894 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:207].[@-1,60:64='start',<0>,39:212]
2023-08-30 12:56:07:894 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:232].[@-1,85:85='e',<0>,39:237]
2023-08-30 12:56:07:895 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:241].[@-1,92:95='text',<0>,39:244]
2023-08-30 12:56:07:895 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:251].[@-1,105:105='e',<0>,39:257]
2023-08-30 12:56:07:895 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-30 12:56:07:896 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-30 12:56:07:897 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:151]
2023-08-30 12:56:07:897 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:181].[@-1,37:41='start',<0>,40:186]
2023-08-30 12:56:07:897 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:204].[@-1,60:64='start',<0>,40:209]
2023-08-30 12:56:07:897 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:229].[@-1,85:85='e',<0>,40:234]
2023-08-30 12:56:07:902 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:238].[@-1,92:95='text',<0>,40:241]
2023-08-30 12:56:07:902 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:248].[@-1,105:105='e',<0>,40:254]
2023-08-30 12:56:07:902 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-30 12:56:07:902 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-30 12:56:07:904 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:127]
2023-08-30 12:56:07:904 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:157].[@-1,37:41='start',<0>,41:162]
2023-08-30 12:56:07:904 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:180].[@-1,60:64='start',<0>,41:185]
2023-08-30 12:56:07:904 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:205].[@-1,85:85='e',<0>,41:210]
2023-08-30 12:56:07:904 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:214].[@-1,92:95='text',<0>,41:217]
2023-08-30 12:56:07:904 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:224].[@-1,105:105='e',<0>,41:230]
2023-08-30 12:56:07:906 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-30 12:56:07:907 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-30 12:56:07:907 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,42:126]
2023-08-30 12:56:07:907 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,42:156].[@-1,37:41='start',<0>,42:161]
2023-08-30 12:56:07:909 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,42:179].[@-1,60:64='start',<0>,42:184]
2023-08-30 12:56:07:910 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,42:204].[@-1,85:85='e',<0>,42:209]
2023-08-30 12:56:07:910 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,42:213].[@-1,92:95='text',<0>,42:216]
2023-08-30 12:56:07:910 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,42:223].[@-1,105:105='e',<0>,42:229]
2023-08-30 12:56:07:910 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-30 12:56:07:911 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-30 12:56:07:913 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,43:128]
2023-08-30 12:56:07:913 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,43:158].[@-1,37:41='start',<0>,43:163]
2023-08-30 12:56:07:913 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,43:181].[@-1,60:64='start',<0>,43:186]
2023-08-30 12:56:07:913 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,43:206].[@-1,85:85='e',<0>,43:211]
2023-08-30 12:56:07:913 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,43:215].[@-1,92:95='text',<0>,43:218]
2023-08-30 12:56:07:913 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,43:225].[@-1,105:105='e',<0>,43:231]
2023-08-30 12:56:07:917 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-08-30 12:56:07:918 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-08-30 12:56:07:918 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-30 12:56:07:923 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-30 12:56:07:923 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-30 12:56:07:924 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-30 12:56:07:924 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-30 12:56:07:924 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-30 12:56:07:924 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-30 12:56:07:927 action-translator LogManager.java:25 translate 
2023-08-30 12:56:07:927 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-08-30 12:56:07:929 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-08-30 12:56:07:929 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-08-30 12:56:07:932 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-08-30 12:56:07:932 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-08-30 12:56:07:933 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-30 12:56:07:934 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-08-30 12:56:07:935 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-08-30 12:56:07:935 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-08-30 12:56:07:935 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-08-30 12:56:07:936 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-30 12:56:07:937 action-translator LogManager.java:25 translate 
2023-08-30 12:56:07:942 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-08-30 12:56:07:942 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-08-30 12:56:07:943 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:62].[@-1,33:36='line',<0>,2:65]
2023-08-30 12:56:07:943 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:72].[@-1,43:45='pos',<0>,2:75]
2023-08-30 12:56:07:943 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:81].[@-1,52:55='text',<0>,2:84]
2023-08-30 12:56:07:944 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-30 12:56:07:945 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-08-30 12:56:07:945 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:149]
2023-08-30 12:56:07:945 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:181].[@-1,39:43='start',<0>,5:186]
2023-08-30 12:56:07:945 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:204].[@-1,62:66='start',<0>,5:209]
2023-08-30 12:56:07:946 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:229].[@-1,87:87='p',<0>,5:234]
2023-08-30 12:56:07:946 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:238].[@-1,96:96='e',<0>,5:243]
2023-08-30 12:56:07:947 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-30 12:56:09:757 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-30 12:56:09:759 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-30 12:56:10:158 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-30 12:56:10:158 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

