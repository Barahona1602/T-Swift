2023-08-24 20:13:05:399 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-24 20:13:05:482 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-24 20:13:07:536 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-24 20:13:07:547 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUB_IG SUM_IG)) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-24 20:13:07:553 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUB_IG SUM_IG)) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-24 20:13:07:553 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-08-24 20:13:07:653 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} PARIZQ<tokenIndex=483> expr<tokenIndex=485> PARDER<tokenIndex=487> { $e = $expr.e } 
        | list=listArray<tokenIndex=495> { $e = $list.p} 
        | CORIZQ<tokenIndex=501> listParams<tokenIndex=503> CORDER<tokenIndex=505> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=511>
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=517>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=523> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=529> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(SUB_IG<tokenIndex=338>|SUM_IG<tokenIndex=340>) expr<tokenIndex=343,p=16> { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MUL<tokenIndex=356>|DIV<tokenIndex=358>|MOD<tokenIndex=360>) right=expr<tokenIndex=365,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(ADD<tokenIndex=378>|SUB<tokenIndex=380>) right=expr<tokenIndex=385,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(MAY_IG<tokenIndex=398>|MAYOR<tokenIndex=400>) right=expr<tokenIndex=405,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=(MEN_IG<tokenIndex=418>|MENOR<tokenIndex=420>) right=expr<tokenIndex=425,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=(IG_IG<tokenIndex=438>|DIF<tokenIndex=440>) right=expr<tokenIndex=445,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=AND<tokenIndex=457> right=expr<tokenIndex=461,p=10> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> op=OR<tokenIndex=473> right=expr<tokenIndex=477,p=9> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-24 20:13:07:748 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 483))) (expr (ELEMENT_OPTIONS (= tokenIndex 485))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 487))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 495)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 501))) (listParams (ELEMENT_OPTIONS (= tokenIndex 503))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 505))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 511))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 517))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 523))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 529))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (SUB_IG (ELEMENT_OPTIONS (= tokenIndex 338))) (SUM_IG (ELEMENT_OPTIONS (= tokenIndex 340))))) (expr (ELEMENT_OPTIONS (= tokenIndex 343) (= p 16))) { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 356))) (DIV (ELEMENT_OPTIONS (= tokenIndex 358))) (MOD (ELEMENT_OPTIONS (= tokenIndex 360))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 365) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 378))) (SUB (ELEMENT_OPTIONS (= tokenIndex 380))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 385) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 398))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 400))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 405) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 418))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 420))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 425) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 438))) (DIF (ELEMENT_OPTIONS (= tokenIndex 440))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 445) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 457)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 461) (= p 10)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 473)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 477) (= p 9)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-24 20:13:07:751 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=554> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=546> expr<tokenIndex=548> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-08-24 20:13:07:758 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 554))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 546))) (expr (ELEMENT_OPTIONS (= tokenIndex 548))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-08-24 20:13:07:763 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=583> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=573> expr<tokenIndex=575> CORDER<tokenIndex=577> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-08-24 20:13:07:777 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 583))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 573))) (expr (ELEMENT_OPTIONS (= tokenIndex 575))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 577))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-08-24 20:13:07:816 grammar LogManager.java:25 import INT=1
2023-08-24 20:13:07:818 grammar LogManager.java:25 import FLOAT=2
2023-08-24 20:13:07:818 grammar LogManager.java:25 import BOOL=3
2023-08-24 20:13:07:818 grammar LogManager.java:25 import STR=4
2023-08-24 20:13:07:818 grammar LogManager.java:25 import CHAR=5
2023-08-24 20:13:07:818 grammar LogManager.java:25 import VAR=6
2023-08-24 20:13:07:818 grammar LogManager.java:25 import LET=7
2023-08-24 20:13:07:818 grammar LogManager.java:25 import VOID=8
2023-08-24 20:13:07:818 grammar LogManager.java:25 import TRU=9
2023-08-24 20:13:07:818 grammar LogManager.java:25 import FAL=10
2023-08-24 20:13:07:819 grammar LogManager.java:25 import PRINT=11
2023-08-24 20:13:07:819 grammar LogManager.java:25 import IF=12
2023-08-24 20:13:07:819 grammar LogManager.java:25 import ELSE=13
2023-08-24 20:13:07:819 grammar LogManager.java:25 import WHILE=14
2023-08-24 20:13:07:819 grammar LogManager.java:25 import FOR=15
2023-08-24 20:13:07:820 grammar LogManager.java:25 import IN=16
2023-08-24 20:13:07:820 grammar LogManager.java:25 import SWITCH=17
2023-08-24 20:13:07:820 grammar LogManager.java:25 import CASE=18
2023-08-24 20:13:07:820 grammar LogManager.java:25 import DEFAULT=19
2023-08-24 20:13:07:820 grammar LogManager.java:25 import BREAK=20
2023-08-24 20:13:07:821 grammar LogManager.java:25 import RETURN=21
2023-08-24 20:13:07:821 grammar LogManager.java:25 import CONTINUE=22
2023-08-24 20:13:07:821 grammar LogManager.java:25 import GUARD=23
2023-08-24 20:13:07:821 grammar LogManager.java:25 import FUNC=24
2023-08-24 20:13:07:821 grammar LogManager.java:25 import NIL=25
2023-08-24 20:13:07:821 grammar LogManager.java:25 import STRUCT=26
2023-08-24 20:13:07:821 grammar LogManager.java:25 import MUTATING=27
2023-08-24 20:13:07:821 grammar LogManager.java:25 import SELF=28
2023-08-24 20:13:07:822 grammar LogManager.java:25 import INOUT=29
2023-08-24 20:13:07:822 grammar LogManager.java:25 import APPEND=30
2023-08-24 20:13:07:822 grammar LogManager.java:25 import REMOVELAST=31
2023-08-24 20:13:07:822 grammar LogManager.java:25 import REMOVE=32
2023-08-24 20:13:07:822 grammar LogManager.java:25 import AT=33
2023-08-24 20:13:07:822 grammar LogManager.java:25 import ISEMPTY=34
2023-08-24 20:13:07:822 grammar LogManager.java:25 import COUNT=35
2023-08-24 20:13:07:822 grammar LogManager.java:25 import NUMBER=36
2023-08-24 20:13:07:822 grammar LogManager.java:25 import STRING=37
2023-08-24 20:13:07:823 grammar LogManager.java:25 import ID=38
2023-08-24 20:13:07:823 grammar LogManager.java:25 import DIF=39
2023-08-24 20:13:07:823 grammar LogManager.java:25 import IG_IG=40
2023-08-24 20:13:07:823 grammar LogManager.java:25 import NOT=41
2023-08-24 20:13:07:823 grammar LogManager.java:25 import OR=42
2023-08-24 20:13:07:823 grammar LogManager.java:25 import AND=43
2023-08-24 20:13:07:823 grammar LogManager.java:25 import IG=44
2023-08-24 20:13:07:823 grammar LogManager.java:25 import MAY_IG=45
2023-08-24 20:13:07:823 grammar LogManager.java:25 import MEN_IG=46
2023-08-24 20:13:07:823 grammar LogManager.java:25 import SUM_IG=47
2023-08-24 20:13:07:824 grammar LogManager.java:25 import SUB_IG=48
2023-08-24 20:13:07:824 grammar LogManager.java:25 import MAYOR=49
2023-08-24 20:13:07:824 grammar LogManager.java:25 import MENOR=50
2023-08-24 20:13:07:824 grammar LogManager.java:25 import MUL=51
2023-08-24 20:13:07:824 grammar LogManager.java:25 import DIV=52
2023-08-24 20:13:07:824 grammar LogManager.java:25 import ADD=53
2023-08-24 20:13:07:824 grammar LogManager.java:25 import SUB=54
2023-08-24 20:13:07:824 grammar LogManager.java:25 import MOD=55
2023-08-24 20:13:07:824 grammar LogManager.java:25 import PARIZQ=56
2023-08-24 20:13:07:824 grammar LogManager.java:25 import PARDER=57
2023-08-24 20:13:07:825 grammar LogManager.java:25 import LLAVEIZQ=58
2023-08-24 20:13:07:825 grammar LogManager.java:25 import LLAVEDER=59
2023-08-24 20:13:07:825 grammar LogManager.java:25 import D_PTS=60
2023-08-24 20:13:07:825 grammar LogManager.java:25 import CORIZQ=61
2023-08-24 20:13:07:825 grammar LogManager.java:25 import CORDER=62
2023-08-24 20:13:07:825 grammar LogManager.java:25 import COMA=63
2023-08-24 20:13:07:825 grammar LogManager.java:25 import WHITESPACE=64
2023-08-24 20:13:07:825 grammar LogManager.java:25 import COMMENT=65
2023-08-24 20:13:07:825 grammar LogManager.java:25 import LINE_COMMENT=66
2023-08-24 20:13:07:826 grammar LogManager.java:25 import 'Int'=1
2023-08-24 20:13:07:826 grammar LogManager.java:25 import 'Float'=2
2023-08-24 20:13:07:826 grammar LogManager.java:25 import 'Bool'=3
2023-08-24 20:13:07:826 grammar LogManager.java:25 import 'String'=4
2023-08-24 20:13:07:826 grammar LogManager.java:25 import 'Character'=5
2023-08-24 20:13:07:826 grammar LogManager.java:25 import 'var'=6
2023-08-24 20:13:07:826 grammar LogManager.java:25 import 'let'=7
2023-08-24 20:13:07:826 grammar LogManager.java:25 import 'void'=8
2023-08-24 20:13:07:826 grammar LogManager.java:25 import 'true'=9
2023-08-24 20:13:07:826 grammar LogManager.java:25 import 'false'=10
2023-08-24 20:13:07:827 grammar LogManager.java:25 import 'print'=11
2023-08-24 20:13:07:827 grammar LogManager.java:25 import 'if'=12
2023-08-24 20:13:07:827 grammar LogManager.java:25 import 'else'=13
2023-08-24 20:13:07:827 grammar LogManager.java:25 import 'while'=14
2023-08-24 20:13:07:827 grammar LogManager.java:25 import 'for'=15
2023-08-24 20:13:07:827 grammar LogManager.java:25 import 'in'=16
2023-08-24 20:13:07:827 grammar LogManager.java:25 import 'switch'=17
2023-08-24 20:13:07:827 grammar LogManager.java:25 import 'case'=18
2023-08-24 20:13:07:827 grammar LogManager.java:25 import 'default'=19
2023-08-24 20:13:07:827 grammar LogManager.java:25 import 'break'=20
2023-08-24 20:13:07:827 grammar LogManager.java:25 import 'return'=21
2023-08-24 20:13:07:828 grammar LogManager.java:25 import 'continue'=22
2023-08-24 20:13:07:828 grammar LogManager.java:25 import 'guard'=23
2023-08-24 20:13:07:828 grammar LogManager.java:25 import 'func'=24
2023-08-24 20:13:07:828 grammar LogManager.java:25 import 'nil'=25
2023-08-24 20:13:07:828 grammar LogManager.java:25 import 'struct'=26
2023-08-24 20:13:07:828 grammar LogManager.java:25 import 'mutating'=27
2023-08-24 20:13:07:828 grammar LogManager.java:25 import 'self'=28
2023-08-24 20:13:07:828 grammar LogManager.java:25 import 'inout'=29
2023-08-24 20:13:07:829 grammar LogManager.java:25 import 'append'=30
2023-08-24 20:13:07:829 grammar LogManager.java:25 import 'removeLast'=31
2023-08-24 20:13:07:829 grammar LogManager.java:25 import 'remove'=32
2023-08-24 20:13:07:829 grammar LogManager.java:25 import 'at'=33
2023-08-24 20:13:07:829 grammar LogManager.java:25 import 'isEmpty'=34
2023-08-24 20:13:07:829 grammar LogManager.java:25 import 'count'=35
2023-08-24 20:13:07:829 grammar LogManager.java:25 import '!='=39
2023-08-24 20:13:07:829 grammar LogManager.java:25 import '=='=40
2023-08-24 20:13:07:829 grammar LogManager.java:25 import '!'=41
2023-08-24 20:13:07:830 grammar LogManager.java:25 import '||'=42
2023-08-24 20:13:07:830 grammar LogManager.java:25 import '&&'=43
2023-08-24 20:13:07:830 grammar LogManager.java:25 import '='=44
2023-08-24 20:13:07:830 grammar LogManager.java:25 import '>='=45
2023-08-24 20:13:07:830 grammar LogManager.java:25 import '<='=46
2023-08-24 20:13:07:830 grammar LogManager.java:25 import '+='=47
2023-08-24 20:13:07:830 grammar LogManager.java:25 import '-='=48
2023-08-24 20:13:07:830 grammar LogManager.java:25 import '>'=49
2023-08-24 20:13:07:830 grammar LogManager.java:25 import '<'=50
2023-08-24 20:13:07:830 grammar LogManager.java:25 import '*'=51
2023-08-24 20:13:07:830 grammar LogManager.java:25 import '/'=52
2023-08-24 20:13:07:831 grammar LogManager.java:25 import '+'=53
2023-08-24 20:13:07:831 grammar LogManager.java:25 import '-'=54
2023-08-24 20:13:07:831 grammar LogManager.java:25 import '%'=55
2023-08-24 20:13:07:831 grammar LogManager.java:25 import '('=56
2023-08-24 20:13:07:831 grammar LogManager.java:25 import ')'=57
2023-08-24 20:13:07:831 grammar LogManager.java:25 import '{'=58
2023-08-24 20:13:07:831 grammar LogManager.java:25 import '}'=59
2023-08-24 20:13:07:831 grammar LogManager.java:25 import ':'=60
2023-08-24 20:13:07:831 grammar LogManager.java:25 import '['=61
2023-08-24 20:13:07:831 grammar LogManager.java:25 import ']'=62
2023-08-24 20:13:07:831 grammar LogManager.java:25 import ','=63
2023-08-24 20:13:07:832 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, WHITESPACE=64, COMMENT=65, LINE_COMMENT=66, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63}
2023-08-24 20:13:07:834 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, WHITESPACE=64, COMMENT=65, LINE_COMMENT=66}
2023-08-24 20:13:07:836 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63}
2023-08-24 20:13:07:934 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-24 20:13:07:935 LL1 LogManager.java:25 look=[{6..7, 11..12, 14, 38}, {<EOF>, 59}]
2023-08-24 20:13:07:936 LL1 LogManager.java:25 LL(1)? true
2023-08-24 20:13:07:936 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-24 20:13:07:936 LL1 LogManager.java:25 look=[11, 12, {6..7}, 14, 38]
2023-08-24 20:13:07:937 LL1 LogManager.java:25 LL(1)? true
2023-08-24 20:13:07:937 LL1 LogManager.java:25 
DECISION 2 in rule ifstmt
2023-08-24 20:13:07:937 LL1 LogManager.java:25 look=[12, 12, 12]
2023-08-24 20:13:07:937 LL1 LogManager.java:25 LL(1)? false
2023-08-24 20:13:07:937 LL1 LogManager.java:25 
DECISION 3 in rule declarationstmt
2023-08-24 20:13:07:937 LL1 LogManager.java:25 look=[6, 7]
2023-08-24 20:13:07:937 LL1 LogManager.java:25 LL(1)? true
2023-08-24 20:13:07:937 LL1 LogManager.java:25 
DECISION 4 in rule assignstmt
2023-08-24 20:13:07:937 LL1 LogManager.java:25 look=[38, 38]
2023-08-24 20:13:07:937 LL1 LogManager.java:25 LL(1)? false
2023-08-24 20:13:07:938 LL1 LogManager.java:25 
DECISION 5 in rule types
2023-08-24 20:13:07:938 LL1 LogManager.java:25 look=[1, 2, 4, 3, 61]
2023-08-24 20:13:07:938 LL1 LogManager.java:25 LL(1)? true
2023-08-24 20:13:07:938 LL1 LogManager.java:25 
DECISION 6 in rule expr
2023-08-24 20:13:07:938 LL1 LogManager.java:25 look=[56, 38, 61, 36, 37, 9, 10]
2023-08-24 20:13:07:938 LL1 LogManager.java:25 LL(1)? true
2023-08-24 20:13:07:940 LL1 LogManager.java:25 
DECISION 7 in rule expr
2023-08-24 20:13:07:940 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null]
2023-08-24 20:13:07:940 LL1 LogManager.java:25 LL(1)? false
2023-08-24 20:13:07:940 LL1 LogManager.java:25 
DECISION 8 in rule expr
2023-08-24 20:13:07:943 LL1 LogManager.java:25 look=[null, null]
2023-08-24 20:13:07:945 LL1 LogManager.java:25 LL(1)? false
2023-08-24 20:13:07:945 LL1 LogManager.java:25 
DECISION 9 in rule listParams
2023-08-24 20:13:07:945 LL1 LogManager.java:25 look=[null, 62]
2023-08-24 20:13:07:945 LL1 LogManager.java:25 LL(1)? false
2023-08-24 20:13:07:945 LL1 LogManager.java:25 
DECISION 10 in rule listArray
2023-08-24 20:13:07:947 LL1 LogManager.java:25 look=[null, null]
2023-08-24 20:13:07:947 LL1 LogManager.java:25 LL(1)? false
2023-08-24 20:13:07:959 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 20:13:07:991 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-24 20:13:07:991 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-08-24 20:13:07:994 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-08-24 20:13:08:001 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-24 20:13:08:001 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-08-24 20:13:08:007 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-24 20:13:08:008 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,33:13]
2023-08-24 20:13:08:008 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,33:27]
2023-08-24 20:13:08:011 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-24 20:13:08:013 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:14]
2023-08-24 20:13:08:013 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,40:22].[@-1,20:23='prnt',<0>,40:32]
2023-08-24 20:13:08:015 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-08-24 20:13:08:015 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:11]
2023-08-24 20:13:08:016 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,41:19].[@-1,17:22='ifinst',<0>,41:26]
2023-08-24 20:13:08:016 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-08-24 20:13:08:017 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:20]
2023-08-24 20:13:08:017 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,42:28].[@-1,26:28='dec',<0>,42:44]
2023-08-24 20:13:08:017 action-translator LogManager.java:25 translate  $inst = $whilestmt.whl 
2023-08-24 20:13:08:017 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-08-24 20:13:08:017 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:22='whl',<0>,43:32]
2023-08-24 20:13:08:018 action-translator LogManager.java:25 translate  $inst = $assignstmt.asg 
2023-08-24 20:13:08:018 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:15]
2023-08-24 20:13:08:018 action-translator LogManager.java:25 qattr [@-1,10:19='assignstmt',<0>,44:23].[@-1,21:23='asg',<0>,44:34]
2023-08-24 20:13:08:025 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-24 20:13:08:026 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,48:29]
2023-08-24 20:13:08:026 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,48:59].[@-1,38:41='line',<0>,48:65]
2023-08-24 20:13:08:033 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,48:71].[@-1,50:52='pos',<0>,48:77]
2023-08-24 20:13:08:034 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,48:82].[@-1,60:60='e',<0>,48:87]
2023-08-24 20:13:08:041 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-08-24 20:13:08:042 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,52:40]
2023-08-24 20:13:08:042 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,52:69].[@-1,34:37='line',<0>,52:72]
2023-08-24 20:13:08:044 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,52:79].[@-1,44:46='pos',<0>,52:82]
2023-08-24 20:13:08:044 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,52:88].[@-1,55:55='e',<0>,52:93]
2023-08-24 20:13:08:044 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,52:97].[@-1,65:67='blk',<0>,52:103]
2023-08-24 20:13:08:046 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) 
2023-08-24 20:13:08:046 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,53:75]
2023-08-24 20:13:08:046 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,53:104].[@-1,34:37='line',<0>,53:107]
2023-08-24 20:13:08:048 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,53:114].[@-1,44:46='pos',<0>,53:117]
2023-08-24 20:13:08:048 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,53:123].[@-1,55:55='e',<0>,53:128]
2023-08-24 20:13:08:048 action-translator LogManager.java:25 qattr [@-1,59:60='e1',<0>,53:132].[@-1,62:64='blk',<0>,53:135]
2023-08-24 20:13:08:049 action-translator LogManager.java:25 qattr [@-1,68:69='e2',<0>,53:141].[@-1,71:73='blk',<0>,53:144]
2023-08-24 20:13:08:050 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) 
2023-08-24 20:13:08:051 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,54:52]
2023-08-24 20:13:08:051 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,54:81].[@-1,34:37='line',<0>,54:84]
2023-08-24 20:13:08:052 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,54:91].[@-1,44:46='pos',<0>,54:94]
2023-08-24 20:13:08:052 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,54:100].[@-1,55:55='e',<0>,54:105]
2023-08-24 20:13:08:052 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,54:109].[@-1,65:67='blk',<0>,54:115]
2023-08-24 20:13:08:053 action-translator LogManager.java:25 qattr [@-1,85:90='ifstmt',<0>,54:135].[@-1,92:97='ifinst',<0>,54:142]
2023-08-24 20:13:08:056 action-translator LogManager.java:25 translate  $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-08-24 20:13:08:056 action-translator LogManager.java:25 attr [@-1,2:4='whl',<0>,58:43]
2023-08-24 20:13:08:056 action-translator LogManager.java:25 qattr [@-1,31:35='WHILE',<0>,58:72].[@-1,37:40='line',<0>,58:78]
2023-08-24 20:13:08:057 action-translator LogManager.java:25 qattr [@-1,44:48='WHILE',<0>,58:85].[@-1,50:52='pos',<0>,58:91]
2023-08-24 20:13:08:057 action-translator LogManager.java:25 qattr [@-1,56:59='expr',<0>,58:97].[@-1,61:61='e',<0>,58:102]
2023-08-24 20:13:08:057 action-translator LogManager.java:25 qattr [@-1,65:69='block',<0>,58:106].[@-1,71:73='blk',<0>,58:112]
2023-08-24 20:13:08:060 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) 
2023-08-24 20:13:08:060 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,62:32]
2023-08-24 20:13:08:060 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,62:67].[@-1,41:44='line',<0>,62:71]
2023-08-24 20:13:08:062 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,62:78].[@-1,52:54='pos',<0>,62:82]
2023-08-24 20:13:08:062 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,62:88].[@-1,61:64='text',<0>,62:91]
2023-08-24 20:13:08:064 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,62:98].[@-1,74:75='ty',<0>,62:104]
2023-08-24 20:13:08:064 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,62:109].[@-1,84:84='e',<0>,62:114]
2023-08-24 20:13:08:066 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e) 
2023-08-24 20:13:08:067 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,63:32]
2023-08-24 20:13:08:067 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,63:67].[@-1,41:44='line',<0>,63:71]
2023-08-24 20:13:08:068 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,63:78].[@-1,52:54='pos',<0>,63:82]
2023-08-24 20:13:08:068 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,63:88].[@-1,61:64='text',<0>,63:91]
2023-08-24 20:13:08:068 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,63:98].[@-1,74:75='ty',<0>,63:104]
2023-08-24 20:13:08:069 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,63:109].[@-1,84:84='e',<0>,63:114]
2023-08-24 20:13:08:082 action-translator LogManager.java:25 translate  $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-08-24 20:13:08:082 action-translator LogManager.java:25 attr [@-1,2:4='asg',<0>,67:18]
2023-08-24 20:13:08:082 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,67:48].[@-1,35:38='line',<0>,67:51]
2023-08-24 20:13:08:083 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,67:58].[@-1,45:47='pos',<0>,67:61]
2023-08-24 20:13:08:090 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,67:67].[@-1,54:57='text',<0>,67:70]
2023-08-24 20:13:08:092 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,67:77].[@-1,66:66='e',<0>,67:82]
2023-08-24 20:13:08:097 action-translator LogManager.java:25 translate  $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-08-24 20:13:08:097 action-translator LogManager.java:25 attr [@-1,2:4='asg',<0>,68:31]
2023-08-24 20:13:08:097 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,68:61].[@-1,35:38='line',<0>,68:64]
2023-08-24 20:13:08:097 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,68:71].[@-1,45:47='pos',<0>,68:74]
2023-08-24 20:13:08:097 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,68:80].[@-1,54:57='text',<0>,68:83]
2023-08-24 20:13:08:101 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,68:90].[@-1,66:66='e',<0>,68:95]
2023-08-24 20:13:08:104 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-08-24 20:13:08:105 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,73:8]
2023-08-24 20:13:08:105 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-08-24 20:13:08:106 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,74:10]
2023-08-24 20:13:08:107 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-08-24 20:13:08:107 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,75:8]
2023-08-24 20:13:08:108 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-08-24 20:13:08:108 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,76:9]
2023-08-24 20:13:08:108 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-08-24 20:13:08:110 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,77:18]
2023-08-24 20:13:08:116 action-translator LogManager.java:25 translate 
2023-08-24 20:13:08:119 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-24 20:13:08:120 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:82]
2023-08-24 20:13:08:121 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:87].[@-1,12:12='e',<0>,2:92]
2023-08-24 20:13:08:122 action-translator LogManager.java:25 translate  $e = $list.p
2023-08-24 20:13:08:123 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:43]
2023-08-24 20:13:08:124 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,3:48].[@-1,12:12='p',<0>,3:53]
2023-08-24 20:13:08:124 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-08-24 20:13:08:125 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:85]
2023-08-24 20:13:08:125 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,4:111].[@-1,35:38='line',<0>,4:118]
2023-08-24 20:13:08:126 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,4:125].[@-1,49:51='pos',<0>,4:132]
2023-08-24 20:13:08:126 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,4:138].[@-1,66:66='l',<0>,4:149]
2023-08-24 20:13:08:127 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-24 20:13:08:128 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,7:30].[@-1,39:42='text',<0>,7:37]
2023-08-24 20:13:08:135 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,8:43].[@-1,102:105='text',<0>,8:50]
2023-08-24 20:13:08:137 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,12:13]
2023-08-24 20:13:08:137 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,12:43].[@-1,240:243='line',<0>,12:50]
2023-08-24 20:13:08:138 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,12:56].[@-1,253:255='pos',<0>,12:63]
2023-08-24 20:13:08:138 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,14:37].[@-1,341:344='text',<0>,14:44]
2023-08-24 20:13:08:138 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,18:13]
2023-08-24 20:13:08:167 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,18:43].[@-1,474:477='line',<0>,18:50]
2023-08-24 20:13:08:168 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,18:56].[@-1,487:489='pos',<0>,18:63]
2023-08-24 20:13:08:169 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-24 20:13:08:170 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,23:16].[@-1,25:28='text',<0>,23:23]
2023-08-24 20:13:08:171 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,24:9]
2023-08-24 20:13:08:171 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,24:39].[@-1,77:80='line',<0>,24:46]
2023-08-24 20:13:08:171 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,24:53].[@-1,91:93='pos',<0>,24:60]
2023-08-24 20:13:08:172 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-24 20:13:08:172 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:32]
2023-08-24 20:13:08:173 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,26:62].[@-1,36:39='line',<0>,26:66]
2023-08-24 20:13:08:173 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,26:73].[@-1,47:49='pos',<0>,26:77]
2023-08-24 20:13:08:174 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-24 20:13:08:174 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,27:32]
2023-08-24 20:13:08:175 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,27:62].[@-1,36:39='line',<0>,27:66]
2023-08-24 20:13:08:175 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,27:73].[@-1,47:49='pos',<0>,27:77]
2023-08-24 20:13:08:177 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-24 20:13:08:178 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) 
2023-08-24 20:13:08:178 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:139]
2023-08-24 20:13:08:178 action-translator LogManager.java:25 qattr [@-1,32:33='op',<0>,30:169].[@-1,35:38='line',<0>,30:172]
2023-08-24 20:13:08:179 action-translator LogManager.java:25 qattr [@-1,42:43='op',<0>,30:179].[@-1,45:47='pos',<0>,30:182]
2023-08-24 20:13:08:179 action-translator LogManager.java:25 qattr [@-1,56:57='op',<0>,30:193].[@-1,59:62='text',<0>,30:196]
2023-08-24 20:13:08:179 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,30:203].[@-1,71:71='e',<0>,30:208]
2023-08-24 20:13:08:181 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-24 20:13:08:184 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 20:13:08:184 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:169]
2023-08-24 20:13:08:184 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,31:199].[@-1,37:41='start',<0>,31:204]
2023-08-24 20:13:08:185 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,31:222].[@-1,60:64='start',<0>,31:227]
2023-08-24 20:13:08:186 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,31:247].[@-1,85:85='e',<0>,31:252]
2023-08-24 20:13:08:186 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,31:256].[@-1,92:95='text',<0>,31:259]
2023-08-24 20:13:08:186 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,31:266].[@-1,105:105='e',<0>,31:272]
2023-08-24 20:13:08:187 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-24 20:13:08:188 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 20:13:08:188 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:149]
2023-08-24 20:13:08:191 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:179].[@-1,37:41='start',<0>,32:184]
2023-08-24 20:13:08:191 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:202].[@-1,60:64='start',<0>,32:207]
2023-08-24 20:13:08:192 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:227].[@-1,85:85='e',<0>,32:232]
2023-08-24 20:13:08:192 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:236].[@-1,92:95='text',<0>,32:239]
2023-08-24 20:13:08:194 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:246].[@-1,105:105='e',<0>,32:252]
2023-08-24 20:13:08:194 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-24 20:13:08:195 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 20:13:08:195 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:154]
2023-08-24 20:13:08:195 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:184].[@-1,37:41='start',<0>,33:189]
2023-08-24 20:13:08:196 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:207].[@-1,60:64='start',<0>,33:212]
2023-08-24 20:13:08:197 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:232].[@-1,85:85='e',<0>,33:237]
2023-08-24 20:13:08:197 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:241].[@-1,92:95='text',<0>,33:244]
2023-08-24 20:13:08:197 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:251].[@-1,105:105='e',<0>,33:257]
2023-08-24 20:13:08:197 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-24 20:13:08:198 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 20:13:08:201 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:154]
2023-08-24 20:13:08:201 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:184].[@-1,37:41='start',<0>,34:189]
2023-08-24 20:13:08:201 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:207].[@-1,60:64='start',<0>,34:212]
2023-08-24 20:13:08:201 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:232].[@-1,85:85='e',<0>,34:237]
2023-08-24 20:13:08:201 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:241].[@-1,92:95='text',<0>,34:244]
2023-08-24 20:13:08:202 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:251].[@-1,105:105='e',<0>,34:257]
2023-08-24 20:13:08:202 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-24 20:13:08:205 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 20:13:08:205 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:151]
2023-08-24 20:13:08:206 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:181].[@-1,37:41='start',<0>,35:186]
2023-08-24 20:13:08:206 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:204].[@-1,60:64='start',<0>,35:209]
2023-08-24 20:13:08:206 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:229].[@-1,85:85='e',<0>,35:234]
2023-08-24 20:13:08:206 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:238].[@-1,92:95='text',<0>,35:241]
2023-08-24 20:13:08:207 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:248].[@-1,105:105='e',<0>,35:254]
2023-08-24 20:13:08:207 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-24 20:13:08:208 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 20:13:08:208 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:125]
2023-08-24 20:13:08:208 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:155].[@-1,37:41='start',<0>,36:160]
2023-08-24 20:13:08:208 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:178].[@-1,60:64='start',<0>,36:183]
2023-08-24 20:13:08:209 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:203].[@-1,85:85='e',<0>,36:208]
2023-08-24 20:13:08:209 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:212].[@-1,92:95='text',<0>,36:215]
2023-08-24 20:13:08:209 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:222].[@-1,105:105='e',<0>,36:228]
2023-08-24 20:13:08:209 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-24 20:13:08:210 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 20:13:08:210 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:123]
2023-08-24 20:13:08:211 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:153].[@-1,37:41='start',<0>,37:158]
2023-08-24 20:13:08:211 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:176].[@-1,60:64='start',<0>,37:181]
2023-08-24 20:13:08:211 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:201].[@-1,85:85='e',<0>,37:206]
2023-08-24 20:13:08:211 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:210].[@-1,92:95='text',<0>,37:213]
2023-08-24 20:13:08:211 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:220].[@-1,105:105='e',<0>,37:226]
2023-08-24 20:13:08:216 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-24 20:13:08:216 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-24 20:13:08:216 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-24 20:13:08:216 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-24 20:13:08:216 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-24 20:13:08:216 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-24 20:13:08:216 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-24 20:13:08:216 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-24 20:13:08:218 action-translator LogManager.java:25 translate 
2023-08-24 20:13:08:219 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-08-24 20:13:08:219 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-08-24 20:13:08:219 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-08-24 20:13:08:219 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-08-24 20:13:08:219 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-08-24 20:13:08:220 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 20:13:08:221 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-08-24 20:13:08:221 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-08-24 20:13:08:221 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-08-24 20:13:08:221 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-08-24 20:13:08:222 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 20:13:08:224 action-translator LogManager.java:25 translate 
2023-08-24 20:13:08:225 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-08-24 20:13:08:225 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-08-24 20:13:08:225 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:62].[@-1,33:36='line',<0>,2:65]
2023-08-24 20:13:08:226 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:72].[@-1,43:45='pos',<0>,2:75]
2023-08-24 20:13:08:226 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:81].[@-1,52:55='text',<0>,2:84]
2023-08-24 20:13:08:227 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 20:13:08:228 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-08-24 20:13:08:228 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:127]
2023-08-24 20:13:08:229 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:159].[@-1,39:43='start',<0>,5:164]
2023-08-24 20:13:08:230 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:182].[@-1,62:66='start',<0>,5:187]
2023-08-24 20:13:08:231 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:207].[@-1,87:87='p',<0>,5:212]
2023-08-24 20:13:08:232 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:216].[@-1,96:96='e',<0>,5:221]
2023-08-24 20:13:08:233 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 20:13:09:847 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 20:13:09:847 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 20:13:10:385 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 20:13:10:385 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

