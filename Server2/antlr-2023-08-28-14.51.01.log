2023-08-28 14:50:55:995 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMILLA (BLOCK (ALT '"'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-28 14:50:56:117 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMILLA (BLOCK (ALT '"'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-28 14:50:58:088 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (= left expr) (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) types CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-28 14:50:58:113 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUB_IG SUM_IG)) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) types CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-28 14:50:58:123 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUB_IG SUM_IG)) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) types CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-28 14:50:58:123 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-08-28 14:50:58:239 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} SUB<tokenIndex=584> opDe=expr<tokenIndex=588,p=19> {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)} 
        | PARIZQ<tokenIndex=746> expr<tokenIndex=748> PARDER<tokenIndex=750> { $e = $expr.e } 
        | CORIZQ<tokenIndex=756> CORDER<tokenIndex=758> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) } 
        | list=listArray<tokenIndex=766> { $e = $list.p} 
        | CORIZQ<tokenIndex=772> listParams<tokenIndex=774> CORDER<tokenIndex=776> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=782>
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=788>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=794> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=800> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | ID<tokenIndex=806> PUNTO<tokenIndex=808> COUNT<tokenIndex=810> { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) } 
        | ID<tokenIndex=816> PUNTO<tokenIndex=818> ISEMPTY<tokenIndex=820> { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(SUB_IG<tokenIndex=601>|SUM_IG<tokenIndex=603>) expr<tokenIndex=606,p=19> { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MUL<tokenIndex=619>|DIV<tokenIndex=621>|MOD<tokenIndex=623>) right=expr<tokenIndex=628,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(ADD<tokenIndex=641>|SUB<tokenIndex=643>) right=expr<tokenIndex=648,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(MAY_IG<tokenIndex=661>|MAYOR<tokenIndex=663>) right=expr<tokenIndex=668,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MEN_IG<tokenIndex=681>|MENOR<tokenIndex=683>) right=expr<tokenIndex=688,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(IG_IG<tokenIndex=701>|DIF<tokenIndex=703>) right=expr<tokenIndex=708,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=AND<tokenIndex=720> right=expr<tokenIndex=724,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=OR<tokenIndex=736> right=expr<tokenIndex=740,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-28 14:50:58:438 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (SUB (ELEMENT_OPTIONS (= tokenIndex 584))) (= opDe (expr (ELEMENT_OPTIONS (= tokenIndex 588) (= p 19)))) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 746))) (expr (ELEMENT_OPTIONS (= tokenIndex 748))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 750))) { $e = $expr.e }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 756))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 758))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 766)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 772))) (listParams (ELEMENT_OPTIONS (= tokenIndex 774))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 776))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 782))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 788))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 794))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 800))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 806))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 808))) (COUNT (ELEMENT_OPTIONS (= tokenIndex 810))) { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 816))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 818))) (ISEMPTY (ELEMENT_OPTIONS (= tokenIndex 820))) { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (SUB_IG (ELEMENT_OPTIONS (= tokenIndex 601))) (SUM_IG (ELEMENT_OPTIONS (= tokenIndex 603))))) (expr (ELEMENT_OPTIONS (= tokenIndex 606) (= p 19))) { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 619))) (DIV (ELEMENT_OPTIONS (= tokenIndex 621))) (MOD (ELEMENT_OPTIONS (= tokenIndex 623))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 628) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 641))) (SUB (ELEMENT_OPTIONS (= tokenIndex 643))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 648) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 661))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 663))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 668) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 681))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 683))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 688) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 701))) (DIF (ELEMENT_OPTIONS (= tokenIndex 703))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 708) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 720)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 724) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 736)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 740) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-28 14:50:58:443 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=845> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=837> expr<tokenIndex=839> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-08-28 14:50:58:451 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 845))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 837))) (expr (ELEMENT_OPTIONS (= tokenIndex 839))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-08-28 14:50:58:452 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=876> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> types<tokenIndex=864> CORIZQ<tokenIndex=866> expr<tokenIndex=868> CORDER<tokenIndex=870> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-08-28 14:50:58:463 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 876))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (types (ELEMENT_OPTIONS (= tokenIndex 864))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 866))) (expr (ELEMENT_OPTIONS (= tokenIndex 868))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 870))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-08-28 14:50:58:618 grammar LogManager.java:25 import INT=1
2023-08-28 14:50:58:618 grammar LogManager.java:25 import FLOAT=2
2023-08-28 14:50:58:618 grammar LogManager.java:25 import BOOL=3
2023-08-28 14:50:58:618 grammar LogManager.java:25 import STR=4
2023-08-28 14:50:58:618 grammar LogManager.java:25 import CHAR=5
2023-08-28 14:50:58:619 grammar LogManager.java:25 import VAR=6
2023-08-28 14:50:58:619 grammar LogManager.java:25 import LET=7
2023-08-28 14:50:58:620 grammar LogManager.java:25 import VOID=8
2023-08-28 14:50:58:620 grammar LogManager.java:25 import TRU=9
2023-08-28 14:50:58:620 grammar LogManager.java:25 import FAL=10
2023-08-28 14:50:58:620 grammar LogManager.java:25 import PRINT=11
2023-08-28 14:50:58:620 grammar LogManager.java:25 import IF=12
2023-08-28 14:50:58:620 grammar LogManager.java:25 import ELSE=13
2023-08-28 14:50:58:620 grammar LogManager.java:25 import WHILE=14
2023-08-28 14:50:58:620 grammar LogManager.java:25 import FOR=15
2023-08-28 14:50:58:620 grammar LogManager.java:25 import IN=16
2023-08-28 14:50:58:622 grammar LogManager.java:25 import SWITCH=17
2023-08-28 14:50:58:622 grammar LogManager.java:25 import CASE=18
2023-08-28 14:50:58:622 grammar LogManager.java:25 import DEFAULT=19
2023-08-28 14:50:58:622 grammar LogManager.java:25 import BREAK=20
2023-08-28 14:50:58:622 grammar LogManager.java:25 import RETURN=21
2023-08-28 14:50:58:622 grammar LogManager.java:25 import CONTINUE=22
2023-08-28 14:50:58:622 grammar LogManager.java:25 import GUARD=23
2023-08-28 14:50:58:622 grammar LogManager.java:25 import FUNC=24
2023-08-28 14:50:58:622 grammar LogManager.java:25 import NIL=25
2023-08-28 14:50:58:622 grammar LogManager.java:25 import STRUCT=26
2023-08-28 14:50:58:623 grammar LogManager.java:25 import MUTATING=27
2023-08-28 14:50:58:623 grammar LogManager.java:25 import SELF=28
2023-08-28 14:50:58:623 grammar LogManager.java:25 import INOUT=29
2023-08-28 14:50:58:623 grammar LogManager.java:25 import APPEND=30
2023-08-28 14:50:58:623 grammar LogManager.java:25 import REMOVELAST=31
2023-08-28 14:50:58:623 grammar LogManager.java:25 import REMOVE=32
2023-08-28 14:50:58:623 grammar LogManager.java:25 import AT=33
2023-08-28 14:50:58:623 grammar LogManager.java:25 import ISEMPTY=34
2023-08-28 14:50:58:623 grammar LogManager.java:25 import COUNT=35
2023-08-28 14:50:58:624 grammar LogManager.java:25 import NUMBER=36
2023-08-28 14:50:58:624 grammar LogManager.java:25 import STRING=37
2023-08-28 14:50:58:624 grammar LogManager.java:25 import ID=38
2023-08-28 14:50:58:624 grammar LogManager.java:25 import DIF=39
2023-08-28 14:50:58:625 grammar LogManager.java:25 import IG_IG=40
2023-08-28 14:50:58:625 grammar LogManager.java:25 import NOT=41
2023-08-28 14:50:58:625 grammar LogManager.java:25 import OR=42
2023-08-28 14:50:58:625 grammar LogManager.java:25 import AND=43
2023-08-28 14:50:58:625 grammar LogManager.java:25 import IG=44
2023-08-28 14:50:58:625 grammar LogManager.java:25 import MAY_IG=45
2023-08-28 14:50:58:626 grammar LogManager.java:25 import MEN_IG=46
2023-08-28 14:50:58:626 grammar LogManager.java:25 import SUM_IG=47
2023-08-28 14:50:58:626 grammar LogManager.java:25 import SUB_IG=48
2023-08-28 14:50:58:626 grammar LogManager.java:25 import MAYOR=49
2023-08-28 14:50:58:626 grammar LogManager.java:25 import MENOR=50
2023-08-28 14:50:58:626 grammar LogManager.java:25 import MUL=51
2023-08-28 14:50:58:626 grammar LogManager.java:25 import DIV=52
2023-08-28 14:50:58:626 grammar LogManager.java:25 import ADD=53
2023-08-28 14:50:58:626 grammar LogManager.java:25 import SUB=54
2023-08-28 14:50:58:626 grammar LogManager.java:25 import MOD=55
2023-08-28 14:50:58:626 grammar LogManager.java:25 import PARIZQ=56
2023-08-28 14:50:58:626 grammar LogManager.java:25 import PARDER=57
2023-08-28 14:50:58:626 grammar LogManager.java:25 import LLAVEIZQ=58
2023-08-28 14:50:58:626 grammar LogManager.java:25 import LLAVEDER=59
2023-08-28 14:50:58:626 grammar LogManager.java:25 import D_PTS=60
2023-08-28 14:50:58:626 grammar LogManager.java:25 import CORIZQ=61
2023-08-28 14:50:58:626 grammar LogManager.java:25 import CORDER=62
2023-08-28 14:50:58:627 grammar LogManager.java:25 import COMA=63
2023-08-28 14:50:58:627 grammar LogManager.java:25 import PUNTO=64
2023-08-28 14:50:58:627 grammar LogManager.java:25 import COMILLA=65
2023-08-28 14:50:58:627 grammar LogManager.java:25 import WHITESPACE=66
2023-08-28 14:50:58:627 grammar LogManager.java:25 import COMMENT=67
2023-08-28 14:50:58:627 grammar LogManager.java:25 import LINE_COMMENT=68
2023-08-28 14:50:58:627 grammar LogManager.java:25 import 'Int'=1
2023-08-28 14:50:58:627 grammar LogManager.java:25 import 'Float'=2
2023-08-28 14:50:58:628 grammar LogManager.java:25 import 'Bool'=3
2023-08-28 14:50:58:628 grammar LogManager.java:25 import 'String'=4
2023-08-28 14:50:58:628 grammar LogManager.java:25 import 'Character'=5
2023-08-28 14:50:58:628 grammar LogManager.java:25 import 'var'=6
2023-08-28 14:50:58:628 grammar LogManager.java:25 import 'let'=7
2023-08-28 14:50:58:628 grammar LogManager.java:25 import 'void'=8
2023-08-28 14:50:58:628 grammar LogManager.java:25 import 'true'=9
2023-08-28 14:50:58:628 grammar LogManager.java:25 import 'false'=10
2023-08-28 14:50:58:628 grammar LogManager.java:25 import 'print'=11
2023-08-28 14:50:58:628 grammar LogManager.java:25 import 'if'=12
2023-08-28 14:50:58:628 grammar LogManager.java:25 import 'else'=13
2023-08-28 14:50:58:628 grammar LogManager.java:25 import 'while'=14
2023-08-28 14:50:58:628 grammar LogManager.java:25 import 'for'=15
2023-08-28 14:50:58:629 grammar LogManager.java:25 import 'in'=16
2023-08-28 14:50:58:629 grammar LogManager.java:25 import 'switch'=17
2023-08-28 14:50:58:629 grammar LogManager.java:25 import 'case'=18
2023-08-28 14:50:58:629 grammar LogManager.java:25 import 'default'=19
2023-08-28 14:50:58:629 grammar LogManager.java:25 import 'break'=20
2023-08-28 14:50:58:630 grammar LogManager.java:25 import 'return'=21
2023-08-28 14:50:58:630 grammar LogManager.java:25 import 'continue'=22
2023-08-28 14:50:58:630 grammar LogManager.java:25 import 'guard'=23
2023-08-28 14:50:58:632 grammar LogManager.java:25 import 'func'=24
2023-08-28 14:50:58:632 grammar LogManager.java:25 import 'nil'=25
2023-08-28 14:50:58:632 grammar LogManager.java:25 import 'struct'=26
2023-08-28 14:50:58:632 grammar LogManager.java:25 import 'mutating'=27
2023-08-28 14:50:58:632 grammar LogManager.java:25 import 'self'=28
2023-08-28 14:50:58:632 grammar LogManager.java:25 import 'inout'=29
2023-08-28 14:50:58:632 grammar LogManager.java:25 import 'append'=30
2023-08-28 14:50:58:632 grammar LogManager.java:25 import 'removeLast'=31
2023-08-28 14:50:58:632 grammar LogManager.java:25 import 'remove'=32
2023-08-28 14:50:58:633 grammar LogManager.java:25 import 'at'=33
2023-08-28 14:50:58:633 grammar LogManager.java:25 import 'isEmpty'=34
2023-08-28 14:50:58:633 grammar LogManager.java:25 import 'count'=35
2023-08-28 14:50:58:633 grammar LogManager.java:25 import '!='=39
2023-08-28 14:50:58:633 grammar LogManager.java:25 import '=='=40
2023-08-28 14:50:58:633 grammar LogManager.java:25 import '!'=41
2023-08-28 14:50:58:633 grammar LogManager.java:25 import '||'=42
2023-08-28 14:50:58:633 grammar LogManager.java:25 import '&&'=43
2023-08-28 14:50:58:633 grammar LogManager.java:25 import '='=44
2023-08-28 14:50:58:633 grammar LogManager.java:25 import '>='=45
2023-08-28 14:50:58:633 grammar LogManager.java:25 import '<='=46
2023-08-28 14:50:58:633 grammar LogManager.java:25 import '+='=47
2023-08-28 14:50:58:633 grammar LogManager.java:25 import '-='=48
2023-08-28 14:50:58:633 grammar LogManager.java:25 import '>'=49
2023-08-28 14:50:58:633 grammar LogManager.java:25 import '<'=50
2023-08-28 14:50:58:634 grammar LogManager.java:25 import '*'=51
2023-08-28 14:50:58:634 grammar LogManager.java:25 import '/'=52
2023-08-28 14:50:58:634 grammar LogManager.java:25 import '+'=53
2023-08-28 14:50:58:634 grammar LogManager.java:25 import '-'=54
2023-08-28 14:50:58:634 grammar LogManager.java:25 import '%'=55
2023-08-28 14:50:58:634 grammar LogManager.java:25 import '('=56
2023-08-28 14:50:58:634 grammar LogManager.java:25 import ')'=57
2023-08-28 14:50:58:635 grammar LogManager.java:25 import '{'=58
2023-08-28 14:50:58:635 grammar LogManager.java:25 import '}'=59
2023-08-28 14:50:58:635 grammar LogManager.java:25 import ':'=60
2023-08-28 14:50:58:635 grammar LogManager.java:25 import '['=61
2023-08-28 14:50:58:635 grammar LogManager.java:25 import ']'=62
2023-08-28 14:50:58:635 grammar LogManager.java:25 import ','=63
2023-08-28 14:50:58:635 grammar LogManager.java:25 import '.'=64
2023-08-28 14:50:58:635 grammar LogManager.java:25 import '"'=65
2023-08-28 14:50:58:636 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO=64, COMILLA=65, WHITESPACE=66, COMMENT=67, LINE_COMMENT=68, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, '.'=64, '"'=65}
2023-08-28 14:50:58:638 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO=64, COMILLA=65, WHITESPACE=66, COMMENT=67, LINE_COMMENT=68}
2023-08-28 14:50:58:638 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, '.'=64, '"'=65}
2023-08-28 14:50:58:781 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-28 14:50:58:787 LL1 LogManager.java:25 look=[{6..7, 11..12, 14..15, 20, 22..23, 38}, {<EOF>, 59}]
2023-08-28 14:50:58:788 LL1 LogManager.java:25 LL(1)? true
2023-08-28 14:50:58:788 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-28 14:50:58:791 LL1 LogManager.java:25 look=[11, 12, {6..7}, 14, 38, 15, 23, 20, 22, 38]
2023-08-28 14:50:58:791 LL1 LogManager.java:25 LL(1)? false
2023-08-28 14:50:58:791 LL1 LogManager.java:25 
DECISION 2 in rule ifstmt
2023-08-28 14:50:58:791 LL1 LogManager.java:25 look=[12, 12, 12]
2023-08-28 14:50:58:803 LL1 LogManager.java:25 LL(1)? false
2023-08-28 14:50:58:804 LL1 LogManager.java:25 
DECISION 3 in rule declarationstmt
2023-08-28 14:50:58:805 LL1 LogManager.java:25 look=[6, 7]
2023-08-28 14:50:58:805 LL1 LogManager.java:25 LL(1)? true
2023-08-28 14:50:58:805 LL1 LogManager.java:25 
DECISION 4 in rule assignstmt
2023-08-28 14:50:58:805 LL1 LogManager.java:25 look=[38, 38]
2023-08-28 14:50:58:805 LL1 LogManager.java:25 LL(1)? false
2023-08-28 14:50:58:805 LL1 LogManager.java:25 
DECISION 5 in rule forstmt
2023-08-28 14:50:58:805 LL1 LogManager.java:25 look=[15, 15]
2023-08-28 14:50:58:805 LL1 LogManager.java:25 LL(1)? false
2023-08-28 14:50:58:805 LL1 LogManager.java:25 
DECISION 6 in rule fnArray
2023-08-28 14:50:58:805 LL1 LogManager.java:25 look=[38, 38, 38]
2023-08-28 14:50:58:805 LL1 LogManager.java:25 LL(1)? false
2023-08-28 14:50:58:805 LL1 LogManager.java:25 
DECISION 7 in rule types
2023-08-28 14:50:58:806 LL1 LogManager.java:25 look=[1, 2, 4, 3, 61, 65]
2023-08-28 14:50:58:806 LL1 LogManager.java:25 LL(1)? true
2023-08-28 14:50:58:806 LL1 LogManager.java:25 
DECISION 8 in rule expr
2023-08-28 14:50:58:806 LL1 LogManager.java:25 look=[54, 56, 61, 38, 61, 36, 37, 9, 10, 38, 38]
2023-08-28 14:50:58:806 LL1 LogManager.java:25 LL(1)? false
2023-08-28 14:50:58:806 LL1 LogManager.java:25 
DECISION 9 in rule expr
2023-08-28 14:50:58:806 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null]
2023-08-28 14:50:58:807 LL1 LogManager.java:25 LL(1)? false
2023-08-28 14:50:58:807 LL1 LogManager.java:25 
DECISION 10 in rule expr
2023-08-28 14:50:58:810 LL1 LogManager.java:25 look=[null, null]
2023-08-28 14:50:58:810 LL1 LogManager.java:25 LL(1)? false
2023-08-28 14:50:58:810 LL1 LogManager.java:25 
DECISION 11 in rule listParams
2023-08-28 14:50:58:810 LL1 LogManager.java:25 look=[null, 62]
2023-08-28 14:50:58:810 LL1 LogManager.java:25 LL(1)? false
2023-08-28 14:50:58:810 LL1 LogManager.java:25 
DECISION 12 in rule listArray
2023-08-28 14:50:58:812 LL1 LogManager.java:25 look=[null, null]
2023-08-28 14:50:58:812 LL1 LogManager.java:25 LL(1)? false
2023-08-28 14:50:58:827 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-28 14:50:58:876 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-28 14:50:58:877 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-08-28 14:50:58:880 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-08-28 14:50:58:886 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-28 14:50:58:887 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-08-28 14:50:58:916 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-28 14:50:58:917 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,33:13]
2023-08-28 14:50:58:917 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,33:27]
2023-08-28 14:50:58:935 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-28 14:50:58:936 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:14]
2023-08-28 14:50:58:936 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,40:22].[@-1,20:23='prnt',<0>,40:32]
2023-08-28 14:50:58:937 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-08-28 14:50:58:937 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:11]
2023-08-28 14:50:58:937 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,41:19].[@-1,17:22='ifinst',<0>,41:26]
2023-08-28 14:50:58:940 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-08-28 14:50:58:940 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:20]
2023-08-28 14:50:58:940 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,42:28].[@-1,26:28='dec',<0>,42:44]
2023-08-28 14:50:58:942 action-translator LogManager.java:25 translate  $inst = $whilestmt.whl 
2023-08-28 14:50:58:943 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-08-28 14:50:58:945 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:22='whl',<0>,43:32]
2023-08-28 14:50:58:946 action-translator LogManager.java:25 translate  $inst = $assignstmt.asg 
2023-08-28 14:50:58:946 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:15]
2023-08-28 14:50:58:947 action-translator LogManager.java:25 qattr [@-1,10:19='assignstmt',<0>,44:23].[@-1,21:23='asg',<0>,44:34]
2023-08-28 14:50:58:947 action-translator LogManager.java:25 translate  $inst = $forstmt.fr 
2023-08-28 14:50:58:948 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:12]
2023-08-28 14:50:58:948 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,45:20].[@-1,18:19='fr',<0>,45:28]
2023-08-28 14:50:58:950 action-translator LogManager.java:25 translate  $inst = $guardstmt.grd 
2023-08-28 14:50:58:950 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:14]
2023-08-28 14:50:58:950 action-translator LogManager.java:25 qattr [@-1,10:18='guardstmt',<0>,46:22].[@-1,20:22='grd',<0>,46:32]
2023-08-28 14:50:58:953 action-translator LogManager.java:25 translate  $inst = $breakstmt.brk 
2023-08-28 14:50:58:953 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:14]
2023-08-28 14:50:58:953 action-translator LogManager.java:25 qattr [@-1,10:18='breakstmt',<0>,47:22].[@-1,20:22='brk',<0>,47:32]
2023-08-28 14:50:58:954 action-translator LogManager.java:25 translate  $inst = $continuestmt.cnt 
2023-08-28 14:50:58:955 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:17]
2023-08-28 14:50:58:955 action-translator LogManager.java:25 qattr [@-1,10:21='continuestmt',<0>,48:25].[@-1,23:25='cnt',<0>,48:38]
2023-08-28 14:50:58:956 action-translator LogManager.java:25 translate  $inst = $fnArray.p 
2023-08-28 14:50:58:956 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,49:12]
2023-08-28 14:50:58:957 action-translator LogManager.java:25 qattr [@-1,10:16='fnArray',<0>,49:20].[@-1,18:18='p',<0>,49:28]
2023-08-28 14:50:58:961 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-28 14:50:58:962 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,55:29]
2023-08-28 14:50:58:962 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,55:59].[@-1,38:41='line',<0>,55:65]
2023-08-28 14:50:58:970 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,55:71].[@-1,50:52='pos',<0>,55:77]
2023-08-28 14:50:58:975 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,55:82].[@-1,60:60='e',<0>,55:87]
2023-08-28 14:50:58:987 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-08-28 14:50:58:988 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,59:40]
2023-08-28 14:50:58:988 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,59:69].[@-1,34:37='line',<0>,59:72]
2023-08-28 14:50:58:988 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,59:79].[@-1,44:46='pos',<0>,59:82]
2023-08-28 14:50:58:991 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,59:88].[@-1,55:55='e',<0>,59:93]
2023-08-28 14:50:58:991 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,59:97].[@-1,65:67='blk',<0>,59:103]
2023-08-28 14:50:58:996 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) 
2023-08-28 14:50:58:996 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,60:75]
2023-08-28 14:50:58:998 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,60:104].[@-1,34:37='line',<0>,60:107]
2023-08-28 14:50:59:001 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,60:114].[@-1,44:46='pos',<0>,60:117]
2023-08-28 14:50:59:001 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,60:123].[@-1,55:55='e',<0>,60:128]
2023-08-28 14:50:59:001 action-translator LogManager.java:25 qattr [@-1,59:60='e1',<0>,60:132].[@-1,62:64='blk',<0>,60:135]
2023-08-28 14:50:59:002 action-translator LogManager.java:25 qattr [@-1,68:69='e2',<0>,60:141].[@-1,71:73='blk',<0>,60:144]
2023-08-28 14:50:59:003 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) 
2023-08-28 14:50:59:003 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,61:52]
2023-08-28 14:50:59:004 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,61:81].[@-1,34:37='line',<0>,61:84]
2023-08-28 14:50:59:005 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,61:91].[@-1,44:46='pos',<0>,61:94]
2023-08-28 14:50:59:005 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,61:100].[@-1,55:55='e',<0>,61:105]
2023-08-28 14:50:59:005 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,61:109].[@-1,65:67='blk',<0>,61:115]
2023-08-28 14:50:59:006 action-translator LogManager.java:25 qattr [@-1,85:90='ifstmt',<0>,61:135].[@-1,92:97='ifinst',<0>,61:142]
2023-08-28 14:50:59:009 action-translator LogManager.java:25 translate  $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-08-28 14:50:59:010 action-translator LogManager.java:25 attr [@-1,2:4='whl',<0>,65:43]
2023-08-28 14:50:59:010 action-translator LogManager.java:25 qattr [@-1,31:35='WHILE',<0>,65:72].[@-1,37:40='line',<0>,65:78]
2023-08-28 14:50:59:011 action-translator LogManager.java:25 qattr [@-1,44:48='WHILE',<0>,65:85].[@-1,50:52='pos',<0>,65:91]
2023-08-28 14:50:59:011 action-translator LogManager.java:25 qattr [@-1,56:59='expr',<0>,65:97].[@-1,61:61='e',<0>,65:102]
2023-08-28 14:50:59:011 action-translator LogManager.java:25 qattr [@-1,65:69='block',<0>,65:106].[@-1,71:73='blk',<0>,65:112]
2023-08-28 14:50:59:015 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) 
2023-08-28 14:50:59:015 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,69:32]
2023-08-28 14:50:59:015 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,69:67].[@-1,41:44='line',<0>,69:71]
2023-08-28 14:50:59:017 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,69:78].[@-1,52:54='pos',<0>,69:82]
2023-08-28 14:50:59:017 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,69:88].[@-1,61:64='text',<0>,69:91]
2023-08-28 14:50:59:018 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,69:98].[@-1,74:75='ty',<0>,69:104]
2023-08-28 14:50:59:018 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,69:109].[@-1,84:84='e',<0>,69:114]
2023-08-28 14:50:59:020 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e) 
2023-08-28 14:50:59:020 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,70:32]
2023-08-28 14:50:59:020 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,70:67].[@-1,41:44='line',<0>,70:71]
2023-08-28 14:50:59:020 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,70:78].[@-1,52:54='pos',<0>,70:82]
2023-08-28 14:50:59:022 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,70:88].[@-1,61:64='text',<0>,70:91]
2023-08-28 14:50:59:023 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,70:98].[@-1,74:75='ty',<0>,70:104]
2023-08-28 14:50:59:023 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,70:109].[@-1,84:84='e',<0>,70:114]
2023-08-28 14:50:59:028 action-translator LogManager.java:25 translate  $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-08-28 14:50:59:028 action-translator LogManager.java:25 attr [@-1,2:4='asg',<0>,74:18]
2023-08-28 14:50:59:028 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,74:48].[@-1,35:38='line',<0>,74:51]
2023-08-28 14:50:59:029 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,74:58].[@-1,45:47='pos',<0>,74:61]
2023-08-28 14:50:59:029 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,74:67].[@-1,54:57='text',<0>,74:70]
2023-08-28 14:50:59:029 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,74:77].[@-1,66:66='e',<0>,74:82]
2023-08-28 14:50:59:030 action-translator LogManager.java:25 translate  $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); 
2023-08-28 14:50:59:031 action-translator LogManager.java:25 setAttr [@-1,2:4='asg',<0>,75:33] [@-1,7:89=' instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e)',<0>,75:38]
2023-08-28 14:50:59:031 action-translator LogManager.java:25 translate  instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e)
2023-08-28 14:50:59:032 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,75:68].[@-1,40:43='line',<0>,75:71]
2023-08-28 14:50:59:032 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,75:78].[@-1,50:52='pos',<0>,75:81]
2023-08-28 14:50:59:032 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,75:87].[@-1,59:62='text',<0>,75:90]
2023-08-28 14:50:59:036 action-translator LogManager.java:25 qattr [@-1,66:67='op',<0>,75:97].[@-1,69:72='text',<0>,75:100]
2023-08-28 14:50:59:036 action-translator LogManager.java:25 qattr [@-1,76:79='expr',<0>,75:107].[@-1,81:81='e',<0>,75:112]
2023-08-28 14:50:59:052 action-translator LogManager.java:25 translate  $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); 
2023-08-28 14:50:59:060 action-translator LogManager.java:25 setAttr [@-1,2:3='fr',<0>,79:76] [@-1,6:88=' instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk)',<0>,79:80]
2023-08-28 14:50:59:061 action-translator LogManager.java:25 translate  instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk)
2023-08-28 14:50:59:061 action-translator LogManager.java:25 qattr [@-1,24:26='FOR',<0>,79:98].[@-1,28:31='line',<0>,79:102]
2023-08-28 14:50:59:061 action-translator LogManager.java:25 qattr [@-1,35:37='FOR',<0>,79:109].[@-1,39:41='pos',<0>,79:113]
2023-08-28 14:50:59:061 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,79:119].[@-1,48:51='text',<0>,79:122]
2023-08-28 14:50:59:062 action-translator LogManager.java:25 qattr [@-1,55:58='exp1',<0>,79:129].[@-1,60:60='e',<0>,79:134]
2023-08-28 14:50:59:062 action-translator LogManager.java:25 qattr [@-1,64:67='exp2',<0>,79:138].[@-1,69:69='e',<0>,79:143]
2023-08-28 14:50:59:062 action-translator LogManager.java:25 qattr [@-1,73:77='block',<0>,79:147].[@-1,79:81='blk',<0>,79:153]
2023-08-28 14:50:59:065 action-translator LogManager.java:25 translate  $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); 
2023-08-28 14:50:59:066 action-translator LogManager.java:25 setAttr [@-1,2:3='fr',<0>,80:43] [@-1,6:77=' instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk)',<0>,80:47]
2023-08-28 14:50:59:066 action-translator LogManager.java:25 translate  instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk)
2023-08-28 14:50:59:066 action-translator LogManager.java:25 qattr [@-1,22:24='FOR',<0>,80:63].[@-1,26:29='line',<0>,80:67]
2023-08-28 14:50:59:067 action-translator LogManager.java:25 qattr [@-1,33:35='FOR',<0>,80:74].[@-1,37:39='pos',<0>,80:78]
2023-08-28 14:50:59:068 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,80:84].[@-1,46:49='text',<0>,80:87]
2023-08-28 14:50:59:071 action-translator LogManager.java:25 qattr [@-1,53:56='expr',<0>,80:94].[@-1,58:58='e',<0>,80:99]
2023-08-28 14:50:59:072 action-translator LogManager.java:25 qattr [@-1,62:66='block',<0>,80:103].[@-1,68:70='blk',<0>,80:109]
2023-08-28 14:50:59:076 action-translator LogManager.java:25 translate  $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) 
2023-08-28 14:50:59:077 action-translator LogManager.java:25 attr [@-1,2:4='grd',<0>,84:44]
2023-08-28 14:50:59:077 action-translator LogManager.java:25 qattr [@-1,31:35='GUARD',<0>,84:73].[@-1,37:40='line',<0>,84:79]
2023-08-28 14:50:59:078 action-translator LogManager.java:25 qattr [@-1,44:48='GUARD',<0>,84:86].[@-1,50:52='pos',<0>,84:92]
2023-08-28 14:50:59:078 action-translator LogManager.java:25 qattr [@-1,56:59='expr',<0>,84:98].[@-1,61:61='e',<0>,84:103]
2023-08-28 14:50:59:079 action-translator LogManager.java:25 qattr [@-1,65:69='block',<0>,84:107].[@-1,71:73='blk',<0>,84:113]
2023-08-28 14:50:59:080 action-translator LogManager.java:25 translate  $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) 
2023-08-28 14:50:59:080 action-translator LogManager.java:25 attr [@-1,2:4='brk',<0>,108:10]
2023-08-28 14:50:59:082 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,108:39].[@-1,37:40='line',<0>,108:45]
2023-08-28 14:50:59:082 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,108:52].[@-1,50:52='pos',<0>,108:58]
2023-08-28 14:50:59:084 action-translator LogManager.java:25 translate  $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) 
2023-08-28 14:50:59:084 action-translator LogManager.java:25 attr [@-1,2:4='cnt',<0>,112:13]
2023-08-28 14:50:59:085 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,112:45].[@-1,43:46='line',<0>,112:54]
2023-08-28 14:50:59:085 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,112:61].[@-1,59:61='pos',<0>,112:70]
2023-08-28 14:50:59:088 action-translator LogManager.java:25 translate  $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-08-28 14:50:59:088 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,121:39]
2023-08-28 14:50:59:089 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,121:67].[@-1,33:36='line',<0>,121:70]
2023-08-28 14:50:59:089 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,121:77].[@-1,43:45='pos',<0>,121:80]
2023-08-28 14:50:59:089 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,121:86].[@-1,52:55='text',<0>,121:89]
2023-08-28 14:50:59:090 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,121:96].[@-1,64:64='e',<0>,121:101]
2023-08-28 14:50:59:091 action-translator LogManager.java:25 translate  $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-08-28 14:50:59:092 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,122:48]
2023-08-28 14:50:59:092 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,122:78].[@-1,35:38='line',<0>,122:81]
2023-08-28 14:50:59:093 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,122:88].[@-1,45:47='pos',<0>,122:91]
2023-08-28 14:50:59:093 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,122:97].[@-1,54:57='text',<0>,122:100]
2023-08-28 14:50:59:093 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,122:107].[@-1,66:66='e',<0>,122:112]
2023-08-28 14:50:59:095 action-translator LogManager.java:25 translate  $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) 
2023-08-28 14:50:59:095 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,123:38]
2023-08-28 14:50:59:095 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,123:70].[@-1,37:40='line',<0>,123:73]
2023-08-28 14:50:59:096 action-translator LogManager.java:25 qattr [@-1,44:45='ID',<0>,123:80].[@-1,47:49='pos',<0>,123:83]
2023-08-28 14:50:59:096 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,123:89].[@-1,56:59='text',<0>,123:92]
2023-08-28 14:50:59:105 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-08-28 14:50:59:105 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,127:8]
2023-08-28 14:50:59:106 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-08-28 14:50:59:106 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,128:10]
2023-08-28 14:50:59:107 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-08-28 14:50:59:107 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,129:8]
2023-08-28 14:50:59:107 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-08-28 14:50:59:107 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,130:9]
2023-08-28 14:50:59:108 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-08-28 14:50:59:108 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,131:24]
2023-08-28 14:50:59:108 action-translator LogManager.java:25 translate  $ty = environment.STR 
2023-08-28 14:50:59:109 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,132:24]
2023-08-28 14:50:59:117 action-translator LogManager.java:25 translate 
2023-08-28 14:50:59:118 action-translator LogManager.java:25 translate $e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)
2023-08-28 14:50:59:118 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,2:65]
2023-08-28 14:50:59:118 action-translator LogManager.java:25 qattr [@-1,31:33='SUB',<0>,2:95].[@-1,35:38='line',<0>,2:99]
2023-08-28 14:50:59:119 action-translator LogManager.java:25 qattr [@-1,41:43='SUB',<0>,2:105].[@-1,45:47='pos',<0>,2:109]
2023-08-28 14:50:59:120 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,2:114].[@-1,55:55='e',<0>,2:119]
2023-08-28 14:50:59:120 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-28 14:50:59:120 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:79]
2023-08-28 14:50:59:122 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,3:84].[@-1,12:12='e',<0>,3:89]
2023-08-28 14:50:59:122 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) 
2023-08-28 14:50:59:122 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:58]
2023-08-28 14:50:59:123 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,4:84].[@-1,35:38='line',<0>,4:91]
2023-08-28 14:50:59:123 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,4:98].[@-1,49:51='pos',<0>,4:105]
2023-08-28 14:50:59:124 action-translator LogManager.java:25 translate  $e = $list.p
2023-08-28 14:50:59:124 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:43]
2023-08-28 14:50:59:124 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,5:48].[@-1,12:12='p',<0>,5:53]
2023-08-28 14:50:59:125 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-08-28 14:50:59:125 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:85]
2023-08-28 14:50:59:126 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,6:111].[@-1,35:38='line',<0>,6:118]
2023-08-28 14:50:59:126 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,6:125].[@-1,49:51='pos',<0>,6:132]
2023-08-28 14:50:59:126 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,6:138].[@-1,66:66='l',<0>,6:149]
2023-08-28 14:50:59:128 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-28 14:50:59:128 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,9:30].[@-1,39:42='text',<0>,9:37]
2023-08-28 14:50:59:129 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,10:43].[@-1,102:105='text',<0>,10:50]
2023-08-28 14:50:59:129 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,14:13]
2023-08-28 14:50:59:129 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,14:43].[@-1,240:243='line',<0>,14:50]
2023-08-28 14:50:59:129 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,14:56].[@-1,253:255='pos',<0>,14:63]
2023-08-28 14:50:59:130 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,16:37].[@-1,341:344='text',<0>,16:44]
2023-08-28 14:50:59:130 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,20:13]
2023-08-28 14:50:59:131 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,20:43].[@-1,474:477='line',<0>,20:50]
2023-08-28 14:50:59:131 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,20:56].[@-1,487:489='pos',<0>,20:63]
2023-08-28 14:50:59:132 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-28 14:50:59:132 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,25:16].[@-1,25:28='text',<0>,25:23]
2023-08-28 14:50:59:132 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,26:9]
2023-08-28 14:50:59:132 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,26:39].[@-1,77:80='line',<0>,26:46]
2023-08-28 14:50:59:133 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,26:53].[@-1,91:93='pos',<0>,26:60]
2023-08-28 14:50:59:133 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-28 14:50:59:134 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,28:32]
2023-08-28 14:50:59:134 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,28:62].[@-1,36:39='line',<0>,28:66]
2023-08-28 14:50:59:135 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,28:73].[@-1,47:49='pos',<0>,28:77]
2023-08-28 14:50:59:136 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-28 14:50:59:136 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,29:32]
2023-08-28 14:50:59:137 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,29:62].[@-1,36:39='line',<0>,29:66]
2023-08-28 14:50:59:140 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,29:73].[@-1,47:49='pos',<0>,29:77]
2023-08-28 14:50:59:146 action-translator LogManager.java:25 translate  $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) 
2023-08-28 14:50:59:146 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:75]
2023-08-28 14:50:59:147 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,30:101].[@-1,31:34='line',<0>,30:104]
2023-08-28 14:50:59:148 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,30:111].[@-1,41:43='pos',<0>,30:114]
2023-08-28 14:50:59:148 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,30:120].[@-1,50:53='text',<0>,30:123]
2023-08-28 14:50:59:148 action-translator LogManager.java:25 translate  $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) 
2023-08-28 14:50:59:149 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:77]
2023-08-28 14:50:59:149 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,31:105].[@-1,33:36='line',<0>,31:108]
2023-08-28 14:50:59:149 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,31:115].[@-1,43:45='pos',<0>,31:118]
2023-08-28 14:50:59:150 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,31:124].[@-1,52:55='text',<0>,31:127]
2023-08-28 14:50:59:153 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-08-28 14:50:59:155 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) 
2023-08-28 14:50:59:155 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:139]
2023-08-28 14:50:59:155 action-translator LogManager.java:25 qattr [@-1,32:33='op',<0>,34:169].[@-1,35:38='line',<0>,34:172]
2023-08-28 14:50:59:156 action-translator LogManager.java:25 qattr [@-1,42:43='op',<0>,34:179].[@-1,45:47='pos',<0>,34:182]
2023-08-28 14:50:59:156 action-translator LogManager.java:25 qattr [@-1,56:57='op',<0>,34:193].[@-1,59:62='text',<0>,34:196]
2023-08-28 14:50:59:156 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,34:203].[@-1,71:71='e',<0>,34:208]
2023-08-28 14:50:59:157 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-28 14:50:59:158 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-28 14:50:59:161 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:169]
2023-08-28 14:50:59:165 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:199].[@-1,37:41='start',<0>,35:204]
2023-08-28 14:50:59:183 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:222].[@-1,60:64='start',<0>,35:227]
2023-08-28 14:50:59:183 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:247].[@-1,85:85='e',<0>,35:252]
2023-08-28 14:50:59:184 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:256].[@-1,92:95='text',<0>,35:259]
2023-08-28 14:50:59:184 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:266].[@-1,105:105='e',<0>,35:272]
2023-08-28 14:50:59:185 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-28 14:50:59:187 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-28 14:50:59:187 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:149]
2023-08-28 14:50:59:187 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:179].[@-1,37:41='start',<0>,36:184]
2023-08-28 14:50:59:187 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:202].[@-1,60:64='start',<0>,36:207]
2023-08-28 14:50:59:187 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:227].[@-1,85:85='e',<0>,36:232]
2023-08-28 14:50:59:188 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:236].[@-1,92:95='text',<0>,36:239]
2023-08-28 14:50:59:188 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:246].[@-1,105:105='e',<0>,36:252]
2023-08-28 14:50:59:188 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-28 14:50:59:192 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-28 14:50:59:192 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:154]
2023-08-28 14:50:59:192 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:184].[@-1,37:41='start',<0>,37:189]
2023-08-28 14:50:59:193 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:207].[@-1,60:64='start',<0>,37:212]
2023-08-28 14:50:59:193 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:232].[@-1,85:85='e',<0>,37:237]
2023-08-28 14:50:59:193 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:241].[@-1,92:95='text',<0>,37:244]
2023-08-28 14:50:59:193 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:251].[@-1,105:105='e',<0>,37:257]
2023-08-28 14:50:59:194 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-28 14:50:59:196 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-28 14:50:59:197 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:154]
2023-08-28 14:50:59:197 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:184].[@-1,37:41='start',<0>,38:189]
2023-08-28 14:50:59:197 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:207].[@-1,60:64='start',<0>,38:212]
2023-08-28 14:50:59:197 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:232].[@-1,85:85='e',<0>,38:237]
2023-08-28 14:50:59:197 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:241].[@-1,92:95='text',<0>,38:244]
2023-08-28 14:50:59:198 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:251].[@-1,105:105='e',<0>,38:257]
2023-08-28 14:50:59:200 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-28 14:50:59:200 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-28 14:50:59:202 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:151]
2023-08-28 14:50:59:202 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:181].[@-1,37:41='start',<0>,39:186]
2023-08-28 14:50:59:203 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:204].[@-1,60:64='start',<0>,39:209]
2023-08-28 14:50:59:203 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:229].[@-1,85:85='e',<0>,39:234]
2023-08-28 14:50:59:203 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:238].[@-1,92:95='text',<0>,39:241]
2023-08-28 14:50:59:204 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:248].[@-1,105:105='e',<0>,39:254]
2023-08-28 14:50:59:205 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-28 14:50:59:207 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-28 14:50:59:208 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:127]
2023-08-28 14:50:59:208 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:157].[@-1,37:41='start',<0>,40:162]
2023-08-28 14:50:59:208 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:180].[@-1,60:64='start',<0>,40:185]
2023-08-28 14:50:59:209 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:205].[@-1,85:85='e',<0>,40:210]
2023-08-28 14:50:59:209 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:214].[@-1,92:95='text',<0>,40:217]
2023-08-28 14:50:59:209 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:224].[@-1,105:105='e',<0>,40:230]
2023-08-28 14:50:59:209 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-28 14:50:59:210 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-28 14:50:59:210 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:126]
2023-08-28 14:50:59:210 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:156].[@-1,37:41='start',<0>,41:161]
2023-08-28 14:50:59:212 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:179].[@-1,60:64='start',<0>,41:184]
2023-08-28 14:50:59:212 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:204].[@-1,85:85='e',<0>,41:209]
2023-08-28 14:50:59:212 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:213].[@-1,92:95='text',<0>,41:216]
2023-08-28 14:50:59:212 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:223].[@-1,105:105='e',<0>,41:229]
2023-08-28 14:50:59:218 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-08-28 14:50:59:218 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-28 14:50:59:219 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-28 14:50:59:219 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-28 14:50:59:219 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-28 14:50:59:219 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-28 14:50:59:220 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-28 14:50:59:220 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-28 14:50:59:222 action-translator LogManager.java:25 translate 
2023-08-28 14:50:59:222 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-08-28 14:50:59:223 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-08-28 14:50:59:223 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-08-28 14:50:59:223 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-08-28 14:50:59:224 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-08-28 14:50:59:224 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-28 14:50:59:225 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-08-28 14:50:59:225 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-08-28 14:50:59:225 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-08-28 14:50:59:225 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-08-28 14:50:59:226 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-28 14:50:59:228 action-translator LogManager.java:25 translate 
2023-08-28 14:50:59:228 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-08-28 14:50:59:229 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-08-28 14:50:59:230 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:62].[@-1,33:36='line',<0>,2:65]
2023-08-28 14:50:59:231 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:72].[@-1,43:45='pos',<0>,2:75]
2023-08-28 14:50:59:232 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:81].[@-1,52:55='text',<0>,2:84]
2023-08-28 14:50:59:233 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-28 14:50:59:235 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-08-28 14:50:59:235 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:149]
2023-08-28 14:50:59:236 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:181].[@-1,39:43='start',<0>,5:186]
2023-08-28 14:50:59:236 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:204].[@-1,62:66='start',<0>,5:209]
2023-08-28 14:50:59:236 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:229].[@-1,87:87='p',<0>,5:234]
2023-08-28 14:50:59:237 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:238].[@-1,96:96='e',<0>,5:243]
2023-08-28 14:50:59:237 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-28 14:51:01:005 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-28 14:51:01:005 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-28 14:51:01:565 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-28 14:51:01:566 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

