2023-08-29 16:04:59:543 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMILLA (BLOCK (ALT '"'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-29 16:04:59:628 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMILLA (BLOCK (ALT '"'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-29 16:05:01:718 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT VAR ID (= op IG) types PARIZQ expr PARDER { $dec = instructions.NewCastDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (= left expr) (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op COMA) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) types CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-29 16:05:01:737 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT VAR ID (= op IG) types PARIZQ expr PARDER { $dec = instructions.NewCastDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUB_IG SUM_IG)) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op COMA) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) types CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-29 16:05:01:743 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT VAR ID (= op IG) types PARIZQ expr PARDER { $dec = instructions.NewCastDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUB_IG SUM_IG)) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op COMA) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) types CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-29 16:05:01:743 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-08-29 16:05:01:882 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} SUB<tokenIndex=634> opDe=expr<tokenIndex=638,p=22> {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)} 
        | types<tokenIndex=644> PARIZQ<tokenIndex=646> expr<tokenIndex=648> PARDER<tokenIndex=650> { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) } 
        | PARIZQ<tokenIndex=824> expr<tokenIndex=826> PARDER<tokenIndex=828> { $e = $expr.e } 
        | CORIZQ<tokenIndex=834> CORDER<tokenIndex=836> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) } 
        | list=listArray<tokenIndex=844> { $e = $list.p} 
        | CORIZQ<tokenIndex=850> listParams<tokenIndex=852> CORDER<tokenIndex=854> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=860>
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=866>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=872> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=878> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | ID<tokenIndex=884> PUNTO<tokenIndex=886> COUNT<tokenIndex=888> { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) } 
        | ID<tokenIndex=894> PUNTO<tokenIndex=896> ISEMPTY<tokenIndex=898> { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) } 
        | NIL<tokenIndex=904> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NIL) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=(SUB_IG<tokenIndex=663>|SUM_IG<tokenIndex=665>) expr<tokenIndex=668,p=21> { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MUL<tokenIndex=681>|DIV<tokenIndex=683>|MOD<tokenIndex=685>) right=expr<tokenIndex=690,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(ADD<tokenIndex=703>|SUB<tokenIndex=705>) right=expr<tokenIndex=710,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MAY_IG<tokenIndex=723>|MAYOR<tokenIndex=725>) right=expr<tokenIndex=730,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MEN_IG<tokenIndex=743>|MENOR<tokenIndex=745>) right=expr<tokenIndex=750,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(IG_IG<tokenIndex=763>|DIF<tokenIndex=765>) right=expr<tokenIndex=770,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=AND<tokenIndex=782> right=expr<tokenIndex=786,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=OR<tokenIndex=798> right=expr<tokenIndex=802,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=COMA<tokenIndex=814> right=expr<tokenIndex=818,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-29 16:05:01:986 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (SUB (ELEMENT_OPTIONS (= tokenIndex 634))) (= opDe (expr (ELEMENT_OPTIONS (= tokenIndex 638) (= p 22)))) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (types (ELEMENT_OPTIONS (= tokenIndex 644))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 646))) (expr (ELEMENT_OPTIONS (= tokenIndex 648))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 650))) { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 824))) (expr (ELEMENT_OPTIONS (= tokenIndex 826))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 828))) { $e = $expr.e }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 834))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 836))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 844)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 850))) (listParams (ELEMENT_OPTIONS (= tokenIndex 852))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 854))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 860))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 866))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 872))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 878))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 884))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 886))) (COUNT (ELEMENT_OPTIONS (= tokenIndex 888))) { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 894))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 896))) (ISEMPTY (ELEMENT_OPTIONS (= tokenIndex 898))) { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 904))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NIL) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (SET (SUB_IG (ELEMENT_OPTIONS (= tokenIndex 663))) (SUM_IG (ELEMENT_OPTIONS (= tokenIndex 665))))) (expr (ELEMENT_OPTIONS (= tokenIndex 668) (= p 21))) { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 681))) (DIV (ELEMENT_OPTIONS (= tokenIndex 683))) (MOD (ELEMENT_OPTIONS (= tokenIndex 685))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 690) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 703))) (SUB (ELEMENT_OPTIONS (= tokenIndex 705))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 710) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 723))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 725))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 730) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 743))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 745))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 750) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 763))) (DIF (ELEMENT_OPTIONS (= tokenIndex 765))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 770) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 782)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 786) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 798)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 802) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (COMA (ELEMENT_OPTIONS (= tokenIndex 814)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 818) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-29 16:05:01:988 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=929> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=921> expr<tokenIndex=923> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-08-29 16:05:02:001 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 929))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 921))) (expr (ELEMENT_OPTIONS (= tokenIndex 923))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-08-29 16:05:02:007 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=960> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> types<tokenIndex=948> CORIZQ<tokenIndex=950> expr<tokenIndex=952> CORDER<tokenIndex=954> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-08-29 16:05:02:019 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 960))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (types (ELEMENT_OPTIONS (= tokenIndex 948))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 950))) (expr (ELEMENT_OPTIONS (= tokenIndex 952))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 954))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-08-29 16:05:02:056 grammar LogManager.java:25 import INT=1
2023-08-29 16:05:02:057 grammar LogManager.java:25 import FLOAT=2
2023-08-29 16:05:02:057 grammar LogManager.java:25 import BOOL=3
2023-08-29 16:05:02:057 grammar LogManager.java:25 import STR=4
2023-08-29 16:05:02:057 grammar LogManager.java:25 import CHAR=5
2023-08-29 16:05:02:057 grammar LogManager.java:25 import VAR=6
2023-08-29 16:05:02:057 grammar LogManager.java:25 import LET=7
2023-08-29 16:05:02:057 grammar LogManager.java:25 import VOID=8
2023-08-29 16:05:02:057 grammar LogManager.java:25 import TRU=9
2023-08-29 16:05:02:058 grammar LogManager.java:25 import FAL=10
2023-08-29 16:05:02:058 grammar LogManager.java:25 import PRINT=11
2023-08-29 16:05:02:058 grammar LogManager.java:25 import IF=12
2023-08-29 16:05:02:058 grammar LogManager.java:25 import ELSE=13
2023-08-29 16:05:02:058 grammar LogManager.java:25 import WHILE=14
2023-08-29 16:05:02:058 grammar LogManager.java:25 import FOR=15
2023-08-29 16:05:02:058 grammar LogManager.java:25 import IN=16
2023-08-29 16:05:02:058 grammar LogManager.java:25 import SWITCH=17
2023-08-29 16:05:02:059 grammar LogManager.java:25 import CASE=18
2023-08-29 16:05:02:059 grammar LogManager.java:25 import DEFAULT=19
2023-08-29 16:05:02:059 grammar LogManager.java:25 import BREAK=20
2023-08-29 16:05:02:059 grammar LogManager.java:25 import RETURN=21
2023-08-29 16:05:02:059 grammar LogManager.java:25 import CONTINUE=22
2023-08-29 16:05:02:059 grammar LogManager.java:25 import GUARD=23
2023-08-29 16:05:02:059 grammar LogManager.java:25 import FUNC=24
2023-08-29 16:05:02:059 grammar LogManager.java:25 import NIL=25
2023-08-29 16:05:02:059 grammar LogManager.java:25 import STRUCT=26
2023-08-29 16:05:02:060 grammar LogManager.java:25 import MUTATING=27
2023-08-29 16:05:02:060 grammar LogManager.java:25 import SELF=28
2023-08-29 16:05:02:060 grammar LogManager.java:25 import INOUT=29
2023-08-29 16:05:02:060 grammar LogManager.java:25 import APPEND=30
2023-08-29 16:05:02:060 grammar LogManager.java:25 import REMOVELAST=31
2023-08-29 16:05:02:060 grammar LogManager.java:25 import REMOVE=32
2023-08-29 16:05:02:060 grammar LogManager.java:25 import AT=33
2023-08-29 16:05:02:060 grammar LogManager.java:25 import ISEMPTY=34
2023-08-29 16:05:02:060 grammar LogManager.java:25 import COUNT=35
2023-08-29 16:05:02:061 grammar LogManager.java:25 import NUMBER=36
2023-08-29 16:05:02:061 grammar LogManager.java:25 import STRING=37
2023-08-29 16:05:02:061 grammar LogManager.java:25 import ID=38
2023-08-29 16:05:02:061 grammar LogManager.java:25 import DIF=39
2023-08-29 16:05:02:061 grammar LogManager.java:25 import IG_IG=40
2023-08-29 16:05:02:061 grammar LogManager.java:25 import NOT=41
2023-08-29 16:05:02:061 grammar LogManager.java:25 import OR=42
2023-08-29 16:05:02:061 grammar LogManager.java:25 import AND=43
2023-08-29 16:05:02:061 grammar LogManager.java:25 import IG=44
2023-08-29 16:05:02:062 grammar LogManager.java:25 import MAY_IG=45
2023-08-29 16:05:02:062 grammar LogManager.java:25 import MEN_IG=46
2023-08-29 16:05:02:062 grammar LogManager.java:25 import SUM_IG=47
2023-08-29 16:05:02:062 grammar LogManager.java:25 import SUB_IG=48
2023-08-29 16:05:02:062 grammar LogManager.java:25 import MAYOR=49
2023-08-29 16:05:02:062 grammar LogManager.java:25 import MENOR=50
2023-08-29 16:05:02:062 grammar LogManager.java:25 import MUL=51
2023-08-29 16:05:02:064 grammar LogManager.java:25 import DIV=52
2023-08-29 16:05:02:064 grammar LogManager.java:25 import ADD=53
2023-08-29 16:05:02:064 grammar LogManager.java:25 import SUB=54
2023-08-29 16:05:02:064 grammar LogManager.java:25 import MOD=55
2023-08-29 16:05:02:064 grammar LogManager.java:25 import PARIZQ=56
2023-08-29 16:05:02:065 grammar LogManager.java:25 import PARDER=57
2023-08-29 16:05:02:065 grammar LogManager.java:25 import LLAVEIZQ=58
2023-08-29 16:05:02:065 grammar LogManager.java:25 import LLAVEDER=59
2023-08-29 16:05:02:065 grammar LogManager.java:25 import D_PTS=60
2023-08-29 16:05:02:065 grammar LogManager.java:25 import CORIZQ=61
2023-08-29 16:05:02:066 grammar LogManager.java:25 import CORDER=62
2023-08-29 16:05:02:066 grammar LogManager.java:25 import COMA=63
2023-08-29 16:05:02:066 grammar LogManager.java:25 import PUNTO=64
2023-08-29 16:05:02:067 grammar LogManager.java:25 import COMILLA=65
2023-08-29 16:05:02:067 grammar LogManager.java:25 import WHITESPACE=66
2023-08-29 16:05:02:067 grammar LogManager.java:25 import COMMENT=67
2023-08-29 16:05:02:067 grammar LogManager.java:25 import LINE_COMMENT=68
2023-08-29 16:05:02:067 grammar LogManager.java:25 import 'Int'=1
2023-08-29 16:05:02:067 grammar LogManager.java:25 import 'Float'=2
2023-08-29 16:05:02:067 grammar LogManager.java:25 import 'Bool'=3
2023-08-29 16:05:02:067 grammar LogManager.java:25 import 'String'=4
2023-08-29 16:05:02:067 grammar LogManager.java:25 import 'Character'=5
2023-08-29 16:05:02:067 grammar LogManager.java:25 import 'var'=6
2023-08-29 16:05:02:067 grammar LogManager.java:25 import 'let'=7
2023-08-29 16:05:02:068 grammar LogManager.java:25 import 'void'=8
2023-08-29 16:05:02:068 grammar LogManager.java:25 import 'true'=9
2023-08-29 16:05:02:068 grammar LogManager.java:25 import 'false'=10
2023-08-29 16:05:02:068 grammar LogManager.java:25 import 'print'=11
2023-08-29 16:05:02:068 grammar LogManager.java:25 import 'if'=12
2023-08-29 16:05:02:068 grammar LogManager.java:25 import 'else'=13
2023-08-29 16:05:02:068 grammar LogManager.java:25 import 'while'=14
2023-08-29 16:05:02:068 grammar LogManager.java:25 import 'for'=15
2023-08-29 16:05:02:068 grammar LogManager.java:25 import 'in'=16
2023-08-29 16:05:02:068 grammar LogManager.java:25 import 'switch'=17
2023-08-29 16:05:02:068 grammar LogManager.java:25 import 'case'=18
2023-08-29 16:05:02:068 grammar LogManager.java:25 import 'default'=19
2023-08-29 16:05:02:068 grammar LogManager.java:25 import 'break'=20
2023-08-29 16:05:02:068 grammar LogManager.java:25 import 'return'=21
2023-08-29 16:05:02:068 grammar LogManager.java:25 import 'continue'=22
2023-08-29 16:05:02:068 grammar LogManager.java:25 import 'guard'=23
2023-08-29 16:05:02:068 grammar LogManager.java:25 import 'func'=24
2023-08-29 16:05:02:069 grammar LogManager.java:25 import 'nil'=25
2023-08-29 16:05:02:069 grammar LogManager.java:25 import 'struct'=26
2023-08-29 16:05:02:069 grammar LogManager.java:25 import 'mutating'=27
2023-08-29 16:05:02:069 grammar LogManager.java:25 import 'self'=28
2023-08-29 16:05:02:069 grammar LogManager.java:25 import 'inout'=29
2023-08-29 16:05:02:069 grammar LogManager.java:25 import 'append'=30
2023-08-29 16:05:02:069 grammar LogManager.java:25 import 'removeLast'=31
2023-08-29 16:05:02:070 grammar LogManager.java:25 import 'remove'=32
2023-08-29 16:05:02:070 grammar LogManager.java:25 import 'at'=33
2023-08-29 16:05:02:070 grammar LogManager.java:25 import 'isEmpty'=34
2023-08-29 16:05:02:070 grammar LogManager.java:25 import 'count'=35
2023-08-29 16:05:02:070 grammar LogManager.java:25 import '!='=39
2023-08-29 16:05:02:070 grammar LogManager.java:25 import '=='=40
2023-08-29 16:05:02:070 grammar LogManager.java:25 import '!'=41
2023-08-29 16:05:02:070 grammar LogManager.java:25 import '||'=42
2023-08-29 16:05:02:070 grammar LogManager.java:25 import '&&'=43
2023-08-29 16:05:02:070 grammar LogManager.java:25 import '='=44
2023-08-29 16:05:02:070 grammar LogManager.java:25 import '>='=45
2023-08-29 16:05:02:070 grammar LogManager.java:25 import '<='=46
2023-08-29 16:05:02:070 grammar LogManager.java:25 import '+='=47
2023-08-29 16:05:02:071 grammar LogManager.java:25 import '-='=48
2023-08-29 16:05:02:071 grammar LogManager.java:25 import '>'=49
2023-08-29 16:05:02:071 grammar LogManager.java:25 import '<'=50
2023-08-29 16:05:02:071 grammar LogManager.java:25 import '*'=51
2023-08-29 16:05:02:071 grammar LogManager.java:25 import '/'=52
2023-08-29 16:05:02:071 grammar LogManager.java:25 import '+'=53
2023-08-29 16:05:02:071 grammar LogManager.java:25 import '-'=54
2023-08-29 16:05:02:071 grammar LogManager.java:25 import '%'=55
2023-08-29 16:05:02:071 grammar LogManager.java:25 import '('=56
2023-08-29 16:05:02:071 grammar LogManager.java:25 import ')'=57
2023-08-29 16:05:02:071 grammar LogManager.java:25 import '{'=58
2023-08-29 16:05:02:071 grammar LogManager.java:25 import '}'=59
2023-08-29 16:05:02:072 grammar LogManager.java:25 import ':'=60
2023-08-29 16:05:02:072 grammar LogManager.java:25 import '['=61
2023-08-29 16:05:02:072 grammar LogManager.java:25 import ']'=62
2023-08-29 16:05:02:072 grammar LogManager.java:25 import ','=63
2023-08-29 16:05:02:072 grammar LogManager.java:25 import '.'=64
2023-08-29 16:05:02:072 grammar LogManager.java:25 import '"'=65
2023-08-29 16:05:02:072 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO=64, COMILLA=65, WHITESPACE=66, COMMENT=67, LINE_COMMENT=68, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, '.'=64, '"'=65}
2023-08-29 16:05:02:077 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO=64, COMILLA=65, WHITESPACE=66, COMMENT=67, LINE_COMMENT=68}
2023-08-29 16:05:02:077 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, '.'=64, '"'=65}
2023-08-29 16:05:02:207 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-29 16:05:02:209 LL1 LogManager.java:25 look=[{6..7, 11..12, 14..15, 20, 22..23, 38}, {<EOF>, 59}]
2023-08-29 16:05:02:210 LL1 LogManager.java:25 LL(1)? true
2023-08-29 16:05:02:210 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-29 16:05:02:211 LL1 LogManager.java:25 look=[11, 12, {6..7}, 14, 38, 15, 23, 20, 22, 38]
2023-08-29 16:05:02:219 LL1 LogManager.java:25 LL(1)? false
2023-08-29 16:05:02:219 LL1 LogManager.java:25 
DECISION 2 in rule ifstmt
2023-08-29 16:05:02:219 LL1 LogManager.java:25 look=[12, 12, 12]
2023-08-29 16:05:02:219 LL1 LogManager.java:25 LL(1)? false
2023-08-29 16:05:02:219 LL1 LogManager.java:25 
DECISION 3 in rule declarationstmt
2023-08-29 16:05:02:219 LL1 LogManager.java:25 look=[6, 6, 6, 7, 7]
2023-08-29 16:05:02:219 LL1 LogManager.java:25 LL(1)? false
2023-08-29 16:05:02:219 LL1 LogManager.java:25 
DECISION 4 in rule assignstmt
2023-08-29 16:05:02:219 LL1 LogManager.java:25 look=[38, 38]
2023-08-29 16:05:02:219 LL1 LogManager.java:25 LL(1)? false
2023-08-29 16:05:02:219 LL1 LogManager.java:25 
DECISION 5 in rule forstmt
2023-08-29 16:05:02:219 LL1 LogManager.java:25 look=[15, 15]
2023-08-29 16:05:02:219 LL1 LogManager.java:25 LL(1)? false
2023-08-29 16:05:02:219 LL1 LogManager.java:25 
DECISION 6 in rule fnArray
2023-08-29 16:05:02:219 LL1 LogManager.java:25 look=[38, 38, 38]
2023-08-29 16:05:02:219 LL1 LogManager.java:25 LL(1)? false
2023-08-29 16:05:02:220 LL1 LogManager.java:25 
DECISION 7 in rule types
2023-08-29 16:05:02:220 LL1 LogManager.java:25 look=[1, 2, 4, 3, 61, 65, 25]
2023-08-29 16:05:02:220 LL1 LogManager.java:25 LL(1)? true
2023-08-29 16:05:02:220 LL1 LogManager.java:25 
DECISION 8 in rule expr
2023-08-29 16:05:02:221 LL1 LogManager.java:25 look=[54, {1..4, 25, 61, 65}, 56, 61, 38, 61, 36, 37, 9, 10, 38, 38, 25]
2023-08-29 16:05:02:221 LL1 LogManager.java:25 LL(1)? false
2023-08-29 16:05:02:221 LL1 LogManager.java:25 
DECISION 9 in rule expr
2023-08-29 16:05:02:221 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null, null]
2023-08-29 16:05:02:221 LL1 LogManager.java:25 LL(1)? false
2023-08-29 16:05:02:221 LL1 LogManager.java:25 
DECISION 10 in rule expr
2023-08-29 16:05:02:222 LL1 LogManager.java:25 look=[null, null]
2023-08-29 16:05:02:222 LL1 LogManager.java:25 LL(1)? false
2023-08-29 16:05:02:222 LL1 LogManager.java:25 
DECISION 11 in rule listParams
2023-08-29 16:05:02:222 LL1 LogManager.java:25 look=[null, 62]
2023-08-29 16:05:02:222 LL1 LogManager.java:25 LL(1)? false
2023-08-29 16:05:02:222 LL1 LogManager.java:25 
DECISION 12 in rule listArray
2023-08-29 16:05:02:224 LL1 LogManager.java:25 look=[null, null]
2023-08-29 16:05:02:224 LL1 LogManager.java:25 LL(1)? false
2023-08-29 16:05:02:240 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-29 16:05:02:277 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-29 16:05:02:278 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-08-29 16:05:02:281 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-08-29 16:05:02:286 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-29 16:05:02:287 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-08-29 16:05:02:293 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-29 16:05:02:293 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,33:13]
2023-08-29 16:05:02:297 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,33:27]
2023-08-29 16:05:02:300 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-29 16:05:02:301 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:14]
2023-08-29 16:05:02:301 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,40:22].[@-1,20:23='prnt',<0>,40:32]
2023-08-29 16:05:02:302 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-08-29 16:05:02:304 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:11]
2023-08-29 16:05:02:304 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,41:19].[@-1,17:22='ifinst',<0>,41:26]
2023-08-29 16:05:02:307 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-08-29 16:05:02:307 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:20]
2023-08-29 16:05:02:307 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,42:28].[@-1,26:28='dec',<0>,42:44]
2023-08-29 16:05:02:308 action-translator LogManager.java:25 translate  $inst = $whilestmt.whl 
2023-08-29 16:05:02:308 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-08-29 16:05:02:309 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:22='whl',<0>,43:32]
2023-08-29 16:05:02:310 action-translator LogManager.java:25 translate  $inst = $assignstmt.asg 
2023-08-29 16:05:02:310 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:15]
2023-08-29 16:05:02:311 action-translator LogManager.java:25 qattr [@-1,10:19='assignstmt',<0>,44:23].[@-1,21:23='asg',<0>,44:34]
2023-08-29 16:05:02:312 action-translator LogManager.java:25 translate  $inst = $forstmt.fr 
2023-08-29 16:05:02:317 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:12]
2023-08-29 16:05:02:317 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,45:20].[@-1,18:19='fr',<0>,45:28]
2023-08-29 16:05:02:318 action-translator LogManager.java:25 translate  $inst = $guardstmt.grd 
2023-08-29 16:05:02:318 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:14]
2023-08-29 16:05:02:319 action-translator LogManager.java:25 qattr [@-1,10:18='guardstmt',<0>,46:22].[@-1,20:22='grd',<0>,46:32]
2023-08-29 16:05:02:319 action-translator LogManager.java:25 translate  $inst = $breakstmt.brk 
2023-08-29 16:05:02:320 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:14]
2023-08-29 16:05:02:320 action-translator LogManager.java:25 qattr [@-1,10:18='breakstmt',<0>,47:22].[@-1,20:22='brk',<0>,47:32]
2023-08-29 16:05:02:320 action-translator LogManager.java:25 translate  $inst = $continuestmt.cnt 
2023-08-29 16:05:02:320 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:17]
2023-08-29 16:05:02:321 action-translator LogManager.java:25 qattr [@-1,10:21='continuestmt',<0>,48:25].[@-1,23:25='cnt',<0>,48:38]
2023-08-29 16:05:02:321 action-translator LogManager.java:25 translate  $inst = $fnArray.p 
2023-08-29 16:05:02:321 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,49:12]
2023-08-29 16:05:02:321 action-translator LogManager.java:25 qattr [@-1,10:16='fnArray',<0>,49:20].[@-1,18:18='p',<0>,49:28]
2023-08-29 16:05:02:325 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-29 16:05:02:326 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,55:29]
2023-08-29 16:05:02:326 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,55:59].[@-1,38:41='line',<0>,55:65]
2023-08-29 16:05:02:332 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,55:71].[@-1,50:52='pos',<0>,55:77]
2023-08-29 16:05:02:336 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,55:82].[@-1,60:60='e',<0>,55:87]
2023-08-29 16:05:02:347 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-08-29 16:05:02:348 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,59:40]
2023-08-29 16:05:02:349 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,59:69].[@-1,34:37='line',<0>,59:72]
2023-08-29 16:05:02:350 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,59:79].[@-1,44:46='pos',<0>,59:82]
2023-08-29 16:05:02:350 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,59:88].[@-1,55:55='e',<0>,59:93]
2023-08-29 16:05:02:351 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,59:97].[@-1,65:67='blk',<0>,59:103]
2023-08-29 16:05:02:352 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) 
2023-08-29 16:05:02:353 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,60:75]
2023-08-29 16:05:02:353 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,60:104].[@-1,34:37='line',<0>,60:107]
2023-08-29 16:05:02:353 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,60:114].[@-1,44:46='pos',<0>,60:117]
2023-08-29 16:05:02:354 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,60:123].[@-1,55:55='e',<0>,60:128]
2023-08-29 16:05:02:355 action-translator LogManager.java:25 qattr [@-1,59:60='e1',<0>,60:132].[@-1,62:64='blk',<0>,60:135]
2023-08-29 16:05:02:355 action-translator LogManager.java:25 qattr [@-1,68:69='e2',<0>,60:141].[@-1,71:73='blk',<0>,60:144]
2023-08-29 16:05:02:357 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) 
2023-08-29 16:05:02:357 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,61:52]
2023-08-29 16:05:02:358 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,61:81].[@-1,34:37='line',<0>,61:84]
2023-08-29 16:05:02:358 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,61:91].[@-1,44:46='pos',<0>,61:94]
2023-08-29 16:05:02:358 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,61:100].[@-1,55:55='e',<0>,61:105]
2023-08-29 16:05:02:359 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,61:109].[@-1,65:67='blk',<0>,61:115]
2023-08-29 16:05:02:359 action-translator LogManager.java:25 qattr [@-1,85:90='ifstmt',<0>,61:135].[@-1,92:97='ifinst',<0>,61:142]
2023-08-29 16:05:02:362 action-translator LogManager.java:25 translate  $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-08-29 16:05:02:362 action-translator LogManager.java:25 attr [@-1,2:4='whl',<0>,65:43]
2023-08-29 16:05:02:366 action-translator LogManager.java:25 qattr [@-1,31:35='WHILE',<0>,65:72].[@-1,37:40='line',<0>,65:78]
2023-08-29 16:05:02:366 action-translator LogManager.java:25 qattr [@-1,44:48='WHILE',<0>,65:85].[@-1,50:52='pos',<0>,65:91]
2023-08-29 16:05:02:367 action-translator LogManager.java:25 qattr [@-1,56:59='expr',<0>,65:97].[@-1,61:61='e',<0>,65:102]
2023-08-29 16:05:02:367 action-translator LogManager.java:25 qattr [@-1,65:69='block',<0>,65:106].[@-1,71:73='blk',<0>,65:112]
2023-08-29 16:05:02:372 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) 
2023-08-29 16:05:02:374 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,69:32]
2023-08-29 16:05:02:375 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,69:67].[@-1,41:44='line',<0>,69:71]
2023-08-29 16:05:02:376 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,69:78].[@-1,52:54='pos',<0>,69:82]
2023-08-29 16:05:02:377 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,69:88].[@-1,61:64='text',<0>,69:91]
2023-08-29 16:05:02:379 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,69:98].[@-1,74:75='ty',<0>,69:104]
2023-08-29 16:05:02:380 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,69:109].[@-1,84:84='e',<0>,69:114]
2023-08-29 16:05:02:382 action-translator LogManager.java:25 translate  $dec = instructions.NewCastDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) 
2023-08-29 16:05:02:382 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,70:42]
2023-08-29 16:05:02:382 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,70:81].[@-1,45:48='line',<0>,70:85]
2023-08-29 16:05:02:384 action-translator LogManager.java:25 qattr [@-1,52:54='VAR',<0>,70:92].[@-1,56:58='pos',<0>,70:96]
2023-08-29 16:05:02:386 action-translator LogManager.java:25 qattr [@-1,62:63='ID',<0>,70:102].[@-1,65:68='text',<0>,70:105]
2023-08-29 16:05:02:387 action-translator LogManager.java:25 qattr [@-1,72:76='types',<0>,70:112].[@-1,78:79='ty',<0>,70:118]
2023-08-29 16:05:02:388 action-translator LogManager.java:25 qattr [@-1,83:86='expr',<0>,70:123].[@-1,88:88='e',<0>,70:128]
2023-08-29 16:05:02:389 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil) 
2023-08-29 16:05:02:390 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,71:24]
2023-08-29 16:05:02:390 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,71:59].[@-1,41:44='line',<0>,71:63]
2023-08-29 16:05:02:390 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,71:70].[@-1,52:54='pos',<0>,71:74]
2023-08-29 16:05:02:391 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,71:80].[@-1,61:64='text',<0>,71:83]
2023-08-29 16:05:02:391 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,71:90].[@-1,74:75='ty',<0>,71:96]
2023-08-29 16:05:02:392 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e) 
2023-08-29 16:05:02:393 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,72:32]
2023-08-29 16:05:02:393 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,72:67].[@-1,41:44='line',<0>,72:71]
2023-08-29 16:05:02:393 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,72:78].[@-1,52:54='pos',<0>,72:82]
2023-08-29 16:05:02:395 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,72:88].[@-1,61:64='text',<0>,72:91]
2023-08-29 16:05:02:397 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,72:98].[@-1,74:75='ty',<0>,72:104]
2023-08-29 16:05:02:399 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,72:109].[@-1,84:84='e',<0>,72:114]
2023-08-29 16:05:02:400 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil) 
2023-08-29 16:05:02:401 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,73:24]
2023-08-29 16:05:02:401 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,73:59].[@-1,41:44='line',<0>,73:63]
2023-08-29 16:05:02:408 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,73:70].[@-1,52:54='pos',<0>,73:74]
2023-08-29 16:05:02:410 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,73:80].[@-1,61:64='text',<0>,73:83]
2023-08-29 16:05:02:411 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,73:90].[@-1,74:75='ty',<0>,73:96]
2023-08-29 16:05:02:418 action-translator LogManager.java:25 translate  $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-08-29 16:05:02:418 action-translator LogManager.java:25 attr [@-1,2:4='asg',<0>,77:18]
2023-08-29 16:05:02:418 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,77:48].[@-1,35:38='line',<0>,77:51]
2023-08-29 16:05:02:419 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,77:58].[@-1,45:47='pos',<0>,77:61]
2023-08-29 16:05:02:419 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,77:67].[@-1,54:57='text',<0>,77:70]
2023-08-29 16:05:02:419 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,77:77].[@-1,66:66='e',<0>,77:82]
2023-08-29 16:05:02:421 action-translator LogManager.java:25 translate  $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); 
2023-08-29 16:05:02:428 action-translator LogManager.java:25 setAttr [@-1,2:4='asg',<0>,78:33] [@-1,7:89=' instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e)',<0>,78:38]
2023-08-29 16:05:02:428 action-translator LogManager.java:25 translate  instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e)
2023-08-29 16:05:02:429 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,78:68].[@-1,40:43='line',<0>,78:71]
2023-08-29 16:05:02:429 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,78:78].[@-1,50:52='pos',<0>,78:81]
2023-08-29 16:05:02:431 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,78:87].[@-1,59:62='text',<0>,78:90]
2023-08-29 16:05:02:432 action-translator LogManager.java:25 qattr [@-1,66:67='op',<0>,78:97].[@-1,69:72='text',<0>,78:100]
2023-08-29 16:05:02:432 action-translator LogManager.java:25 qattr [@-1,76:79='expr',<0>,78:107].[@-1,81:81='e',<0>,78:112]
2023-08-29 16:05:02:443 action-translator LogManager.java:25 translate  $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); 
2023-08-29 16:05:02:450 action-translator LogManager.java:25 setAttr [@-1,2:3='fr',<0>,82:76] [@-1,6:88=' instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk)',<0>,82:80]
2023-08-29 16:05:02:451 action-translator LogManager.java:25 translate  instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk)
2023-08-29 16:05:02:451 action-translator LogManager.java:25 qattr [@-1,24:26='FOR',<0>,82:98].[@-1,28:31='line',<0>,82:102]
2023-08-29 16:05:02:452 action-translator LogManager.java:25 qattr [@-1,35:37='FOR',<0>,82:109].[@-1,39:41='pos',<0>,82:113]
2023-08-29 16:05:02:452 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,82:119].[@-1,48:51='text',<0>,82:122]
2023-08-29 16:05:02:453 action-translator LogManager.java:25 qattr [@-1,55:58='exp1',<0>,82:129].[@-1,60:60='e',<0>,82:134]
2023-08-29 16:05:02:453 action-translator LogManager.java:25 qattr [@-1,64:67='exp2',<0>,82:138].[@-1,69:69='e',<0>,82:143]
2023-08-29 16:05:02:453 action-translator LogManager.java:25 qattr [@-1,73:77='block',<0>,82:147].[@-1,79:81='blk',<0>,82:153]
2023-08-29 16:05:02:456 action-translator LogManager.java:25 translate  $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); 
2023-08-29 16:05:02:459 action-translator LogManager.java:25 setAttr [@-1,2:3='fr',<0>,83:43] [@-1,6:77=' instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk)',<0>,83:47]
2023-08-29 16:05:02:459 action-translator LogManager.java:25 translate  instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk)
2023-08-29 16:05:02:459 action-translator LogManager.java:25 qattr [@-1,22:24='FOR',<0>,83:63].[@-1,26:29='line',<0>,83:67]
2023-08-29 16:05:02:459 action-translator LogManager.java:25 qattr [@-1,33:35='FOR',<0>,83:74].[@-1,37:39='pos',<0>,83:78]
2023-08-29 16:05:02:459 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,83:84].[@-1,46:49='text',<0>,83:87]
2023-08-29 16:05:02:459 action-translator LogManager.java:25 qattr [@-1,53:56='expr',<0>,83:94].[@-1,58:58='e',<0>,83:99]
2023-08-29 16:05:02:461 action-translator LogManager.java:25 qattr [@-1,62:66='block',<0>,83:103].[@-1,68:70='blk',<0>,83:109]
2023-08-29 16:05:02:468 action-translator LogManager.java:25 translate  $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) 
2023-08-29 16:05:02:469 action-translator LogManager.java:25 attr [@-1,2:4='grd',<0>,87:44]
2023-08-29 16:05:02:472 action-translator LogManager.java:25 qattr [@-1,31:35='GUARD',<0>,87:73].[@-1,37:40='line',<0>,87:79]
2023-08-29 16:05:02:473 action-translator LogManager.java:25 qattr [@-1,44:48='GUARD',<0>,87:86].[@-1,50:52='pos',<0>,87:92]
2023-08-29 16:05:02:473 action-translator LogManager.java:25 qattr [@-1,56:59='expr',<0>,87:98].[@-1,61:61='e',<0>,87:103]
2023-08-29 16:05:02:474 action-translator LogManager.java:25 qattr [@-1,65:69='block',<0>,87:107].[@-1,71:73='blk',<0>,87:113]
2023-08-29 16:05:02:478 action-translator LogManager.java:25 translate  $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) 
2023-08-29 16:05:02:478 action-translator LogManager.java:25 attr [@-1,2:4='brk',<0>,111:10]
2023-08-29 16:05:02:478 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,111:39].[@-1,37:40='line',<0>,111:45]
2023-08-29 16:05:02:479 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,111:52].[@-1,50:52='pos',<0>,111:58]
2023-08-29 16:05:02:487 action-translator LogManager.java:25 translate  $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) 
2023-08-29 16:05:02:487 action-translator LogManager.java:25 attr [@-1,2:4='cnt',<0>,115:13]
2023-08-29 16:05:02:487 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,115:45].[@-1,43:46='line',<0>,115:54]
2023-08-29 16:05:02:489 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,115:61].[@-1,59:61='pos',<0>,115:70]
2023-08-29 16:05:02:502 action-translator LogManager.java:25 translate  $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-08-29 16:05:02:503 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,124:39]
2023-08-29 16:05:02:503 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,124:67].[@-1,33:36='line',<0>,124:70]
2023-08-29 16:05:02:503 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,124:77].[@-1,43:45='pos',<0>,124:80]
2023-08-29 16:05:02:504 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,124:86].[@-1,52:55='text',<0>,124:89]
2023-08-29 16:05:02:504 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,124:96].[@-1,64:64='e',<0>,124:101]
2023-08-29 16:05:02:515 action-translator LogManager.java:25 translate  $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-08-29 16:05:02:516 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,125:48]
2023-08-29 16:05:02:517 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,125:78].[@-1,35:38='line',<0>,125:81]
2023-08-29 16:05:02:517 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,125:88].[@-1,45:47='pos',<0>,125:91]
2023-08-29 16:05:02:518 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,125:97].[@-1,54:57='text',<0>,125:100]
2023-08-29 16:05:02:518 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,125:107].[@-1,66:66='e',<0>,125:112]
2023-08-29 16:05:02:519 action-translator LogManager.java:25 translate  $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) 
2023-08-29 16:05:02:519 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,126:38]
2023-08-29 16:05:02:519 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,126:70].[@-1,37:40='line',<0>,126:73]
2023-08-29 16:05:02:522 action-translator LogManager.java:25 qattr [@-1,44:45='ID',<0>,126:80].[@-1,47:49='pos',<0>,126:83]
2023-08-29 16:05:02:522 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,126:89].[@-1,56:59='text',<0>,126:92]
2023-08-29 16:05:02:532 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-08-29 16:05:02:532 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,130:8]
2023-08-29 16:05:02:532 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-08-29 16:05:02:532 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,131:10]
2023-08-29 16:05:02:533 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-08-29 16:05:02:533 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,132:8]
2023-08-29 16:05:02:533 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-08-29 16:05:02:533 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,133:9]
2023-08-29 16:05:02:533 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-08-29 16:05:02:534 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,134:24]
2023-08-29 16:05:02:536 action-translator LogManager.java:25 translate  $ty = environment.STR 
2023-08-29 16:05:02:537 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,135:24]
2023-08-29 16:05:02:537 action-translator LogManager.java:25 translate  $ty = environment.NIL 
2023-08-29 16:05:02:537 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,136:8]
2023-08-29 16:05:02:549 action-translator LogManager.java:25 translate 
2023-08-29 16:05:02:550 action-translator LogManager.java:25 translate $e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)
2023-08-29 16:05:02:550 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,2:65]
2023-08-29 16:05:02:552 action-translator LogManager.java:25 qattr [@-1,31:33='SUB',<0>,2:95].[@-1,35:38='line',<0>,2:99]
2023-08-29 16:05:02:553 action-translator LogManager.java:25 qattr [@-1,41:43='SUB',<0>,2:105].[@-1,45:47='pos',<0>,2:109]
2023-08-29 16:05:02:557 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,2:114].[@-1,55:55='e',<0>,2:119]
2023-08-29 16:05:02:558 action-translator LogManager.java:25 translate  $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) 
2023-08-29 16:05:02:558 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:101]
2023-08-29 16:05:02:559 action-translator LogManager.java:25 qattr [@-1,27:31='types',<0>,3:126].[@-1,33:37='start',<0>,3:132]
2023-08-29 16:05:02:560 action-translator LogManager.java:25 qattr [@-1,51:55='types',<0>,3:150].[@-1,57:61='start',<0>,3:156]
2023-08-29 16:05:02:560 action-translator LogManager.java:25 qattr [@-1,77:81='types',<0>,3:176].[@-1,83:84='ty',<0>,3:182]
2023-08-29 16:05:02:560 action-translator LogManager.java:25 qattr [@-1,88:91='expr',<0>,3:187].[@-1,93:93='e',<0>,3:192]
2023-08-29 16:05:02:561 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-29 16:05:02:561 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:79]
2023-08-29 16:05:02:561 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:84].[@-1,12:12='e',<0>,4:89]
2023-08-29 16:05:02:564 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) 
2023-08-29 16:05:02:565 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:58]
2023-08-29 16:05:02:565 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,5:84].[@-1,35:38='line',<0>,5:91]
2023-08-29 16:05:02:566 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,5:98].[@-1,49:51='pos',<0>,5:105]
2023-08-29 16:05:02:567 action-translator LogManager.java:25 translate  $e = $list.p
2023-08-29 16:05:02:567 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:43]
2023-08-29 16:05:02:568 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,6:48].[@-1,12:12='p',<0>,6:53]
2023-08-29 16:05:02:568 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-08-29 16:05:02:569 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:85]
2023-08-29 16:05:02:569 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,7:111].[@-1,35:38='line',<0>,7:118]
2023-08-29 16:05:02:570 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,7:125].[@-1,49:51='pos',<0>,7:132]
2023-08-29 16:05:02:570 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,7:138].[@-1,66:66='l',<0>,7:149]
2023-08-29 16:05:02:571 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-29 16:05:02:571 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,10:30].[@-1,39:42='text',<0>,10:37]
2023-08-29 16:05:02:572 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,11:43].[@-1,102:105='text',<0>,11:50]
2023-08-29 16:05:02:573 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,15:13]
2023-08-29 16:05:02:573 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,15:43].[@-1,240:243='line',<0>,15:50]
2023-08-29 16:05:02:573 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,15:56].[@-1,253:255='pos',<0>,15:63]
2023-08-29 16:05:02:573 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,17:37].[@-1,341:344='text',<0>,17:44]
2023-08-29 16:05:02:574 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,21:13]
2023-08-29 16:05:02:574 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,21:43].[@-1,474:477='line',<0>,21:50]
2023-08-29 16:05:02:575 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,21:56].[@-1,487:489='pos',<0>,21:63]
2023-08-29 16:05:02:575 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-29 16:05:02:576 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,26:16].[@-1,25:28='text',<0>,26:23]
2023-08-29 16:05:02:576 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,27:9]
2023-08-29 16:05:02:576 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,27:39].[@-1,77:80='line',<0>,27:46]
2023-08-29 16:05:02:577 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,27:53].[@-1,91:93='pos',<0>,27:60]
2023-08-29 16:05:02:577 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-29 16:05:02:578 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,29:32]
2023-08-29 16:05:02:578 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,29:62].[@-1,36:39='line',<0>,29:66]
2023-08-29 16:05:02:578 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,29:73].[@-1,47:49='pos',<0>,29:77]
2023-08-29 16:05:02:579 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-29 16:05:02:580 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:32]
2023-08-29 16:05:02:580 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,30:62].[@-1,36:39='line',<0>,30:66]
2023-08-29 16:05:02:581 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,30:73].[@-1,47:49='pos',<0>,30:77]
2023-08-29 16:05:02:582 action-translator LogManager.java:25 translate  $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) 
2023-08-29 16:05:02:582 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:75]
2023-08-29 16:05:02:582 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,31:101].[@-1,31:34='line',<0>,31:104]
2023-08-29 16:05:02:583 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,31:111].[@-1,41:43='pos',<0>,31:114]
2023-08-29 16:05:02:584 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,31:120].[@-1,50:53='text',<0>,31:123]
2023-08-29 16:05:02:585 action-translator LogManager.java:25 translate  $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) 
2023-08-29 16:05:02:585 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:77]
2023-08-29 16:05:02:587 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,32:105].[@-1,33:36='line',<0>,32:108]
2023-08-29 16:05:02:587 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,32:115].[@-1,43:45='pos',<0>,32:118]
2023-08-29 16:05:02:587 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,32:124].[@-1,52:55='text',<0>,32:127]
2023-08-29 16:05:02:588 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NIL) 
2023-08-29 16:05:02:589 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:32]
2023-08-29 16:05:02:589 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,33:62].[@-1,36:39='line',<0>,33:66]
2023-08-29 16:05:02:589 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,33:73].[@-1,47:49='pos',<0>,33:77]
2023-08-29 16:05:02:591 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-08-29 16:05:02:592 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) 
2023-08-29 16:05:02:592 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:139]
2023-08-29 16:05:02:592 action-translator LogManager.java:25 qattr [@-1,32:33='op',<0>,36:169].[@-1,35:38='line',<0>,36:172]
2023-08-29 16:05:02:592 action-translator LogManager.java:25 qattr [@-1,42:43='op',<0>,36:179].[@-1,45:47='pos',<0>,36:182]
2023-08-29 16:05:02:592 action-translator LogManager.java:25 qattr [@-1,56:57='op',<0>,36:193].[@-1,59:62='text',<0>,36:196]
2023-08-29 16:05:02:594 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,36:203].[@-1,71:71='e',<0>,36:208]
2023-08-29 16:05:02:594 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-08-29 16:05:02:597 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 16:05:02:597 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:169]
2023-08-29 16:05:02:597 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:199].[@-1,37:41='start',<0>,37:204]
2023-08-29 16:05:02:598 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:222].[@-1,60:64='start',<0>,37:227]
2023-08-29 16:05:02:598 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:247].[@-1,85:85='e',<0>,37:252]
2023-08-29 16:05:02:598 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:256].[@-1,92:95='text',<0>,37:259]
2023-08-29 16:05:02:598 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:266].[@-1,105:105='e',<0>,37:272]
2023-08-29 16:05:02:599 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-08-29 16:05:02:600 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 16:05:02:600 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:149]
2023-08-29 16:05:02:600 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:179].[@-1,37:41='start',<0>,38:184]
2023-08-29 16:05:02:600 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:202].[@-1,60:64='start',<0>,38:207]
2023-08-29 16:05:02:600 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:227].[@-1,85:85='e',<0>,38:232]
2023-08-29 16:05:02:601 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:236].[@-1,92:95='text',<0>,38:239]
2023-08-29 16:05:02:601 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:246].[@-1,105:105='e',<0>,38:252]
2023-08-29 16:05:02:601 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-29 16:05:02:602 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 16:05:02:602 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:154]
2023-08-29 16:05:02:602 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:184].[@-1,37:41='start',<0>,39:189]
2023-08-29 16:05:02:602 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:207].[@-1,60:64='start',<0>,39:212]
2023-08-29 16:05:02:602 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:232].[@-1,85:85='e',<0>,39:237]
2023-08-29 16:05:02:602 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:241].[@-1,92:95='text',<0>,39:244]
2023-08-29 16:05:02:602 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:251].[@-1,105:105='e',<0>,39:257]
2023-08-29 16:05:02:604 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-29 16:05:02:607 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 16:05:02:607 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:154]
2023-08-29 16:05:02:607 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:184].[@-1,37:41='start',<0>,40:189]
2023-08-29 16:05:02:607 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:207].[@-1,60:64='start',<0>,40:212]
2023-08-29 16:05:02:607 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:232].[@-1,85:85='e',<0>,40:237]
2023-08-29 16:05:02:607 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:241].[@-1,92:95='text',<0>,40:244]
2023-08-29 16:05:02:610 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:251].[@-1,105:105='e',<0>,40:257]
2023-08-29 16:05:02:610 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-29 16:05:02:611 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 16:05:02:611 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:151]
2023-08-29 16:05:02:612 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:181].[@-1,37:41='start',<0>,41:186]
2023-08-29 16:05:02:612 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:204].[@-1,60:64='start',<0>,41:209]
2023-08-29 16:05:02:612 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:229].[@-1,85:85='e',<0>,41:234]
2023-08-29 16:05:02:612 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:238].[@-1,92:95='text',<0>,41:241]
2023-08-29 16:05:02:612 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:248].[@-1,105:105='e',<0>,41:254]
2023-08-29 16:05:02:614 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-29 16:05:02:615 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 16:05:02:616 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,42:127]
2023-08-29 16:05:02:616 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,42:157].[@-1,37:41='start',<0>,42:162]
2023-08-29 16:05:02:617 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,42:180].[@-1,60:64='start',<0>,42:185]
2023-08-29 16:05:02:617 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,42:205].[@-1,85:85='e',<0>,42:210]
2023-08-29 16:05:02:617 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,42:214].[@-1,92:95='text',<0>,42:217]
2023-08-29 16:05:02:617 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,42:224].[@-1,105:105='e',<0>,42:230]
2023-08-29 16:05:02:618 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-29 16:05:02:618 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 16:05:02:619 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,43:126]
2023-08-29 16:05:02:619 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,43:156].[@-1,37:41='start',<0>,43:161]
2023-08-29 16:05:02:619 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,43:179].[@-1,60:64='start',<0>,43:184]
2023-08-29 16:05:02:619 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,43:204].[@-1,85:85='e',<0>,43:209]
2023-08-29 16:05:02:620 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,43:213].[@-1,92:95='text',<0>,43:216]
2023-08-29 16:05:02:620 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,43:223].[@-1,105:105='e',<0>,43:229]
2023-08-29 16:05:02:620 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-29 16:05:02:621 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 16:05:02:621 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,44:128]
2023-08-29 16:05:02:621 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,44:158].[@-1,37:41='start',<0>,44:163]
2023-08-29 16:05:02:622 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,44:181].[@-1,60:64='start',<0>,44:186]
2023-08-29 16:05:02:622 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,44:206].[@-1,85:85='e',<0>,44:211]
2023-08-29 16:05:02:622 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,44:215].[@-1,92:95='text',<0>,44:218]
2023-08-29 16:05:02:622 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,44:225].[@-1,105:105='e',<0>,44:231]
2023-08-29 16:05:02:627 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-08-29 16:05:02:627 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-08-29 16:05:02:627 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-08-29 16:05:02:627 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-29 16:05:02:627 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-29 16:05:02:627 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-29 16:05:02:627 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-29 16:05:02:627 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-29 16:05:02:628 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-29 16:05:02:631 action-translator LogManager.java:25 translate 
2023-08-29 16:05:02:632 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-08-29 16:05:02:632 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-08-29 16:05:02:632 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-08-29 16:05:02:633 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-08-29 16:05:02:633 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-08-29 16:05:02:633 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 16:05:02:634 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-08-29 16:05:02:635 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-08-29 16:05:02:635 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-08-29 16:05:02:636 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-08-29 16:05:02:637 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 16:05:02:638 action-translator LogManager.java:25 translate 
2023-08-29 16:05:02:639 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-08-29 16:05:02:639 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-08-29 16:05:02:640 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:62].[@-1,33:36='line',<0>,2:65]
2023-08-29 16:05:02:640 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:72].[@-1,43:45='pos',<0>,2:75]
2023-08-29 16:05:02:640 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:81].[@-1,52:55='text',<0>,2:84]
2023-08-29 16:05:02:641 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 16:05:02:642 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-08-29 16:05:02:642 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:149]
2023-08-29 16:05:02:642 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:181].[@-1,39:43='start',<0>,5:186]
2023-08-29 16:05:02:648 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:204].[@-1,62:66='start',<0>,5:209]
2023-08-29 16:05:02:648 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:229].[@-1,87:87='p',<0>,5:234]
2023-08-29 16:05:02:648 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:238].[@-1,96:96='e',<0>,5:243]
2023-08-29 16:05:02:650 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 16:05:04:875 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-29 16:05:04:876 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-29 16:05:05:287 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-29 16:05:05:287 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

