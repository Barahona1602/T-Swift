2023-09-04 12:05:15:589 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMILLA (BLOCK (ALT '"'))) (RULE FLECHA (BLOCK (ALT '->'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-04 12:05:15:677 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMILLA (BLOCK (ALT '"'))) (RULE FLECHA (BLOCK (ALT '->'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-04 12:05:17:522 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }) (ALT returnstmt { $inst = $returnstmt.ret }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}) (ALT PRINT PARIZQ exprComa PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) }) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }) (ALT listArray IG expr))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE returnstmt (returns interfaces.Instruction ret) (BLOCK (ALT RETURN expr { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) }) (ALT RETURN { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (= left expr) (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= right expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) types IG CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (= left exprComa) (= op COMA) (= right expr) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }) (ALT expr { $t = $expr.e })))))
2023-09-04 12:05:17:650 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }) (ALT returnstmt { $inst = $returnstmt.ret }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}) (ALT PRINT PARIZQ exprComa PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) }) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUB_IG SUM_IG)) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }) (ALT listArray IG expr))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE returnstmt (returns interfaces.Instruction ret) (BLOCK (ALT RETURN expr { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) }) (ALT RETURN { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= right expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) types IG CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (= left exprComa) (= op COMA) (= right expr) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }) (ALT expr { $t = $expr.e })))))
2023-09-04 12:05:17:693 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }) (ALT returnstmt { $inst = $returnstmt.ret }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}) (ALT PRINT PARIZQ exprComa PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) }) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUB_IG SUM_IG)) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }) (ALT listArray IG expr))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE returnstmt (returns interfaces.Instruction ret) (BLOCK (ALT RETURN expr { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) }) (ALT RETURN { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= right expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) types IG CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (= left exprComa) (= op COMA) (= right expr) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }) (ALT expr { $t = $expr.e })))))
2023-09-04 12:05:17:693 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-09-04 12:05:17:912 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} SUB<tokenIndex=684> opDe=expr<tokenIndex=688,p=22> {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)} 
        | types<tokenIndex=694> PARIZQ<tokenIndex=696> expr<tokenIndex=698> PARDER<tokenIndex=700> { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) } 
        | NOT<tokenIndex=858> right=expr<tokenIndex=862,p=12> {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)} 
        | PARIZQ<tokenIndex=868> expr<tokenIndex=870> PARDER<tokenIndex=872> { $e = $expr.e } 
        | CORIZQ<tokenIndex=878> CORDER<tokenIndex=880> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) } 
        | list=listArray<tokenIndex=888> { $e = $list.p} 
        | CORIZQ<tokenIndex=894> listParams<tokenIndex=896> CORDER<tokenIndex=898> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=904>
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=910>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=916> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=922> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | ID<tokenIndex=928> PUNTO<tokenIndex=930> COUNT<tokenIndex=932> { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) } 
        | ID<tokenIndex=938> PUNTO<tokenIndex=940> ISEMPTY<tokenIndex=942> { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) } 
        | NIL<tokenIndex=948> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=(SUB_IG<tokenIndex=713>|SUM_IG<tokenIndex=715>) expr<tokenIndex=718,p=21> { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MUL<tokenIndex=731>|DIV<tokenIndex=733>|MOD<tokenIndex=735>) right=expr<tokenIndex=740,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(ADD<tokenIndex=753>|SUB<tokenIndex=755>) right=expr<tokenIndex=760,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MAY_IG<tokenIndex=773>|MAYOR<tokenIndex=775>) right=expr<tokenIndex=780,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MEN_IG<tokenIndex=793>|MENOR<tokenIndex=795>) right=expr<tokenIndex=800,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(IG_IG<tokenIndex=813>|DIF<tokenIndex=815>) right=expr<tokenIndex=820,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=AND<tokenIndex=832> right=expr<tokenIndex=836,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=OR<tokenIndex=848> right=expr<tokenIndex=852,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-09-04 12:05:18:093 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (SUB (ELEMENT_OPTIONS (= tokenIndex 684))) (= opDe (expr (ELEMENT_OPTIONS (= tokenIndex 688) (= p 22)))) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (types (ELEMENT_OPTIONS (= tokenIndex 694))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 696))) (expr (ELEMENT_OPTIONS (= tokenIndex 698))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 700))) { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 858))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 862) (= p 12)))) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 868))) (expr (ELEMENT_OPTIONS (= tokenIndex 870))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 872))) { $e = $expr.e }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 878))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 880))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 888)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 894))) (listParams (ELEMENT_OPTIONS (= tokenIndex 896))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 898))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 904))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 910))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 916))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 922))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 928))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 930))) (COUNT (ELEMENT_OPTIONS (= tokenIndex 932))) { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 938))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 940))) (ISEMPTY (ELEMENT_OPTIONS (= tokenIndex 942))) { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 948))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (SET (SUB_IG (ELEMENT_OPTIONS (= tokenIndex 713))) (SUM_IG (ELEMENT_OPTIONS (= tokenIndex 715))))) (expr (ELEMENT_OPTIONS (= tokenIndex 718) (= p 21))) { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 731))) (DIV (ELEMENT_OPTIONS (= tokenIndex 733))) (MOD (ELEMENT_OPTIONS (= tokenIndex 735))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 740) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 753))) (SUB (ELEMENT_OPTIONS (= tokenIndex 755))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 760) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 773))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 775))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 780) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 793))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 795))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 800) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 813))) (DIF (ELEMENT_OPTIONS (= tokenIndex 815))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 820) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 832)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 836) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 848)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 852) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-09-04 12:05:18:099 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=973> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=965> expr<tokenIndex=967> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-09-04 12:05:18:222 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 973))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 965))) (expr (ELEMENT_OPTIONS (= tokenIndex 967))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-09-04 12:05:18:223 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=1022> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> CORIZQ<tokenIndex=992> expr<tokenIndex=994> CORDER<tokenIndex=996> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> types<tokenIndex=1008> IG<tokenIndex=1010> CORIZQ<tokenIndex=1012> expr<tokenIndex=1014> CORDER<tokenIndex=1016> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-09-04 12:05:18:231 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1022))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 992))) (expr (ELEMENT_OPTIONS (= tokenIndex 994))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 996))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (types (ELEMENT_OPTIONS (= tokenIndex 1008))) (IG (ELEMENT_OPTIONS (= tokenIndex 1010))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1012))) (expr (ELEMENT_OPTIONS (= tokenIndex 1014))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1016))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-09-04 12:05:18:233 left-recursion LogManager.java:25 exprComa returns [interfaces.Expression t]
    :   ( {} expr<tokenIndex=1051> { $t = $expr.e } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> op=COMA<tokenIndex=1041> right=expr<tokenIndex=1045> { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }
        )*
    ;
2023-09-04 12:05:18:239 grammar LogManager.java:25 added: (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1051))) { $t = $expr.e })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (= op (COMA (ELEMENT_OPTIONS (= tokenIndex 1041)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1045)))) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }))))))
2023-09-04 12:05:18:312 grammar LogManager.java:25 import INT=1
2023-09-04 12:05:18:313 grammar LogManager.java:25 import FLOAT=2
2023-09-04 12:05:18:314 grammar LogManager.java:25 import BOOL=3
2023-09-04 12:05:18:314 grammar LogManager.java:25 import STR=4
2023-09-04 12:05:18:314 grammar LogManager.java:25 import CHAR=5
2023-09-04 12:05:18:314 grammar LogManager.java:25 import VAR=6
2023-09-04 12:05:18:314 grammar LogManager.java:25 import LET=7
2023-09-04 12:05:18:314 grammar LogManager.java:25 import VOID=8
2023-09-04 12:05:18:315 grammar LogManager.java:25 import TRU=9
2023-09-04 12:05:18:315 grammar LogManager.java:25 import FAL=10
2023-09-04 12:05:18:315 grammar LogManager.java:25 import PRINT=11
2023-09-04 12:05:18:315 grammar LogManager.java:25 import IF=12
2023-09-04 12:05:18:315 grammar LogManager.java:25 import ELSE=13
2023-09-04 12:05:18:316 grammar LogManager.java:25 import WHILE=14
2023-09-04 12:05:18:316 grammar LogManager.java:25 import FOR=15
2023-09-04 12:05:18:316 grammar LogManager.java:25 import IN=16
2023-09-04 12:05:18:316 grammar LogManager.java:25 import SWITCH=17
2023-09-04 12:05:18:317 grammar LogManager.java:25 import CASE=18
2023-09-04 12:05:18:317 grammar LogManager.java:25 import DEFAULT=19
2023-09-04 12:05:18:318 grammar LogManager.java:25 import BREAK=20
2023-09-04 12:05:18:318 grammar LogManager.java:25 import RETURN=21
2023-09-04 12:05:18:318 grammar LogManager.java:25 import CONTINUE=22
2023-09-04 12:05:18:319 grammar LogManager.java:25 import GUARD=23
2023-09-04 12:05:18:319 grammar LogManager.java:25 import FUNC=24
2023-09-04 12:05:18:319 grammar LogManager.java:25 import NIL=25
2023-09-04 12:05:18:319 grammar LogManager.java:25 import STRUCT=26
2023-09-04 12:05:18:319 grammar LogManager.java:25 import MUTATING=27
2023-09-04 12:05:18:319 grammar LogManager.java:25 import SELF=28
2023-09-04 12:05:18:320 grammar LogManager.java:25 import INOUT=29
2023-09-04 12:05:18:320 grammar LogManager.java:25 import APPEND=30
2023-09-04 12:05:18:322 grammar LogManager.java:25 import REMOVELAST=31
2023-09-04 12:05:18:322 grammar LogManager.java:25 import REMOVE=32
2023-09-04 12:05:18:322 grammar LogManager.java:25 import AT=33
2023-09-04 12:05:18:322 grammar LogManager.java:25 import ISEMPTY=34
2023-09-04 12:05:18:322 grammar LogManager.java:25 import COUNT=35
2023-09-04 12:05:18:323 grammar LogManager.java:25 import NUMBER=36
2023-09-04 12:05:18:323 grammar LogManager.java:25 import STRING=37
2023-09-04 12:05:18:323 grammar LogManager.java:25 import ID=38
2023-09-04 12:05:18:324 grammar LogManager.java:25 import DIF=39
2023-09-04 12:05:18:325 grammar LogManager.java:25 import IG_IG=40
2023-09-04 12:05:18:326 grammar LogManager.java:25 import NOT=41
2023-09-04 12:05:18:326 grammar LogManager.java:25 import OR=42
2023-09-04 12:05:18:326 grammar LogManager.java:25 import AND=43
2023-09-04 12:05:18:326 grammar LogManager.java:25 import IG=44
2023-09-04 12:05:18:326 grammar LogManager.java:25 import MAY_IG=45
2023-09-04 12:05:18:326 grammar LogManager.java:25 import MEN_IG=46
2023-09-04 12:05:18:327 grammar LogManager.java:25 import SUM_IG=47
2023-09-04 12:05:18:327 grammar LogManager.java:25 import SUB_IG=48
2023-09-04 12:05:18:327 grammar LogManager.java:25 import MAYOR=49
2023-09-04 12:05:18:327 grammar LogManager.java:25 import MENOR=50
2023-09-04 12:05:18:327 grammar LogManager.java:25 import MUL=51
2023-09-04 12:05:18:327 grammar LogManager.java:25 import DIV=52
2023-09-04 12:05:18:327 grammar LogManager.java:25 import ADD=53
2023-09-04 12:05:18:327 grammar LogManager.java:25 import SUB=54
2023-09-04 12:05:18:327 grammar LogManager.java:25 import MOD=55
2023-09-04 12:05:18:327 grammar LogManager.java:25 import PARIZQ=56
2023-09-04 12:05:18:328 grammar LogManager.java:25 import PARDER=57
2023-09-04 12:05:18:328 grammar LogManager.java:25 import LLAVEIZQ=58
2023-09-04 12:05:18:328 grammar LogManager.java:25 import LLAVEDER=59
2023-09-04 12:05:18:328 grammar LogManager.java:25 import D_PTS=60
2023-09-04 12:05:18:328 grammar LogManager.java:25 import CORIZQ=61
2023-09-04 12:05:18:328 grammar LogManager.java:25 import CORDER=62
2023-09-04 12:05:18:328 grammar LogManager.java:25 import COMA=63
2023-09-04 12:05:18:328 grammar LogManager.java:25 import PUNTO=64
2023-09-04 12:05:18:328 grammar LogManager.java:25 import COMILLA=65
2023-09-04 12:05:18:328 grammar LogManager.java:25 import FLECHA=66
2023-09-04 12:05:18:328 grammar LogManager.java:25 import WHITESPACE=67
2023-09-04 12:05:18:328 grammar LogManager.java:25 import COMMENT=68
2023-09-04 12:05:18:329 grammar LogManager.java:25 import LINE_COMMENT=69
2023-09-04 12:05:18:329 grammar LogManager.java:25 import 'Int'=1
2023-09-04 12:05:18:329 grammar LogManager.java:25 import 'Float'=2
2023-09-04 12:05:18:329 grammar LogManager.java:25 import 'Bool'=3
2023-09-04 12:05:18:329 grammar LogManager.java:25 import 'String'=4
2023-09-04 12:05:18:329 grammar LogManager.java:25 import 'Character'=5
2023-09-04 12:05:18:329 grammar LogManager.java:25 import 'var'=6
2023-09-04 12:05:18:329 grammar LogManager.java:25 import 'let'=7
2023-09-04 12:05:18:329 grammar LogManager.java:25 import 'void'=8
2023-09-04 12:05:18:329 grammar LogManager.java:25 import 'true'=9
2023-09-04 12:05:18:329 grammar LogManager.java:25 import 'false'=10
2023-09-04 12:05:18:329 grammar LogManager.java:25 import 'print'=11
2023-09-04 12:05:18:329 grammar LogManager.java:25 import 'if'=12
2023-09-04 12:05:18:330 grammar LogManager.java:25 import 'else'=13
2023-09-04 12:05:18:330 grammar LogManager.java:25 import 'while'=14
2023-09-04 12:05:18:330 grammar LogManager.java:25 import 'for'=15
2023-09-04 12:05:18:330 grammar LogManager.java:25 import 'in'=16
2023-09-04 12:05:18:330 grammar LogManager.java:25 import 'switch'=17
2023-09-04 12:05:18:330 grammar LogManager.java:25 import 'case'=18
2023-09-04 12:05:18:330 grammar LogManager.java:25 import 'default'=19
2023-09-04 12:05:18:330 grammar LogManager.java:25 import 'break'=20
2023-09-04 12:05:18:330 grammar LogManager.java:25 import 'return'=21
2023-09-04 12:05:18:330 grammar LogManager.java:25 import 'continue'=22
2023-09-04 12:05:18:330 grammar LogManager.java:25 import 'guard'=23
2023-09-04 12:05:18:330 grammar LogManager.java:25 import 'func'=24
2023-09-04 12:05:18:330 grammar LogManager.java:25 import 'nil'=25
2023-09-04 12:05:18:331 grammar LogManager.java:25 import 'struct'=26
2023-09-04 12:05:18:331 grammar LogManager.java:25 import 'mutating'=27
2023-09-04 12:05:18:331 grammar LogManager.java:25 import 'self'=28
2023-09-04 12:05:18:331 grammar LogManager.java:25 import 'inout'=29
2023-09-04 12:05:18:331 grammar LogManager.java:25 import 'append'=30
2023-09-04 12:05:18:331 grammar LogManager.java:25 import 'removeLast'=31
2023-09-04 12:05:18:331 grammar LogManager.java:25 import 'remove'=32
2023-09-04 12:05:18:331 grammar LogManager.java:25 import 'at'=33
2023-09-04 12:05:18:331 grammar LogManager.java:25 import 'isEmpty'=34
2023-09-04 12:05:18:331 grammar LogManager.java:25 import 'count'=35
2023-09-04 12:05:18:331 grammar LogManager.java:25 import '!='=39
2023-09-04 12:05:18:331 grammar LogManager.java:25 import '=='=40
2023-09-04 12:05:18:331 grammar LogManager.java:25 import '!'=41
2023-09-04 12:05:18:331 grammar LogManager.java:25 import '||'=42
2023-09-04 12:05:18:331 grammar LogManager.java:25 import '&&'=43
2023-09-04 12:05:18:332 grammar LogManager.java:25 import '='=44
2023-09-04 12:05:18:332 grammar LogManager.java:25 import '>='=45
2023-09-04 12:05:18:332 grammar LogManager.java:25 import '<='=46
2023-09-04 12:05:18:332 grammar LogManager.java:25 import '+='=47
2023-09-04 12:05:18:332 grammar LogManager.java:25 import '-='=48
2023-09-04 12:05:18:332 grammar LogManager.java:25 import '>'=49
2023-09-04 12:05:18:332 grammar LogManager.java:25 import '<'=50
2023-09-04 12:05:18:332 grammar LogManager.java:25 import '*'=51
2023-09-04 12:05:18:332 grammar LogManager.java:25 import '/'=52
2023-09-04 12:05:18:332 grammar LogManager.java:25 import '+'=53
2023-09-04 12:05:18:333 grammar LogManager.java:25 import '-'=54
2023-09-04 12:05:18:333 grammar LogManager.java:25 import '%'=55
2023-09-04 12:05:18:349 grammar LogManager.java:25 import '('=56
2023-09-04 12:05:18:350 grammar LogManager.java:25 import ')'=57
2023-09-04 12:05:18:350 grammar LogManager.java:25 import '{'=58
2023-09-04 12:05:18:350 grammar LogManager.java:25 import '}'=59
2023-09-04 12:05:18:350 grammar LogManager.java:25 import ':'=60
2023-09-04 12:05:18:350 grammar LogManager.java:25 import '['=61
2023-09-04 12:05:18:353 grammar LogManager.java:25 import ']'=62
2023-09-04 12:05:18:353 grammar LogManager.java:25 import ','=63
2023-09-04 12:05:18:353 grammar LogManager.java:25 import '.'=64
2023-09-04 12:05:18:353 grammar LogManager.java:25 import '"'=65
2023-09-04 12:05:18:353 grammar LogManager.java:25 import '->'=66
2023-09-04 12:05:18:363 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO=64, COMILLA=65, FLECHA=66, WHITESPACE=67, COMMENT=68, LINE_COMMENT=69, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, '.'=64, '"'=65, '->'=66}
2023-09-04 12:05:18:369 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO=64, COMILLA=65, FLECHA=66, WHITESPACE=67, COMMENT=68, LINE_COMMENT=69}
2023-09-04 12:05:18:369 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, '.'=64, '"'=65, '->'=66}
2023-09-04 12:05:18:622 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-04 12:05:18:632 LL1 LogManager.java:25 look=[{6..7, 11..12, 14..15, 20..23, 38}, {<EOF>, 59}]
2023-09-04 12:05:18:633 LL1 LogManager.java:25 LL(1)? true
2023-09-04 12:05:18:634 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-09-04 12:05:18:636 LL1 LogManager.java:25 look=[11, 12, {6..7}, 14, 38, 15, 23, 20, 22, 38, 21]
2023-09-04 12:05:18:637 LL1 LogManager.java:25 LL(1)? false
2023-09-04 12:05:18:637 LL1 LogManager.java:25 
DECISION 2 in rule printstmt
2023-09-04 12:05:18:637 LL1 LogManager.java:25 look=[11, 11]
2023-09-04 12:05:18:638 LL1 LogManager.java:25 LL(1)? false
2023-09-04 12:05:18:640 LL1 LogManager.java:25 
DECISION 3 in rule ifstmt
2023-09-04 12:05:18:641 LL1 LogManager.java:25 look=[12, 12, 12]
2023-09-04 12:05:18:641 LL1 LogManager.java:25 LL(1)? false
2023-09-04 12:05:18:641 LL1 LogManager.java:25 
DECISION 4 in rule declarationstmt
2023-09-04 12:05:18:641 LL1 LogManager.java:25 look=[6, 6, 6, 7, 7, 7]
2023-09-04 12:05:18:641 LL1 LogManager.java:25 LL(1)? false
2023-09-04 12:05:18:641 LL1 LogManager.java:25 
DECISION 5 in rule assignstmt
2023-09-04 12:05:18:641 LL1 LogManager.java:25 look=[38, 38, 38]
2023-09-04 12:05:18:641 LL1 LogManager.java:25 LL(1)? false
2023-09-04 12:05:18:642 LL1 LogManager.java:25 
DECISION 6 in rule forstmt
2023-09-04 12:05:18:642 LL1 LogManager.java:25 look=[15, 15]
2023-09-04 12:05:18:642 LL1 LogManager.java:25 LL(1)? false
2023-09-04 12:05:18:642 LL1 LogManager.java:25 
DECISION 7 in rule returnstmt
2023-09-04 12:05:18:642 LL1 LogManager.java:25 look=[21, 21]
2023-09-04 12:05:18:642 LL1 LogManager.java:25 LL(1)? false
2023-09-04 12:05:18:642 LL1 LogManager.java:25 
DECISION 8 in rule fnArray
2023-09-04 12:05:18:642 LL1 LogManager.java:25 look=[38, 38, 38]
2023-09-04 12:05:18:642 LL1 LogManager.java:25 LL(1)? false
2023-09-04 12:05:18:642 LL1 LogManager.java:25 
DECISION 9 in rule types
2023-09-04 12:05:18:642 LL1 LogManager.java:25 look=[1, 2, 4, 3, 61, 65, 25]
2023-09-04 12:05:18:642 LL1 LogManager.java:25 LL(1)? true
2023-09-04 12:05:18:642 LL1 LogManager.java:25 
DECISION 10 in rule expr
2023-09-04 12:05:18:643 LL1 LogManager.java:25 look=[54, {1..4, 25, 61, 65}, 41, 56, 61, 38, 61, 36, 37, 9, 10, 38, 38, 25]
2023-09-04 12:05:18:643 LL1 LogManager.java:25 LL(1)? false
2023-09-04 12:05:18:643 LL1 LogManager.java:25 
DECISION 11 in rule expr
2023-09-04 12:05:18:643 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null]
2023-09-04 12:05:18:643 LL1 LogManager.java:25 LL(1)? false
2023-09-04 12:05:18:643 LL1 LogManager.java:25 
DECISION 12 in rule expr
2023-09-04 12:05:18:650 LL1 LogManager.java:25 look=[null, null]
2023-09-04 12:05:18:650 LL1 LogManager.java:25 LL(1)? false
2023-09-04 12:05:18:650 LL1 LogManager.java:25 
DECISION 13 in rule listParams
2023-09-04 12:05:18:650 LL1 LogManager.java:25 look=[null, 62]
2023-09-04 12:05:18:650 LL1 LogManager.java:25 LL(1)? false
2023-09-04 12:05:18:650 LL1 LogManager.java:25 
DECISION 14 in rule listArray
2023-09-04 12:05:18:650 LL1 LogManager.java:25 look=[null, null]
2023-09-04 12:05:18:650 LL1 LogManager.java:25 LL(1)? false
2023-09-04 12:05:18:651 LL1 LogManager.java:25 
DECISION 15 in rule listArray
2023-09-04 12:05:18:651 LL1 LogManager.java:25 look=[null, null]
2023-09-04 12:05:18:651 LL1 LogManager.java:25 LL(1)? false
2023-09-04 12:05:18:652 LL1 LogManager.java:25 
DECISION 16 in rule exprComa
2023-09-04 12:05:18:652 LL1 LogManager.java:25 look=[null, 57]
2023-09-04 12:05:18:652 LL1 LogManager.java:25 LL(1)? false
2023-09-04 12:05:18:708 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-04 12:05:18:810 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-09-04 12:05:18:811 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-09-04 12:05:18:819 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-09-04 12:05:18:831 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-09-04 12:05:18:831 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-09-04 12:05:18:841 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-09-04 12:05:18:842 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,33:13]
2023-09-04 12:05:18:843 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,33:27]
2023-09-04 12:05:18:853 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-09-04 12:05:18:853 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:14]
2023-09-04 12:05:18:853 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,40:22].[@-1,20:23='prnt',<0>,40:32]
2023-09-04 12:05:18:854 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-09-04 12:05:18:854 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:11]
2023-09-04 12:05:18:857 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,41:19].[@-1,17:22='ifinst',<0>,41:26]
2023-09-04 12:05:18:859 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-09-04 12:05:18:859 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:20]
2023-09-04 12:05:18:859 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,42:28].[@-1,26:28='dec',<0>,42:44]
2023-09-04 12:05:18:872 action-translator LogManager.java:25 translate  $inst = $whilestmt.whl 
2023-09-04 12:05:18:873 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-09-04 12:05:18:883 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:22='whl',<0>,43:32]
2023-09-04 12:05:18:884 action-translator LogManager.java:25 translate  $inst = $assignstmt.asg 
2023-09-04 12:05:18:884 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:15]
2023-09-04 12:05:18:898 action-translator LogManager.java:25 qattr [@-1,10:19='assignstmt',<0>,44:23].[@-1,21:23='asg',<0>,44:34]
2023-09-04 12:05:18:899 action-translator LogManager.java:25 translate  $inst = $forstmt.fr 
2023-09-04 12:05:18:900 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:12]
2023-09-04 12:05:18:900 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,45:20].[@-1,18:19='fr',<0>,45:28]
2023-09-04 12:05:18:901 action-translator LogManager.java:25 translate  $inst = $guardstmt.grd 
2023-09-04 12:05:18:901 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:14]
2023-09-04 12:05:18:901 action-translator LogManager.java:25 qattr [@-1,10:18='guardstmt',<0>,46:22].[@-1,20:22='grd',<0>,46:32]
2023-09-04 12:05:18:902 action-translator LogManager.java:25 translate  $inst = $breakstmt.brk 
2023-09-04 12:05:18:902 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:14]
2023-09-04 12:05:18:902 action-translator LogManager.java:25 qattr [@-1,10:18='breakstmt',<0>,47:22].[@-1,20:22='brk',<0>,47:32]
2023-09-04 12:05:18:903 action-translator LogManager.java:25 translate  $inst = $continuestmt.cnt 
2023-09-04 12:05:18:903 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:17]
2023-09-04 12:05:18:903 action-translator LogManager.java:25 qattr [@-1,10:21='continuestmt',<0>,48:25].[@-1,23:25='cnt',<0>,48:38]
2023-09-04 12:05:18:906 action-translator LogManager.java:25 translate  $inst = $fnArray.p 
2023-09-04 12:05:18:906 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,49:12]
2023-09-04 12:05:18:907 action-translator LogManager.java:25 qattr [@-1,10:16='fnArray',<0>,49:20].[@-1,18:18='p',<0>,49:28]
2023-09-04 12:05:18:910 action-translator LogManager.java:25 translate  $inst = $returnstmt.ret 
2023-09-04 12:05:18:910 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,51:15]
2023-09-04 12:05:18:911 action-translator LogManager.java:25 qattr [@-1,10:19='returnstmt',<0>,51:23].[@-1,21:23='ret',<0>,51:34]
2023-09-04 12:05:18:914 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-09-04 12:05:18:916 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,55:29]
2023-09-04 12:05:18:917 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,55:59].[@-1,38:41='line',<0>,55:65]
2023-09-04 12:05:18:922 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,55:71].[@-1,50:52='pos',<0>,55:77]
2023-09-04 12:05:18:923 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,55:82].[@-1,60:60='e',<0>,55:87]
2023-09-04 12:05:18:924 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)
2023-09-04 12:05:18:924 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,56:33]
2023-09-04 12:05:18:924 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,56:63].[@-1,38:41='line',<0>,56:69]
2023-09-04 12:05:18:924 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,56:75].[@-1,50:52='pos',<0>,56:81]
2023-09-04 12:05:18:926 action-translator LogManager.java:25 qattr [@-1,55:62='exprComa',<0>,56:86].[@-1,64:64='t',<0>,56:95]
2023-09-04 12:05:18:933 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-09-04 12:05:18:933 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,60:40]
2023-09-04 12:05:18:934 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,60:69].[@-1,34:37='line',<0>,60:72]
2023-09-04 12:05:18:934 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,60:79].[@-1,44:46='pos',<0>,60:82]
2023-09-04 12:05:18:934 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,60:88].[@-1,55:55='e',<0>,60:93]
2023-09-04 12:05:18:934 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,60:97].[@-1,65:67='blk',<0>,60:103]
2023-09-04 12:05:18:937 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) 
2023-09-04 12:05:18:937 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,61:75]
2023-09-04 12:05:18:939 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,61:104].[@-1,34:37='line',<0>,61:107]
2023-09-04 12:05:18:939 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,61:114].[@-1,44:46='pos',<0>,61:117]
2023-09-04 12:05:18:939 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,61:123].[@-1,55:55='e',<0>,61:128]
2023-09-04 12:05:18:940 action-translator LogManager.java:25 qattr [@-1,59:60='e1',<0>,61:132].[@-1,62:64='blk',<0>,61:135]
2023-09-04 12:05:18:940 action-translator LogManager.java:25 qattr [@-1,68:69='e2',<0>,61:141].[@-1,71:73='blk',<0>,61:144]
2023-09-04 12:05:18:942 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) 
2023-09-04 12:05:18:943 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,62:52]
2023-09-04 12:05:18:943 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,62:81].[@-1,34:37='line',<0>,62:84]
2023-09-04 12:05:18:943 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,62:91].[@-1,44:46='pos',<0>,62:94]
2023-09-04 12:05:18:944 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,62:100].[@-1,55:55='e',<0>,62:105]
2023-09-04 12:05:18:945 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,62:109].[@-1,65:67='blk',<0>,62:115]
2023-09-04 12:05:18:946 action-translator LogManager.java:25 qattr [@-1,85:90='ifstmt',<0>,62:135].[@-1,92:97='ifinst',<0>,62:142]
2023-09-04 12:05:18:949 action-translator LogManager.java:25 translate  $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-09-04 12:05:18:949 action-translator LogManager.java:25 attr [@-1,2:4='whl',<0>,66:43]
2023-09-04 12:05:18:949 action-translator LogManager.java:25 qattr [@-1,31:35='WHILE',<0>,66:72].[@-1,37:40='line',<0>,66:78]
2023-09-04 12:05:18:950 action-translator LogManager.java:25 qattr [@-1,44:48='WHILE',<0>,66:85].[@-1,50:52='pos',<0>,66:91]
2023-09-04 12:05:18:950 action-translator LogManager.java:25 qattr [@-1,56:59='expr',<0>,66:97].[@-1,61:61='e',<0>,66:102]
2023-09-04 12:05:18:950 action-translator LogManager.java:25 qattr [@-1,65:69='block',<0>,66:106].[@-1,71:73='blk',<0>,66:112]
2023-09-04 12:05:18:956 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) 
2023-09-04 12:05:18:957 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,70:32]
2023-09-04 12:05:18:957 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,70:67].[@-1,41:44='line',<0>,70:71]
2023-09-04 12:05:18:958 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,70:78].[@-1,52:54='pos',<0>,70:82]
2023-09-04 12:05:18:959 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,70:88].[@-1,61:64='text',<0>,70:91]
2023-09-04 12:05:18:960 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,70:98].[@-1,74:75='ty',<0>,70:104]
2023-09-04 12:05:18:961 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,70:109].[@-1,84:84='e',<0>,70:114]
2023-09-04 12:05:18:962 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) 
2023-09-04 12:05:18:963 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,71:19]
2023-09-04 12:05:18:963 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,71:54].[@-1,41:44='line',<0>,71:58]
2023-09-04 12:05:18:963 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,71:65].[@-1,52:54='pos',<0>,71:69]
2023-09-04 12:05:18:966 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,71:75].[@-1,61:64='text',<0>,71:78]
2023-09-04 12:05:18:966 action-translator LogManager.java:25 qattr [@-1,89:92='expr',<0>,71:106].[@-1,94:94='e',<0>,71:111]
2023-09-04 12:05:18:968 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) 
2023-09-04 12:05:18:968 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,72:24]
2023-09-04 12:05:18:969 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,72:59].[@-1,41:44='line',<0>,72:63]
2023-09-04 12:05:18:970 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,72:70].[@-1,52:54='pos',<0>,72:74]
2023-09-04 12:05:18:970 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,72:80].[@-1,61:64='text',<0>,72:83]
2023-09-04 12:05:18:970 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,72:90].[@-1,74:75='ty',<0>,72:96]
2023-09-04 12:05:18:978 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) 
2023-09-04 12:05:18:978 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,73:32]
2023-09-04 12:05:18:978 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,73:67].[@-1,41:44='line',<0>,73:71]
2023-09-04 12:05:18:979 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,73:78].[@-1,52:54='pos',<0>,73:82]
2023-09-04 12:05:18:981 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,73:88].[@-1,61:64='text',<0>,73:91]
2023-09-04 12:05:18:981 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,73:98].[@-1,74:75='ty',<0>,73:104]
2023-09-04 12:05:18:982 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,73:109].[@-1,84:84='e',<0>,73:114]
2023-09-04 12:05:18:983 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) 
2023-09-04 12:05:18:983 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,74:24]
2023-09-04 12:05:18:983 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,74:59].[@-1,41:44='line',<0>,74:63]
2023-09-04 12:05:18:983 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,74:70].[@-1,52:54='pos',<0>,74:74]
2023-09-04 12:05:18:985 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,74:80].[@-1,61:64='text',<0>,74:83]
2023-09-04 12:05:18:987 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,74:90].[@-1,74:75='ty',<0>,74:96]
2023-09-04 12:05:18:989 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) 
2023-09-04 12:05:18:990 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,75:19]
2023-09-04 12:05:18:990 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,75:54].[@-1,41:44='line',<0>,75:58]
2023-09-04 12:05:18:991 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,75:65].[@-1,52:54='pos',<0>,75:69]
2023-09-04 12:05:18:992 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,75:75].[@-1,61:64='text',<0>,75:78]
2023-09-04 12:05:18:992 action-translator LogManager.java:25 qattr [@-1,89:92='expr',<0>,75:106].[@-1,94:94='e',<0>,75:111]
2023-09-04 12:05:19:000 action-translator LogManager.java:25 translate  $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-04 12:05:19:000 action-translator LogManager.java:25 attr [@-1,2:4='asg',<0>,79:18]
2023-09-04 12:05:19:000 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,79:48].[@-1,35:38='line',<0>,79:51]
2023-09-04 12:05:19:000 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,79:58].[@-1,45:47='pos',<0>,79:61]
2023-09-04 12:05:19:002 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,79:67].[@-1,54:57='text',<0>,79:70]
2023-09-04 12:05:19:002 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,79:77].[@-1,66:66='e',<0>,79:82]
2023-09-04 12:05:19:008 action-translator LogManager.java:25 translate  $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); 
2023-09-04 12:05:19:010 action-translator LogManager.java:25 setAttr [@-1,2:4='asg',<0>,80:33] [@-1,7:89=' instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e)',<0>,80:38]
2023-09-04 12:05:19:010 action-translator LogManager.java:25 translate  instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e)
2023-09-04 12:05:19:012 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,80:68].[@-1,40:43='line',<0>,80:71]
2023-09-04 12:05:19:013 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,80:78].[@-1,50:52='pos',<0>,80:81]
2023-09-04 12:05:19:014 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,80:87].[@-1,59:62='text',<0>,80:90]
2023-09-04 12:05:19:014 action-translator LogManager.java:25 qattr [@-1,66:67='op',<0>,80:97].[@-1,69:72='text',<0>,80:100]
2023-09-04 12:05:19:016 action-translator LogManager.java:25 qattr [@-1,76:79='expr',<0>,80:107].[@-1,81:81='e',<0>,80:112]
2023-09-04 12:05:19:023 action-translator LogManager.java:25 translate  $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); 
2023-09-04 12:05:19:023 action-translator LogManager.java:25 setAttr [@-1,2:3='fr',<0>,85:76] [@-1,6:88=' instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk)',<0>,85:80]
2023-09-04 12:05:19:023 action-translator LogManager.java:25 translate  instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk)
2023-09-04 12:05:19:023 action-translator LogManager.java:25 qattr [@-1,24:26='FOR',<0>,85:98].[@-1,28:31='line',<0>,85:102]
2023-09-04 12:05:19:023 action-translator LogManager.java:25 qattr [@-1,35:37='FOR',<0>,85:109].[@-1,39:41='pos',<0>,85:113]
2023-09-04 12:05:19:033 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,85:119].[@-1,48:51='text',<0>,85:122]
2023-09-04 12:05:19:034 action-translator LogManager.java:25 qattr [@-1,55:58='exp1',<0>,85:129].[@-1,60:60='e',<0>,85:134]
2023-09-04 12:05:19:034 action-translator LogManager.java:25 qattr [@-1,64:67='exp2',<0>,85:138].[@-1,69:69='e',<0>,85:143]
2023-09-04 12:05:19:038 action-translator LogManager.java:25 qattr [@-1,73:77='block',<0>,85:147].[@-1,79:81='blk',<0>,85:153]
2023-09-04 12:05:19:039 action-translator LogManager.java:25 translate  $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); 
2023-09-04 12:05:19:040 action-translator LogManager.java:25 setAttr [@-1,2:3='fr',<0>,86:43] [@-1,6:77=' instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk)',<0>,86:47]
2023-09-04 12:05:19:040 action-translator LogManager.java:25 translate  instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk)
2023-09-04 12:05:19:040 action-translator LogManager.java:25 qattr [@-1,22:24='FOR',<0>,86:63].[@-1,26:29='line',<0>,86:67]
2023-09-04 12:05:19:041 action-translator LogManager.java:25 qattr [@-1,33:35='FOR',<0>,86:74].[@-1,37:39='pos',<0>,86:78]
2023-09-04 12:05:19:043 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,86:84].[@-1,46:49='text',<0>,86:87]
2023-09-04 12:05:19:043 action-translator LogManager.java:25 qattr [@-1,53:56='expr',<0>,86:94].[@-1,58:58='e',<0>,86:99]
2023-09-04 12:05:19:043 action-translator LogManager.java:25 qattr [@-1,62:66='block',<0>,86:103].[@-1,68:70='blk',<0>,86:109]
2023-09-04 12:05:19:050 action-translator LogManager.java:25 translate  $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) 
2023-09-04 12:05:19:050 action-translator LogManager.java:25 attr [@-1,2:4='grd',<0>,90:44]
2023-09-04 12:05:19:050 action-translator LogManager.java:25 qattr [@-1,31:35='GUARD',<0>,90:73].[@-1,37:40='line',<0>,90:79]
2023-09-04 12:05:19:050 action-translator LogManager.java:25 qattr [@-1,44:48='GUARD',<0>,90:86].[@-1,50:52='pos',<0>,90:92]
2023-09-04 12:05:19:052 action-translator LogManager.java:25 qattr [@-1,56:59='expr',<0>,90:98].[@-1,61:61='e',<0>,90:103]
2023-09-04 12:05:19:052 action-translator LogManager.java:25 qattr [@-1,65:69='block',<0>,90:107].[@-1,71:73='blk',<0>,90:113]
2023-09-04 12:05:19:053 action-translator LogManager.java:25 translate  $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) 
2023-09-04 12:05:19:054 action-translator LogManager.java:25 attr [@-1,2:4='brk',<0>,114:10]
2023-09-04 12:05:19:055 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,114:39].[@-1,37:40='line',<0>,114:45]
2023-09-04 12:05:19:056 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,114:52].[@-1,50:52='pos',<0>,114:58]
2023-09-04 12:05:19:059 action-translator LogManager.java:25 translate  $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) 
2023-09-04 12:05:19:059 action-translator LogManager.java:25 attr [@-1,2:4='cnt',<0>,118:13]
2023-09-04 12:05:19:059 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,118:45].[@-1,43:46='line',<0>,118:54]
2023-09-04 12:05:19:059 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,118:61].[@-1,59:61='pos',<0>,118:70]
2023-09-04 12:05:19:061 action-translator LogManager.java:25 translate  $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) 
2023-09-04 12:05:19:061 action-translator LogManager.java:25 attr [@-1,2:4='ret',<0>,122:16]
2023-09-04 12:05:19:061 action-translator LogManager.java:25 qattr [@-1,32:37='RETURN',<0>,122:46].[@-1,39:42='line',<0>,122:53]
2023-09-04 12:05:19:062 action-translator LogManager.java:25 qattr [@-1,46:51='RETURN',<0>,122:60].[@-1,53:55='pos',<0>,122:67]
2023-09-04 12:05:19:062 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,122:73].[@-1,64:64='e',<0>,122:78]
2023-09-04 12:05:19:062 action-translator LogManager.java:25 translate  $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) 
2023-09-04 12:05:19:063 action-translator LogManager.java:25 attr [@-1,2:4='ret',<0>,123:11]
2023-09-04 12:05:19:063 action-translator LogManager.java:25 qattr [@-1,32:37='RETURN',<0>,123:41].[@-1,39:42='line',<0>,123:48]
2023-09-04 12:05:19:063 action-translator LogManager.java:25 qattr [@-1,46:51='RETURN',<0>,123:55].[@-1,53:55='pos',<0>,123:62]
2023-09-04 12:05:19:070 action-translator LogManager.java:25 translate  $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-04 12:05:19:070 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,127:39]
2023-09-04 12:05:19:071 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,127:67].[@-1,33:36='line',<0>,127:70]
2023-09-04 12:05:19:071 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,127:77].[@-1,43:45='pos',<0>,127:80]
2023-09-04 12:05:19:072 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,127:86].[@-1,52:55='text',<0>,127:89]
2023-09-04 12:05:19:072 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,127:96].[@-1,64:64='e',<0>,127:101]
2023-09-04 12:05:19:073 action-translator LogManager.java:25 translate  $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-04 12:05:19:073 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,128:48]
2023-09-04 12:05:19:073 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,128:78].[@-1,35:38='line',<0>,128:81]
2023-09-04 12:05:19:073 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,128:88].[@-1,45:47='pos',<0>,128:91]
2023-09-04 12:05:19:073 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,128:97].[@-1,54:57='text',<0>,128:100]
2023-09-04 12:05:19:074 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,128:107].[@-1,66:66='e',<0>,128:112]
2023-09-04 12:05:19:077 action-translator LogManager.java:25 translate  $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) 
2023-09-04 12:05:19:078 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,129:38]
2023-09-04 12:05:19:079 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,129:70].[@-1,37:40='line',<0>,129:73]
2023-09-04 12:05:19:081 action-translator LogManager.java:25 qattr [@-1,44:45='ID',<0>,129:80].[@-1,47:49='pos',<0>,129:83]
2023-09-04 12:05:19:081 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,129:89].[@-1,56:59='text',<0>,129:92]
2023-09-04 12:05:19:090 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-09-04 12:05:19:090 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,138:8]
2023-09-04 12:05:19:091 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-09-04 12:05:19:091 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,139:10]
2023-09-04 12:05:19:093 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-09-04 12:05:19:093 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,140:8]
2023-09-04 12:05:19:093 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-09-04 12:05:19:093 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,141:9]
2023-09-04 12:05:19:096 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-09-04 12:05:19:098 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,142:24]
2023-09-04 12:05:19:098 action-translator LogManager.java:25 translate  $ty = environment.STR 
2023-09-04 12:05:19:099 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,143:24]
2023-09-04 12:05:19:099 action-translator LogManager.java:25 translate  $ty = environment.NIL 
2023-09-04 12:05:19:099 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,144:8]
2023-09-04 12:05:19:111 action-translator LogManager.java:25 translate 
2023-09-04 12:05:19:112 action-translator LogManager.java:25 translate $e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)
2023-09-04 12:05:19:112 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,2:65]
2023-09-04 12:05:19:112 action-translator LogManager.java:25 qattr [@-1,31:33='SUB',<0>,2:95].[@-1,35:38='line',<0>,2:99]
2023-09-04 12:05:19:112 action-translator LogManager.java:25 qattr [@-1,41:43='SUB',<0>,2:105].[@-1,45:47='pos',<0>,2:109]
2023-09-04 12:05:19:113 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,2:114].[@-1,55:55='e',<0>,2:119]
2023-09-04 12:05:19:116 action-translator LogManager.java:25 translate  $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) 
2023-09-04 12:05:19:116 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:101]
2023-09-04 12:05:19:117 action-translator LogManager.java:25 qattr [@-1,27:31='types',<0>,3:126].[@-1,33:37='start',<0>,3:132]
2023-09-04 12:05:19:118 action-translator LogManager.java:25 qattr [@-1,51:55='types',<0>,3:150].[@-1,57:61='start',<0>,3:156]
2023-09-04 12:05:19:119 action-translator LogManager.java:25 qattr [@-1,77:81='types',<0>,3:176].[@-1,83:84='ty',<0>,3:182]
2023-09-04 12:05:19:119 action-translator LogManager.java:25 qattr [@-1,88:91='expr',<0>,3:187].[@-1,93:93='e',<0>,3:192]
2023-09-04 12:05:19:120 action-translator LogManager.java:25 translate $e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)
2023-09-04 12:05:19:120 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,4:63]
2023-09-04 12:05:19:120 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,4:93].[@-1,35:38='line',<0>,4:97]
2023-09-04 12:05:19:121 action-translator LogManager.java:25 qattr [@-1,42:44='NOT',<0>,4:104].[@-1,46:48='pos',<0>,4:108]
2023-09-04 12:05:19:122 action-translator LogManager.java:25 qattr [@-1,52:56='right',<0>,4:114].[@-1,58:58='e',<0>,4:120]
2023-09-04 12:05:19:122 action-translator LogManager.java:25 qattr [@-1,62:64='NOT',<0>,4:124].[@-1,66:69='text',<0>,4:128]
2023-09-04 12:05:19:123 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-09-04 12:05:19:123 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:79]
2023-09-04 12:05:19:123 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,5:84].[@-1,12:12='e',<0>,5:89]
2023-09-04 12:05:19:123 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) 
2023-09-04 12:05:19:127 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:58]
2023-09-04 12:05:19:128 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,6:84].[@-1,35:38='line',<0>,6:91]
2023-09-04 12:05:19:128 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,6:98].[@-1,49:51='pos',<0>,6:105]
2023-09-04 12:05:19:129 action-translator LogManager.java:25 translate  $e = $list.p
2023-09-04 12:05:19:129 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:43]
2023-09-04 12:05:19:129 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,7:48].[@-1,12:12='p',<0>,7:53]
2023-09-04 12:05:19:130 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-09-04 12:05:19:130 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,8:85]
2023-09-04 12:05:19:131 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,8:111].[@-1,35:38='line',<0>,8:118]
2023-09-04 12:05:19:131 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,8:125].[@-1,49:51='pos',<0>,8:132]
2023-09-04 12:05:19:131 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,8:138].[@-1,66:66='l',<0>,8:149]
2023-09-04 12:05:19:131 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-09-04 12:05:19:132 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,11:30].[@-1,39:42='text',<0>,11:37]
2023-09-04 12:05:19:132 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,12:43].[@-1,102:105='text',<0>,12:50]
2023-09-04 12:05:19:133 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,16:13]
2023-09-04 12:05:19:133 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,16:43].[@-1,240:243='line',<0>,16:50]
2023-09-04 12:05:19:134 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,16:56].[@-1,253:255='pos',<0>,16:63]
2023-09-04 12:05:19:134 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,18:37].[@-1,341:344='text',<0>,18:44]
2023-09-04 12:05:19:136 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,22:13]
2023-09-04 12:05:19:136 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,22:43].[@-1,474:477='line',<0>,22:50]
2023-09-04 12:05:19:136 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,22:56].[@-1,487:489='pos',<0>,22:63]
2023-09-04 12:05:19:138 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-09-04 12:05:19:138 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,27:16].[@-1,25:28='text',<0>,27:23]
2023-09-04 12:05:19:139 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,28:9]
2023-09-04 12:05:19:139 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,28:39].[@-1,77:80='line',<0>,28:46]
2023-09-04 12:05:19:139 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,28:53].[@-1,91:93='pos',<0>,28:60]
2023-09-04 12:05:19:140 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-09-04 12:05:19:140 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:32]
2023-09-04 12:05:19:140 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,30:62].[@-1,36:39='line',<0>,30:66]
2023-09-04 12:05:19:141 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,30:73].[@-1,47:49='pos',<0>,30:77]
2023-09-04 12:05:19:142 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-09-04 12:05:19:143 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:32]
2023-09-04 12:05:19:143 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,31:62].[@-1,36:39='line',<0>,31:66]
2023-09-04 12:05:19:145 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,31:73].[@-1,47:49='pos',<0>,31:77]
2023-09-04 12:05:19:147 action-translator LogManager.java:25 translate  $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) 
2023-09-04 12:05:19:149 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:75]
2023-09-04 12:05:19:149 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,32:101].[@-1,31:34='line',<0>,32:104]
2023-09-04 12:05:19:149 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,32:111].[@-1,41:43='pos',<0>,32:114]
2023-09-04 12:05:19:149 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,32:120].[@-1,50:53='text',<0>,32:123]
2023-09-04 12:05:19:150 action-translator LogManager.java:25 translate  $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) 
2023-09-04 12:05:19:150 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:77]
2023-09-04 12:05:19:151 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,33:105].[@-1,33:36='line',<0>,33:108]
2023-09-04 12:05:19:151 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,33:115].[@-1,43:45='pos',<0>,33:118]
2023-09-04 12:05:19:151 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,33:124].[@-1,52:55='text',<0>,33:127]
2023-09-04 12:05:19:152 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) 
2023-09-04 12:05:19:152 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:32]
2023-09-04 12:05:19:153 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,34:62].[@-1,36:39='line',<0>,34:66]
2023-09-04 12:05:19:153 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,34:73].[@-1,47:49='pos',<0>,34:77]
2023-09-04 12:05:19:156 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-04 12:05:19:158 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) 
2023-09-04 12:05:19:158 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:139]
2023-09-04 12:05:19:158 action-translator LogManager.java:25 qattr [@-1,32:33='op',<0>,37:169].[@-1,35:38='line',<0>,37:172]
2023-09-04 12:05:19:159 action-translator LogManager.java:25 qattr [@-1,42:43='op',<0>,37:179].[@-1,45:47='pos',<0>,37:182]
2023-09-04 12:05:19:159 action-translator LogManager.java:25 qattr [@-1,56:57='op',<0>,37:193].[@-1,59:62='text',<0>,37:196]
2023-09-04 12:05:19:159 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,37:203].[@-1,71:71='e',<0>,37:208]
2023-09-04 12:05:19:160 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-04 12:05:19:161 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 12:05:19:161 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:169]
2023-09-04 12:05:19:161 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:199].[@-1,37:41='start',<0>,38:204]
2023-09-04 12:05:19:161 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:222].[@-1,60:64='start',<0>,38:227]
2023-09-04 12:05:19:161 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:247].[@-1,85:85='e',<0>,38:252]
2023-09-04 12:05:19:161 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:256].[@-1,92:95='text',<0>,38:259]
2023-09-04 12:05:19:161 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:266].[@-1,105:105='e',<0>,38:272]
2023-09-04 12:05:19:163 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-04 12:05:19:163 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 12:05:19:164 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:149]
2023-09-04 12:05:19:164 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:179].[@-1,37:41='start',<0>,39:184]
2023-09-04 12:05:19:164 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:202].[@-1,60:64='start',<0>,39:207]
2023-09-04 12:05:19:164 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:227].[@-1,85:85='e',<0>,39:232]
2023-09-04 12:05:19:164 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:236].[@-1,92:95='text',<0>,39:239]
2023-09-04 12:05:19:164 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:246].[@-1,105:105='e',<0>,39:252]
2023-09-04 12:05:19:165 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-04 12:05:19:166 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 12:05:19:166 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:154]
2023-09-04 12:05:19:167 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:184].[@-1,37:41='start',<0>,40:189]
2023-09-04 12:05:19:167 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:207].[@-1,60:64='start',<0>,40:212]
2023-09-04 12:05:19:167 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:232].[@-1,85:85='e',<0>,40:237]
2023-09-04 12:05:19:167 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:241].[@-1,92:95='text',<0>,40:244]
2023-09-04 12:05:19:168 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:251].[@-1,105:105='e',<0>,40:257]
2023-09-04 12:05:19:168 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-04 12:05:19:169 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 12:05:19:169 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:154]
2023-09-04 12:05:19:169 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:184].[@-1,37:41='start',<0>,41:189]
2023-09-04 12:05:19:169 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:207].[@-1,60:64='start',<0>,41:212]
2023-09-04 12:05:19:169 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:232].[@-1,85:85='e',<0>,41:237]
2023-09-04 12:05:19:170 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:241].[@-1,92:95='text',<0>,41:244]
2023-09-04 12:05:19:170 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:251].[@-1,105:105='e',<0>,41:257]
2023-09-04 12:05:19:171 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-04 12:05:19:172 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 12:05:19:172 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,42:151]
2023-09-04 12:05:19:172 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,42:181].[@-1,37:41='start',<0>,42:186]
2023-09-04 12:05:19:172 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,42:204].[@-1,60:64='start',<0>,42:209]
2023-09-04 12:05:19:173 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,42:229].[@-1,85:85='e',<0>,42:234]
2023-09-04 12:05:19:173 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,42:238].[@-1,92:95='text',<0>,42:241]
2023-09-04 12:05:19:173 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,42:248].[@-1,105:105='e',<0>,42:254]
2023-09-04 12:05:19:173 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-09-04 12:05:19:175 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 12:05:19:178 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,43:127]
2023-09-04 12:05:19:178 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,43:157].[@-1,37:41='start',<0>,43:162]
2023-09-04 12:05:19:178 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,43:180].[@-1,60:64='start',<0>,43:185]
2023-09-04 12:05:19:179 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,43:205].[@-1,85:85='e',<0>,43:210]
2023-09-04 12:05:19:179 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,43:214].[@-1,92:95='text',<0>,43:217]
2023-09-04 12:05:19:179 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,43:224].[@-1,105:105='e',<0>,43:230]
2023-09-04 12:05:19:179 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-09-04 12:05:19:180 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 12:05:19:180 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,44:126]
2023-09-04 12:05:19:180 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,44:156].[@-1,37:41='start',<0>,44:161]
2023-09-04 12:05:19:181 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,44:179].[@-1,60:64='start',<0>,44:184]
2023-09-04 12:05:19:181 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,44:204].[@-1,85:85='e',<0>,44:209]
2023-09-04 12:05:19:181 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,44:213].[@-1,92:95='text',<0>,44:216]
2023-09-04 12:05:19:181 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,44:223].[@-1,105:105='e',<0>,44:229]
2023-09-04 12:05:19:185 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-04 12:05:19:186 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-04 12:05:19:186 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-04 12:05:19:186 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-04 12:05:19:186 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-04 12:05:19:187 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-04 12:05:19:187 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-09-04 12:05:19:187 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-09-04 12:05:19:189 action-translator LogManager.java:25 translate 
2023-09-04 12:05:19:189 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-04 12:05:19:189 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-04 12:05:19:190 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-04 12:05:19:190 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-04 12:05:19:190 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-04 12:05:19:190 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 12:05:19:191 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-09-04 12:05:19:191 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-09-04 12:05:19:191 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-09-04 12:05:19:191 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-09-04 12:05:19:192 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 12:05:19:193 action-translator LogManager.java:25 translate 
2023-09-04 12:05:19:193 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-09-04 12:05:19:195 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:35]
2023-09-04 12:05:19:195 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:63].[@-1,33:36='line',<0>,2:66]
2023-09-04 12:05:19:196 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:73].[@-1,43:45='pos',<0>,2:76]
2023-09-04 12:05:19:197 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:82].[@-1,52:55='text',<0>,2:85]
2023-09-04 12:05:19:198 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-04 12:05:19:199 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-09-04 12:05:19:199 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:127]
2023-09-04 12:05:19:199 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:159].[@-1,39:43='start',<0>,5:164]
2023-09-04 12:05:19:200 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:182].[@-1,62:66='start',<0>,5:187]
2023-09-04 12:05:19:200 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:207].[@-1,87:87='p',<0>,5:212]
2023-09-04 12:05:19:200 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:216].[@-1,96:96='e',<0>,5:221]
2023-09-04 12:05:19:201 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 12:05:19:201 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-09-04 12:05:19:202 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:183]
2023-09-04 12:05:19:202 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,6:215].[@-1,39:43='start',<0>,6:220]
2023-09-04 12:05:19:202 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,6:238].[@-1,62:66='start',<0>,6:243]
2023-09-04 12:05:19:202 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,6:263].[@-1,87:87='p',<0>,6:268]
2023-09-04 12:05:19:203 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,6:272].[@-1,96:96='e',<0>,6:277]
2023-09-04 12:05:19:209 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-04 12:05:19:209 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 12:05:19:212 action-translator LogManager.java:25 translate 
2023-09-04 12:05:19:213 action-translator LogManager.java:25 translate  $t = $expr.e 
2023-09-04 12:05:19:213 action-translator LogManager.java:25 attr [@-1,2:2='t',<0>,2:37]
2023-09-04 12:05:19:213 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:42].[@-1,12:12='e',<0>,2:47]
2023-09-04 12:05:19:214 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 12:05:19:216 action-translator LogManager.java:25 translate  $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) 
2023-09-04 12:05:19:216 action-translator LogManager.java:25 attr [@-1,2:2='t',<0>,5:113]
2023-09-04 12:05:19:218 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,5:143].[@-1,37:41='start',<0>,5:148]
2023-09-04 12:05:19:218 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,5:166].[@-1,60:64='start',<0>,5:171]
2023-09-04 12:05:19:218 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,5:191].[@-1,85:85='t',<0>,5:196]
2023-09-04 12:05:19:219 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,5:200].[@-1,92:95='text',<0>,5:203]
2023-09-04 12:05:19:219 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,5:210].[@-1,105:105='e',<0>,5:216]
2023-09-04 12:05:19:219 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 12:05:20:943 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-04 12:05:20:944 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-04 12:05:21:267 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-04 12:05:21:267 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

