2023-09-07 12:54:16:541 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMILLA (BLOCK (ALT '"'))) (RULE FLECHA (BLOCK (ALT '->'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE AMP (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-07 12:54:16:659 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMILLA (BLOCK (ALT '"'))) (RULE FLECHA (BLOCK (ALT '->'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE AMP (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-07 12:54:19:691 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }) (ALT structCreation { $inst = $structCreation.dec }) (ALT returnstmt { $inst = $returnstmt.ret }) (ALT fnstmt { $inst = $fnstmt.fn }) (ALT callFunction { $inst = $callFunction.cf }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}) (ALT PRINT PARIZQ exprComa PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) }) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT listAccessStruct IG expr { $asg = instructions.NewStructAssign($listAccessStruct.start.GetLine(),$listAccessStruct.start.GetColumn(), $listAccessStruct.l, $expr.e) }) (ALT ID (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }) (ALT ID listAccessArray IG expr { $asg = instructions.NewArrayAssign($ID.line, $ID.pos, $ID.text, $listAccessArray.l, $expr.e) }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE returnstmt (returns interfaces.Instruction ret) (BLOCK (ALT RETURN expr { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) }) (ALT RETURN { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) (? (BLOCK (ALT COMA))) (BLOCK (ALT VAR) (ALT LET)) ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty, "")
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT (= list listStructDec) (? (BLOCK (ALT COMA))) (BLOCK (ALT VAR) (ALT LET)) (= id1 ID) D_PTS (= id2 ID) {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($id1.text, environment.UNKNOWN, $id2.text)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT (= list listStructDec) (? (BLOCK (ALT COMA))) (BLOCK (ALT VAR) (ALT LET)) (= id1 ID) (? (BLOCK (ALT D_PTS types))) IG expr {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($id1.text, $types.ty, "")
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT (BLOCK (ALT VAR) (ALT LET)) ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty, "")
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT (BLOCK (ALT VAR) (ALT LET)) (= id1 ID) D_PTS (= id2 ID) {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($id1.text,environment.UNKNOWN , $id2.text)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT { $l = []interface{}{} }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    }))) (RULE listAccessStruct (returns []interface{} l) (BLOCK (ALT (= list listAccessStruct) PUNTO ID {
                                    var arr []interface{}
                                    arr = append($list.l, $ID.text)
                                    $l = arr
                                }) (ALT ID { 
    $l = []interface{}{}
    $l = append($l, $ID.text) 
    }))) (RULE fnstmt (returns interfaces.Instruction fn) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER FLECHA types LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, $types.ty, $block.blk) }) (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, environment.NIL, $block.blk) }))) (RULE listParamsFunc (returns []interface{} l) (BLOCK (ALT (= list listParamsFunc) COMA parametro {
                                var arr []interface{}
                                arr = append($list.l, $parametro.p)
                                $l = arr
                            }) (ALT parametro {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE parametro (returns interfaces.Instruction p) (BLOCK (ALT ID D_PTS types { $p = instructions.NewParams($ID.line,$ID.pos,$ID.text ,$ID.text, $types.ty ,false)}) (ALT ID D_PTS INOUT types { $p = instructions.NewParams($ID.line,$ID.pos,$ID.text,$ID.text, $types.ty,true)}) (ALT (= exte (BLOCK (ALT GUIONBAJO) (ALT ID))) ID D_PTS types { $p = instructions.NewParams($ID.line,$ID.pos, $ID.text,$exte.text, $types.ty,false)}) (ALT (= exte (BLOCK (ALT GUIONBAJO) (ALT ID))) ID D_PTS INOUT types { $p = instructions.NewParams($ID.line,$ID.pos, $ID.text,$exte.text, $types.ty,true)}))) (RULE callExp (returns interfaces.Expression cfe) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cfe = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE callFunction (returns interfaces.Instruction cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = instructions.NewCallFunc($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }) (ALT STRUCT { $ty = environment.STRUCT }) (ALT ID { $ty = environment.UNKNOWN }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (= left expr) (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= right expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT callExp { $e = $callExp.cfe }) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT ID PARIZQ listStructExp PARDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listAccessArray (returns []interface{} l) (BLOCK (ALT (= list listAccessArray) CORIZQ expr CORDER {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT CORIZQ expr CORDER {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT (= list listArray) types IG CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (= left exprComa) (= op COMA) (= right expr) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }) (ALT expr { $t = $expr.e })))))
2023-09-07 12:54:19:770 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }) (ALT structCreation { $inst = $structCreation.dec }) (ALT returnstmt { $inst = $returnstmt.ret }) (ALT fnstmt { $inst = $fnstmt.fn }) (ALT callFunction { $inst = $callFunction.cf }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}) (ALT PRINT PARIZQ exprComa PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) }) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT listAccessStruct IG expr { $asg = instructions.NewStructAssign($listAccessStruct.start.GetLine(),$listAccessStruct.start.GetColumn(), $listAccessStruct.l, $expr.e) }) (ALT ID (= op (SET SUB_IG SUM_IG)) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }) (ALT ID listAccessArray IG expr { $asg = instructions.NewArrayAssign($ID.line, $ID.pos, $ID.text, $listAccessArray.l, $expr.e) }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE returnstmt (returns interfaces.Instruction ret) (BLOCK (ALT RETURN expr { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) }) (ALT RETURN { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) (? (BLOCK (ALT COMA))) (SET VAR LET) ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty, "")
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT (= list listStructDec) (? (BLOCK (ALT COMA))) (SET VAR LET) (= id1 ID) D_PTS (= id2 ID) {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($id1.text, environment.UNKNOWN, $id2.text)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT (= list listStructDec) (? (BLOCK (ALT COMA))) (SET VAR LET) (= id1 ID) (? (BLOCK (ALT D_PTS types))) IG expr {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($id1.text, $types.ty, "")
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT (SET VAR LET) ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty, "")
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT (SET VAR LET) (= id1 ID) D_PTS (= id2 ID) {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($id1.text,environment.UNKNOWN , $id2.text)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT { $l = []interface{}{} }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    }))) (RULE listAccessStruct (returns []interface{} l) (BLOCK (ALT (= list listAccessStruct) PUNTO ID {
                                    var arr []interface{}
                                    arr = append($list.l, $ID.text)
                                    $l = arr
                                }) (ALT ID { 
    $l = []interface{}{}
    $l = append($l, $ID.text) 
    }))) (RULE fnstmt (returns interfaces.Instruction fn) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER FLECHA types LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, $types.ty, $block.blk) }) (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, environment.NIL, $block.blk) }))) (RULE listParamsFunc (returns []interface{} l) (BLOCK (ALT (= list listParamsFunc) COMA parametro {
                                var arr []interface{}
                                arr = append($list.l, $parametro.p)
                                $l = arr
                            }) (ALT parametro {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE parametro (returns interfaces.Instruction p) (BLOCK (ALT ID D_PTS types { $p = instructions.NewParams($ID.line,$ID.pos,$ID.text ,$ID.text, $types.ty ,false)}) (ALT ID D_PTS INOUT types { $p = instructions.NewParams($ID.line,$ID.pos,$ID.text,$ID.text, $types.ty,true)}) (ALT (= exte (SET GUIONBAJO ID)) ID D_PTS types { $p = instructions.NewParams($ID.line,$ID.pos, $ID.text,$exte.text, $types.ty,false)}) (ALT (= exte (SET GUIONBAJO ID)) ID D_PTS INOUT types { $p = instructions.NewParams($ID.line,$ID.pos, $ID.text,$exte.text, $types.ty,true)}))) (RULE callExp (returns interfaces.Expression cfe) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cfe = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE callFunction (returns interfaces.Instruction cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = instructions.NewCallFunc($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }) (ALT STRUCT { $ty = environment.STRUCT }) (ALT ID { $ty = environment.UNKNOWN }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= right expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT callExp { $e = $callExp.cfe }) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT ID PARIZQ listStructExp PARDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listAccessArray (returns []interface{} l) (BLOCK (ALT (= list listAccessArray) CORIZQ expr CORDER {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT CORIZQ expr CORDER {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT (= list listArray) types IG CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (= left exprComa) (= op COMA) (= right expr) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }) (ALT expr { $t = $expr.e })))))
2023-09-07 12:54:19:783 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }) (ALT structCreation { $inst = $structCreation.dec }) (ALT returnstmt { $inst = $returnstmt.ret }) (ALT fnstmt { $inst = $fnstmt.fn }) (ALT callFunction { $inst = $callFunction.cf }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}) (ALT PRINT PARIZQ exprComa PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) }) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT listAccessStruct IG expr { $asg = instructions.NewStructAssign($listAccessStruct.start.GetLine(),$listAccessStruct.start.GetColumn(), $listAccessStruct.l, $expr.e) }) (ALT ID (= op (SET SUB_IG SUM_IG)) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }) (ALT ID listAccessArray IG expr { $asg = instructions.NewArrayAssign($ID.line, $ID.pos, $ID.text, $listAccessArray.l, $expr.e) }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE returnstmt (returns interfaces.Instruction ret) (BLOCK (ALT RETURN expr { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) }) (ALT RETURN { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) (? (BLOCK (ALT COMA))) (SET VAR LET) ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty, "")
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT (= list listStructDec) (? (BLOCK (ALT COMA))) (SET VAR LET) (= id1 ID) D_PTS (= id2 ID) {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($id1.text, environment.UNKNOWN, $id2.text)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT (= list listStructDec) (? (BLOCK (ALT COMA))) (SET VAR LET) (= id1 ID) (? (BLOCK (ALT D_PTS types))) IG expr {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($id1.text, $types.ty, "")
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT (SET VAR LET) ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty, "")
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT (SET VAR LET) (= id1 ID) D_PTS (= id2 ID) {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($id1.text,environment.UNKNOWN , $id2.text)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT { $l = []interface{}{} }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    }))) (RULE listAccessStruct (returns []interface{} l) (BLOCK (ALT (= list listAccessStruct) PUNTO ID {
                                    var arr []interface{}
                                    arr = append($list.l, $ID.text)
                                    $l = arr
                                }) (ALT ID { 
    $l = []interface{}{}
    $l = append($l, $ID.text) 
    }))) (RULE fnstmt (returns interfaces.Instruction fn) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER FLECHA types LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, $types.ty, $block.blk) }) (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, environment.NIL, $block.blk) }))) (RULE listParamsFunc (returns []interface{} l) (BLOCK (ALT (= list listParamsFunc) COMA parametro {
                                var arr []interface{}
                                arr = append($list.l, $parametro.p)
                                $l = arr
                            }) (ALT parametro {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE parametro (returns interfaces.Instruction p) (BLOCK (ALT ID D_PTS types { $p = instructions.NewParams($ID.line,$ID.pos,$ID.text ,$ID.text, $types.ty ,false)}) (ALT ID D_PTS INOUT types { $p = instructions.NewParams($ID.line,$ID.pos,$ID.text,$ID.text, $types.ty,true)}) (ALT (= exte (SET GUIONBAJO ID)) ID D_PTS types { $p = instructions.NewParams($ID.line,$ID.pos, $ID.text,$exte.text, $types.ty,false)}) (ALT (= exte (SET GUIONBAJO ID)) ID D_PTS INOUT types { $p = instructions.NewParams($ID.line,$ID.pos, $ID.text,$exte.text, $types.ty,true)}))) (RULE callExp (returns interfaces.Expression cfe) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cfe = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE callFunction (returns interfaces.Instruction cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = instructions.NewCallFunc($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }) (ALT STRUCT { $ty = environment.STRUCT }) (ALT ID { $ty = environment.UNKNOWN }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= right expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT callExp { $e = $callExp.cfe }) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT ID PARIZQ listStructExp PARDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listAccessArray (returns []interface{} l) (BLOCK (ALT (= list listAccessArray) CORIZQ expr CORDER {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT CORIZQ expr CORDER {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT (= list listArray) types IG CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (= left exprComa) (= op COMA) (= right expr) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }) (ALT expr { $t = $expr.e })))))
2023-09-07 12:54:19:783 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-09-07 12:54:19:899 left-recursion LogManager.java:25 listStructDec returns [[]interface{} l]
    :   ( {} (VAR<tokenIndex=724>|LET<tokenIndex=726>) ID<tokenIndex=729> D_PTS<tokenIndex=731> types<tokenIndex=733> {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty, "")
                        arr = append(arr, newParams)
                        $l = arr
                    } 
        | (VAR<tokenIndex=740>|LET<tokenIndex=742>) id1=ID<tokenIndex=747> D_PTS<tokenIndex=749> id2=ID<tokenIndex=753> {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($id1.text,environment.UNKNOWN , $id2.text)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            } 
        | { $l = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> (COMA<tokenIndex=640>)? (VAR<tokenIndex=645>|LET<tokenIndex=647>) ID<tokenIndex=650> D_PTS<tokenIndex=652> types<tokenIndex=654> {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty, "")
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> (COMA<tokenIndex=665>)? (VAR<tokenIndex=670>|LET<tokenIndex=672>) id1=ID<tokenIndex=677> D_PTS<tokenIndex=679> id2=ID<tokenIndex=683> {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($id1.text, environment.UNKNOWN, $id2.text)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> (COMA<tokenIndex=694>)? (VAR<tokenIndex=699>|LET<tokenIndex=701>) id1=ID<tokenIndex=706> (D_PTS<tokenIndex=709> types<tokenIndex=711>)? IG<tokenIndex=715> expr<tokenIndex=717> {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($id1.text, $types.ty, "")
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }
        )*
    ;
2023-09-07 12:54:20:045 grammar LogManager.java:25 added: (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (SET (VAR (ELEMENT_OPTIONS (= tokenIndex 724))) (LET (ELEMENT_OPTIONS (= tokenIndex 726)))) (ID (ELEMENT_OPTIONS (= tokenIndex 729))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 731))) (types (ELEMENT_OPTIONS (= tokenIndex 733))) {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty, "")
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT (SET (VAR (ELEMENT_OPTIONS (= tokenIndex 740))) (LET (ELEMENT_OPTIONS (= tokenIndex 742)))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 747)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 749))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 753)))) {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($id1.text,environment.UNKNOWN , $id2.text)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT { $l = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (? (BLOCK (ALT (COMA (ELEMENT_OPTIONS (= tokenIndex 640)))))) (SET (VAR (ELEMENT_OPTIONS (= tokenIndex 645))) (LET (ELEMENT_OPTIONS (= tokenIndex 647)))) (ID (ELEMENT_OPTIONS (= tokenIndex 650))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 652))) (types (ELEMENT_OPTIONS (= tokenIndex 654))) {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty, "")
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (? (BLOCK (ALT (COMA (ELEMENT_OPTIONS (= tokenIndex 665)))))) (SET (VAR (ELEMENT_OPTIONS (= tokenIndex 670))) (LET (ELEMENT_OPTIONS (= tokenIndex 672)))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 677)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 679))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 683)))) {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($id1.text, environment.UNKNOWN, $id2.text)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (? (BLOCK (ALT (COMA (ELEMENT_OPTIONS (= tokenIndex 694)))))) (SET (VAR (ELEMENT_OPTIONS (= tokenIndex 699))) (LET (ELEMENT_OPTIONS (= tokenIndex 701)))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 706)))) (? (BLOCK (ALT (D_PTS (ELEMENT_OPTIONS (= tokenIndex 709))) (types (ELEMENT_OPTIONS (= tokenIndex 711)))))) (IG (ELEMENT_OPTIONS (= tokenIndex 715))) (expr (ELEMENT_OPTIONS (= tokenIndex 717))) {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($id1.text, $types.ty, "")
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }))))))
2023-09-07 12:54:20:047 left-recursion LogManager.java:25 listStructExp returns [[]interface{} l]
    :   ( {} ID<tokenIndex=786> D_PTS<tokenIndex=788> expr<tokenIndex=790>{
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=774> ID<tokenIndex=776> D_PTS<tokenIndex=778> expr<tokenIndex=780> {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }
        )*
    ;
2023-09-07 12:54:20:063 grammar LogManager.java:25 added: (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 786))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 788))) (expr (ELEMENT_OPTIONS (= tokenIndex 790))) {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 774))) (ID (ELEMENT_OPTIONS (= tokenIndex 776))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 778))) (expr (ELEMENT_OPTIONS (= tokenIndex 780))) {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }))))))
2023-09-07 12:54:20:064 left-recursion LogManager.java:25 listAccessStruct returns [[]interface{} l]
    :   ( {} ID<tokenIndex=818> { 
    $l = []interface{}{}
    $l = append($l, $ID.text) 
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=810> ID<tokenIndex=812> {
                                              var arr []interface{}
                                              arr = append($list.l, $ID.text)
                                              $l = arr
                                          }
        )*
    ;
2023-09-07 12:54:20:136 grammar LogManager.java:25 added: (RULE listAccessStruct (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 818))) { 
    $l = []interface{}{}
    $l = append($l, $ID.text) 
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 810))) (ID (ELEMENT_OPTIONS (= tokenIndex 812))) {
                                              var arr []interface{}
                                              arr = append($list.l, $ID.text)
                                              $l = arr
                                          }))))))
2023-09-07 12:54:20:141 left-recursion LogManager.java:25 listParamsFunc returns [[]interface{} l]
    :   ( {} parametro<tokenIndex=894> {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=886> parametro<tokenIndex=888> {
                                          var arr []interface{}
                                          arr = append($list.l, $parametro.p)
                                          $l = arr
                                      }
        )*
    ;
2023-09-07 12:54:20:149 grammar LogManager.java:25 added: (RULE listParamsFunc (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (parametro (ELEMENT_OPTIONS (= tokenIndex 894))) {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 886))) (parametro (ELEMENT_OPTIONS (= tokenIndex 888))) {
                                          var arr []interface{}
                                          arr = append($list.l, $parametro.p)
                                          $l = arr
                                      }))))))
2023-09-07 12:54:20:151 left-recursion LogManager.java:25 listParamsCall returns [[]interface{} l]
    :   ( {} expr<tokenIndex=1028>  {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1020> expr<tokenIndex=1022> {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }
        )*
    ;
2023-09-07 12:54:20:158 grammar LogManager.java:25 added: (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1028))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1020))) (expr (ELEMENT_OPTIONS (= tokenIndex 1022))) {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }))))))
2023-09-07 12:54:20:177 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} SUB<tokenIndex=1115> opDe=expr<tokenIndex=1119,p=24> {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)} 
        | NOT<tokenIndex=1277> right=expr<tokenIndex=1281,p=15> {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)} 
        | PARIZQ<tokenIndex=1287> expr<tokenIndex=1289> PARDER<tokenIndex=1291> { $e = $expr.e } 
        | callExp<tokenIndex=1297> { $e = $callExp.cfe } 
        | types<tokenIndex=1303> PARIZQ<tokenIndex=1305> expr<tokenIndex=1307> PARDER<tokenIndex=1309> { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) } 
        | ID<tokenIndex=1315> PARIZQ<tokenIndex=1317> listStructExp<tokenIndex=1319> PARDER<tokenIndex=1321> { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) } 
        | CORIZQ<tokenIndex=1327> CORDER<tokenIndex=1329> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) } 
        | list=listArray<tokenIndex=1337> { $e = $list.p} 
        | CORIZQ<tokenIndex=1343> listParams<tokenIndex=1345> CORDER<tokenIndex=1347> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=1353>
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=1359>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=1365> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=1371> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | ID<tokenIndex=1377> PUNTO<tokenIndex=1379> COUNT<tokenIndex=1381> { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) } 
        | ID<tokenIndex=1387> PUNTO<tokenIndex=1389> ISEMPTY<tokenIndex=1391> { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) } 
        | NIL<tokenIndex=1397> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 23)}?<p=23> op=(SUB_IG<tokenIndex=1132>|SUM_IG<tokenIndex=1134>) expr<tokenIndex=1137,p=24> { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 22)}?<p=22> op=(MUL<tokenIndex=1150>|DIV<tokenIndex=1152>|MOD<tokenIndex=1154>) right=expr<tokenIndex=1159,p=23> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op=(ADD<tokenIndex=1172>|SUB<tokenIndex=1174>) right=expr<tokenIndex=1179,p=22> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=(MAY_IG<tokenIndex=1192>|MAYOR<tokenIndex=1194>) right=expr<tokenIndex=1199,p=21> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MEN_IG<tokenIndex=1212>|MENOR<tokenIndex=1214>) right=expr<tokenIndex=1219,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(IG_IG<tokenIndex=1232>|DIF<tokenIndex=1234>) right=expr<tokenIndex=1239,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=AND<tokenIndex=1251> right=expr<tokenIndex=1255,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=OR<tokenIndex=1267> right=expr<tokenIndex=1271,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-09-07 12:54:20:272 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (SUB (ELEMENT_OPTIONS (= tokenIndex 1115))) (= opDe (expr (ELEMENT_OPTIONS (= tokenIndex 1119) (= p 24)))) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 1277))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1281) (= p 15)))) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1287))) (expr (ELEMENT_OPTIONS (= tokenIndex 1289))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1291))) { $e = $expr.e }) (ALT (callExp (ELEMENT_OPTIONS (= tokenIndex 1297))) { $e = $callExp.cfe }) (ALT (types (ELEMENT_OPTIONS (= tokenIndex 1303))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1305))) (expr (ELEMENT_OPTIONS (= tokenIndex 1307))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1309))) { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1315))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1317))) (listStructExp (ELEMENT_OPTIONS (= tokenIndex 1319))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1321))) { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1327))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1329))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 1337)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1343))) (listParams (ELEMENT_OPTIONS (= tokenIndex 1345))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1347))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 1353))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 1359))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 1365))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 1371))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1377))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1379))) (COUNT (ELEMENT_OPTIONS (= tokenIndex 1381))) { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1387))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1389))) (ISEMPTY (ELEMENT_OPTIONS (= tokenIndex 1391))) { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 1397))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 23)}? (ELEMENT_OPTIONS (= p 23))) (= op (SET (SUB_IG (ELEMENT_OPTIONS (= tokenIndex 1132))) (SUM_IG (ELEMENT_OPTIONS (= tokenIndex 1134))))) (expr (ELEMENT_OPTIONS (= tokenIndex 1137) (= p 24))) { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 22)}? (ELEMENT_OPTIONS (= p 22))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 1150))) (DIV (ELEMENT_OPTIONS (= tokenIndex 1152))) (MOD (ELEMENT_OPTIONS (= tokenIndex 1154))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1159) (= p 23)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 1172))) (SUB (ELEMENT_OPTIONS (= tokenIndex 1174))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1179) (= p 22)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 1192))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1194))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1199) (= p 21)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 1212))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1214))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1219) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 1232))) (DIF (ELEMENT_OPTIONS (= tokenIndex 1234))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1239) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 1251)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1255) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 1267)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1271) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-09-07 12:54:20:274 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=1422> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1414> expr<tokenIndex=1416> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-09-07 12:54:20:278 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1422))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1414))) (expr (ELEMENT_OPTIONS (= tokenIndex 1416))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-09-07 12:54:20:280 left-recursion LogManager.java:25 listAccessArray returns [[]interface{} l]
    :   ( {} CORIZQ<tokenIndex=1449> expr<tokenIndex=1451> CORDER<tokenIndex=1453> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=1439> expr<tokenIndex=1441> CORDER<tokenIndex=1443> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-09-07 12:54:20:289 grammar LogManager.java:25 added: (RULE listAccessArray (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1449))) (expr (ELEMENT_OPTIONS (= tokenIndex 1451))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1453))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1439))) (expr (ELEMENT_OPTIONS (= tokenIndex 1441))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1443))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-09-07 12:54:20:292 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=1516> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> CORIZQ<tokenIndex=1472> expr<tokenIndex=1474> CORDER<tokenIndex=1476> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> PUNTO<tokenIndex=1488> ID<tokenIndex=1490> { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> types<tokenIndex=1502> IG<tokenIndex=1504> CORIZQ<tokenIndex=1506> expr<tokenIndex=1508> CORDER<tokenIndex=1510> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-09-07 12:54:20:334 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1516))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1472))) (expr (ELEMENT_OPTIONS (= tokenIndex 1474))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1476))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1488))) (ID (ELEMENT_OPTIONS (= tokenIndex 1490))) { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (types (ELEMENT_OPTIONS (= tokenIndex 1502))) (IG (ELEMENT_OPTIONS (= tokenIndex 1504))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1506))) (expr (ELEMENT_OPTIONS (= tokenIndex 1508))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1510))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-09-07 12:54:20:338 left-recursion LogManager.java:25 exprComa returns [interfaces.Expression t]
    :   ( {} expr<tokenIndex=1545> { $t = $expr.e } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> op=COMA<tokenIndex=1535> right=expr<tokenIndex=1539> { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }
        )*
    ;
2023-09-07 12:54:20:342 grammar LogManager.java:25 added: (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1545))) { $t = $expr.e })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (= op (COMA (ELEMENT_OPTIONS (= tokenIndex 1535)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1539)))) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }))))))
2023-09-07 12:54:20:592 grammar LogManager.java:25 import INT=1
2023-09-07 12:54:20:592 grammar LogManager.java:25 import FLOAT=2
2023-09-07 12:54:20:598 grammar LogManager.java:25 import BOOL=3
2023-09-07 12:54:20:599 grammar LogManager.java:25 import STR=4
2023-09-07 12:54:20:600 grammar LogManager.java:25 import CHAR=5
2023-09-07 12:54:20:600 grammar LogManager.java:25 import VAR=6
2023-09-07 12:54:20:600 grammar LogManager.java:25 import LET=7
2023-09-07 12:54:20:600 grammar LogManager.java:25 import VOID=8
2023-09-07 12:54:20:600 grammar LogManager.java:25 import TRU=9
2023-09-07 12:54:20:600 grammar LogManager.java:25 import FAL=10
2023-09-07 12:54:20:600 grammar LogManager.java:25 import PRINT=11
2023-09-07 12:54:20:600 grammar LogManager.java:25 import IF=12
2023-09-07 12:54:20:600 grammar LogManager.java:25 import ELSE=13
2023-09-07 12:54:20:601 grammar LogManager.java:25 import WHILE=14
2023-09-07 12:54:20:602 grammar LogManager.java:25 import FOR=15
2023-09-07 12:54:20:602 grammar LogManager.java:25 import IN=16
2023-09-07 12:54:20:602 grammar LogManager.java:25 import SWITCH=17
2023-09-07 12:54:20:602 grammar LogManager.java:25 import CASE=18
2023-09-07 12:54:20:602 grammar LogManager.java:25 import DEFAULT=19
2023-09-07 12:54:20:609 grammar LogManager.java:25 import BREAK=20
2023-09-07 12:54:20:611 grammar LogManager.java:25 import RETURN=21
2023-09-07 12:54:20:612 grammar LogManager.java:25 import CONTINUE=22
2023-09-07 12:54:20:612 grammar LogManager.java:25 import GUARD=23
2023-09-07 12:54:20:612 grammar LogManager.java:25 import FUNC=24
2023-09-07 12:54:20:612 grammar LogManager.java:25 import NIL=25
2023-09-07 12:54:20:613 grammar LogManager.java:25 import STRUCT=26
2023-09-07 12:54:20:613 grammar LogManager.java:25 import MUTATING=27
2023-09-07 12:54:20:613 grammar LogManager.java:25 import SELF=28
2023-09-07 12:54:20:613 grammar LogManager.java:25 import INOUT=29
2023-09-07 12:54:20:614 grammar LogManager.java:25 import APPEND=30
2023-09-07 12:54:20:614 grammar LogManager.java:25 import REMOVELAST=31
2023-09-07 12:54:20:614 grammar LogManager.java:25 import REMOVE=32
2023-09-07 12:54:20:614 grammar LogManager.java:25 import AT=33
2023-09-07 12:54:20:620 grammar LogManager.java:25 import ISEMPTY=34
2023-09-07 12:54:20:620 grammar LogManager.java:25 import COUNT=35
2023-09-07 12:54:20:620 grammar LogManager.java:25 import NUMBER=36
2023-09-07 12:54:20:620 grammar LogManager.java:25 import STRING=37
2023-09-07 12:54:20:620 grammar LogManager.java:25 import ID=38
2023-09-07 12:54:20:620 grammar LogManager.java:25 import DIF=39
2023-09-07 12:54:20:621 grammar LogManager.java:25 import IG_IG=40
2023-09-07 12:54:20:621 grammar LogManager.java:25 import NOT=41
2023-09-07 12:54:20:621 grammar LogManager.java:25 import OR=42
2023-09-07 12:54:20:621 grammar LogManager.java:25 import AND=43
2023-09-07 12:54:20:621 grammar LogManager.java:25 import IG=44
2023-09-07 12:54:20:622 grammar LogManager.java:25 import MAY_IG=45
2023-09-07 12:54:20:622 grammar LogManager.java:25 import MEN_IG=46
2023-09-07 12:54:20:626 grammar LogManager.java:25 import SUM_IG=47
2023-09-07 12:54:20:627 grammar LogManager.java:25 import SUB_IG=48
2023-09-07 12:54:20:627 grammar LogManager.java:25 import MAYOR=49
2023-09-07 12:54:20:627 grammar LogManager.java:25 import MENOR=50
2023-09-07 12:54:20:627 grammar LogManager.java:25 import MUL=51
2023-09-07 12:54:20:627 grammar LogManager.java:25 import DIV=52
2023-09-07 12:54:20:627 grammar LogManager.java:25 import ADD=53
2023-09-07 12:54:20:627 grammar LogManager.java:25 import SUB=54
2023-09-07 12:54:20:627 grammar LogManager.java:25 import MOD=55
2023-09-07 12:54:20:627 grammar LogManager.java:25 import PARIZQ=56
2023-09-07 12:54:20:627 grammar LogManager.java:25 import PARDER=57
2023-09-07 12:54:20:627 grammar LogManager.java:25 import LLAVEIZQ=58
2023-09-07 12:54:20:627 grammar LogManager.java:25 import LLAVEDER=59
2023-09-07 12:54:20:628 grammar LogManager.java:25 import D_PTS=60
2023-09-07 12:54:20:628 grammar LogManager.java:25 import CORIZQ=61
2023-09-07 12:54:20:628 grammar LogManager.java:25 import CORDER=62
2023-09-07 12:54:20:628 grammar LogManager.java:25 import COMA=63
2023-09-07 12:54:20:628 grammar LogManager.java:25 import PUNTO=64
2023-09-07 12:54:20:628 grammar LogManager.java:25 import COMILLA=65
2023-09-07 12:54:20:629 grammar LogManager.java:25 import FLECHA=66
2023-09-07 12:54:20:629 grammar LogManager.java:25 import GUIONBAJO=67
2023-09-07 12:54:20:629 grammar LogManager.java:25 import AMP=68
2023-09-07 12:54:20:629 grammar LogManager.java:25 import WHITESPACE=69
2023-09-07 12:54:20:629 grammar LogManager.java:25 import COMMENT=70
2023-09-07 12:54:20:629 grammar LogManager.java:25 import LINE_COMMENT=71
2023-09-07 12:54:20:629 grammar LogManager.java:25 import 'Int'=1
2023-09-07 12:54:20:629 grammar LogManager.java:25 import 'Float'=2
2023-09-07 12:54:20:629 grammar LogManager.java:25 import 'Bool'=3
2023-09-07 12:54:20:629 grammar LogManager.java:25 import 'String'=4
2023-09-07 12:54:20:629 grammar LogManager.java:25 import 'Character'=5
2023-09-07 12:54:20:629 grammar LogManager.java:25 import 'var'=6
2023-09-07 12:54:20:629 grammar LogManager.java:25 import 'let'=7
2023-09-07 12:54:20:630 grammar LogManager.java:25 import 'void'=8
2023-09-07 12:54:20:630 grammar LogManager.java:25 import 'true'=9
2023-09-07 12:54:20:630 grammar LogManager.java:25 import 'false'=10
2023-09-07 12:54:20:630 grammar LogManager.java:25 import 'print'=11
2023-09-07 12:54:20:630 grammar LogManager.java:25 import 'if'=12
2023-09-07 12:54:20:630 grammar LogManager.java:25 import 'else'=13
2023-09-07 12:54:20:630 grammar LogManager.java:25 import 'while'=14
2023-09-07 12:54:20:630 grammar LogManager.java:25 import 'for'=15
2023-09-07 12:54:20:632 grammar LogManager.java:25 import 'in'=16
2023-09-07 12:54:20:632 grammar LogManager.java:25 import 'switch'=17
2023-09-07 12:54:20:632 grammar LogManager.java:25 import 'case'=18
2023-09-07 12:54:20:632 grammar LogManager.java:25 import 'default'=19
2023-09-07 12:54:20:632 grammar LogManager.java:25 import 'break'=20
2023-09-07 12:54:20:632 grammar LogManager.java:25 import 'return'=21
2023-09-07 12:54:20:632 grammar LogManager.java:25 import 'continue'=22
2023-09-07 12:54:20:635 grammar LogManager.java:25 import 'guard'=23
2023-09-07 12:54:20:635 grammar LogManager.java:25 import 'func'=24
2023-09-07 12:54:20:637 grammar LogManager.java:25 import 'nil'=25
2023-09-07 12:54:20:637 grammar LogManager.java:25 import 'struct'=26
2023-09-07 12:54:20:637 grammar LogManager.java:25 import 'mutating'=27
2023-09-07 12:54:20:637 grammar LogManager.java:25 import 'self'=28
2023-09-07 12:54:20:637 grammar LogManager.java:25 import 'inout'=29
2023-09-07 12:54:20:637 grammar LogManager.java:25 import 'append'=30
2023-09-07 12:54:20:637 grammar LogManager.java:25 import 'removeLast'=31
2023-09-07 12:54:20:637 grammar LogManager.java:25 import 'remove'=32
2023-09-07 12:54:20:637 grammar LogManager.java:25 import 'at'=33
2023-09-07 12:54:20:637 grammar LogManager.java:25 import 'isEmpty'=34
2023-09-07 12:54:20:638 grammar LogManager.java:25 import 'count'=35
2023-09-07 12:54:20:638 grammar LogManager.java:25 import '!='=39
2023-09-07 12:54:20:638 grammar LogManager.java:25 import '=='=40
2023-09-07 12:54:20:638 grammar LogManager.java:25 import '!'=41
2023-09-07 12:54:20:638 grammar LogManager.java:25 import '||'=42
2023-09-07 12:54:20:638 grammar LogManager.java:25 import '&&'=43
2023-09-07 12:54:20:638 grammar LogManager.java:25 import '='=44
2023-09-07 12:54:20:638 grammar LogManager.java:25 import '>='=45
2023-09-07 12:54:20:638 grammar LogManager.java:25 import '<='=46
2023-09-07 12:54:20:638 grammar LogManager.java:25 import '+='=47
2023-09-07 12:54:20:638 grammar LogManager.java:25 import '-='=48
2023-09-07 12:54:20:638 grammar LogManager.java:25 import '>'=49
2023-09-07 12:54:20:639 grammar LogManager.java:25 import '<'=50
2023-09-07 12:54:20:639 grammar LogManager.java:25 import '*'=51
2023-09-07 12:54:20:639 grammar LogManager.java:25 import '/'=52
2023-09-07 12:54:20:639 grammar LogManager.java:25 import '+'=53
2023-09-07 12:54:20:658 grammar LogManager.java:25 import '-'=54
2023-09-07 12:54:20:659 grammar LogManager.java:25 import '%'=55
2023-09-07 12:54:20:660 grammar LogManager.java:25 import '('=56
2023-09-07 12:54:20:660 grammar LogManager.java:25 import ')'=57
2023-09-07 12:54:20:660 grammar LogManager.java:25 import '{'=58
2023-09-07 12:54:20:660 grammar LogManager.java:25 import '}'=59
2023-09-07 12:54:20:663 grammar LogManager.java:25 import ':'=60
2023-09-07 12:54:20:663 grammar LogManager.java:25 import '['=61
2023-09-07 12:54:20:663 grammar LogManager.java:25 import ']'=62
2023-09-07 12:54:20:671 grammar LogManager.java:25 import ','=63
2023-09-07 12:54:20:671 grammar LogManager.java:25 import '.'=64
2023-09-07 12:54:20:672 grammar LogManager.java:25 import '"'=65
2023-09-07 12:54:20:672 grammar LogManager.java:25 import '->'=66
2023-09-07 12:54:20:672 grammar LogManager.java:25 import '_'=67
2023-09-07 12:54:20:672 grammar LogManager.java:25 import '&'=68
2023-09-07 12:54:20:679 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO=64, COMILLA=65, FLECHA=66, GUIONBAJO=67, AMP=68, WHITESPACE=69, COMMENT=70, LINE_COMMENT=71, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, '.'=64, '"'=65, '->'=66, '_'=67, '&'=68}
2023-09-07 12:54:20:688 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO=64, COMILLA=65, FLECHA=66, GUIONBAJO=67, AMP=68, WHITESPACE=69, COMMENT=70, LINE_COMMENT=71}
2023-09-07 12:54:20:689 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, '.'=64, '"'=65, '->'=66, '_'=67, '&'=68}
2023-09-07 12:54:21:062 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-07 12:54:21:066 LL1 LogManager.java:25 look=[{6..7, 11..12, 14..15, 20..24, 26, 38}, {<EOF>, 59}]
2023-09-07 12:54:21:067 LL1 LogManager.java:25 LL(1)? true
2023-09-07 12:54:21:067 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-09-07 12:54:21:068 LL1 LogManager.java:25 look=[11, 12, {6..7}, 14, 38, 15, 23, 20, 22, 38, 26, 21, 24, 38]
2023-09-07 12:54:21:068 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:069 LL1 LogManager.java:25 
DECISION 2 in rule printstmt
2023-09-07 12:54:21:069 LL1 LogManager.java:25 look=[11, 11]
2023-09-07 12:54:21:069 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:069 LL1 LogManager.java:25 
DECISION 3 in rule ifstmt
2023-09-07 12:54:21:070 LL1 LogManager.java:25 look=[12, 12, 12]
2023-09-07 12:54:21:070 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:070 LL1 LogManager.java:25 
DECISION 4 in rule declarationstmt
2023-09-07 12:54:21:070 LL1 LogManager.java:25 look=[6, 6, 6, 7, 7, 7]
2023-09-07 12:54:21:070 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:070 LL1 LogManager.java:25 
DECISION 5 in rule assignstmt
2023-09-07 12:54:21:070 LL1 LogManager.java:25 look=[38, 38, 38, 38]
2023-09-07 12:54:21:070 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:070 LL1 LogManager.java:25 
DECISION 6 in rule forstmt
2023-09-07 12:54:21:071 LL1 LogManager.java:25 look=[15, 15]
2023-09-07 12:54:21:071 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:071 LL1 LogManager.java:25 
DECISION 7 in rule returnstmt
2023-09-07 12:54:21:071 LL1 LogManager.java:25 look=[21, 21]
2023-09-07 12:54:21:071 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:071 LL1 LogManager.java:25 
DECISION 8 in rule fnArray
2023-09-07 12:54:21:071 LL1 LogManager.java:25 look=[38, 38, 38]
2023-09-07 12:54:21:071 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:071 LL1 LogManager.java:25 
DECISION 9 in rule listStructDec
2023-09-07 12:54:21:071 LL1 LogManager.java:25 look=[{6..7}, {6..7}, null]
2023-09-07 12:54:21:071 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:071 LL1 LogManager.java:25 
DECISION 10 in rule listStructDec
2023-09-07 12:54:21:071 LL1 LogManager.java:25 look=[63, {6..7}]
2023-09-07 12:54:21:105 LL1 LogManager.java:25 LL(1)? true
2023-09-07 12:54:21:105 LL1 LogManager.java:25 
DECISION 11 in rule listStructDec
2023-09-07 12:54:21:105 LL1 LogManager.java:25 look=[63, {6..7}]
2023-09-07 12:54:21:105 LL1 LogManager.java:25 LL(1)? true
2023-09-07 12:54:21:105 LL1 LogManager.java:25 
DECISION 12 in rule listStructDec
2023-09-07 12:54:21:105 LL1 LogManager.java:25 look=[63, {6..7}]
2023-09-07 12:54:21:105 LL1 LogManager.java:25 LL(1)? true
2023-09-07 12:54:21:107 LL1 LogManager.java:25 
DECISION 13 in rule listStructDec
2023-09-07 12:54:21:111 LL1 LogManager.java:25 look=[60, 44]
2023-09-07 12:54:21:111 LL1 LogManager.java:25 LL(1)? true
2023-09-07 12:54:21:111 LL1 LogManager.java:25 
DECISION 14 in rule listStructDec
2023-09-07 12:54:21:111 LL1 LogManager.java:25 look=[null, null, null]
2023-09-07 12:54:21:111 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:111 LL1 LogManager.java:25 
DECISION 15 in rule listStructDec
2023-09-07 12:54:21:112 LL1 LogManager.java:25 look=[null, 59]
2023-09-07 12:54:21:112 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:112 LL1 LogManager.java:25 
DECISION 16 in rule listStructExp
2023-09-07 12:54:21:112 LL1 LogManager.java:25 look=[38, null]
2023-09-07 12:54:21:112 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:112 LL1 LogManager.java:25 
DECISION 17 in rule listStructExp
2023-09-07 12:54:21:114 LL1 LogManager.java:25 look=[null, 57]
2023-09-07 12:54:21:114 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:114 LL1 LogManager.java:25 
DECISION 18 in rule listAccessStruct
2023-09-07 12:54:21:114 LL1 LogManager.java:25 look=[null, 44]
2023-09-07 12:54:21:114 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:116 LL1 LogManager.java:25 
DECISION 19 in rule fnstmt
2023-09-07 12:54:21:118 LL1 LogManager.java:25 look=[24, 24]
2023-09-07 12:54:21:118 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:119 LL1 LogManager.java:25 
DECISION 20 in rule listParamsFunc
2023-09-07 12:54:21:120 LL1 LogManager.java:25 look=[{38, 67}, null]
2023-09-07 12:54:21:120 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:120 LL1 LogManager.java:25 
DECISION 21 in rule listParamsFunc
2023-09-07 12:54:21:121 LL1 LogManager.java:25 look=[null, 57]
2023-09-07 12:54:21:121 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:121 LL1 LogManager.java:25 
DECISION 22 in rule parametro
2023-09-07 12:54:21:121 LL1 LogManager.java:25 look=[38, 38, {38, 67}, {38, 67}]
2023-09-07 12:54:21:121 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:121 LL1 LogManager.java:25 
DECISION 23 in rule listParamsCall
2023-09-07 12:54:21:122 LL1 LogManager.java:25 look=[{1..4, 9..10, 25..26, 36..38, 41, 54, 56, 61, 65}, null]
2023-09-07 12:54:21:122 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:122 LL1 LogManager.java:25 
DECISION 24 in rule listParamsCall
2023-09-07 12:54:21:122 LL1 LogManager.java:25 look=[null, 57]
2023-09-07 12:54:21:122 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:122 LL1 LogManager.java:25 
DECISION 25 in rule types
2023-09-07 12:54:21:122 LL1 LogManager.java:25 look=[1, 2, 4, 3, 61, 65, 25, 26, 38]
2023-09-07 12:54:21:122 LL1 LogManager.java:25 LL(1)? true
2023-09-07 12:54:21:122 LL1 LogManager.java:25 
DECISION 26 in rule expr
2023-09-07 12:54:21:122 LL1 LogManager.java:25 look=[54, 41, 56, 38, {1..4, 25..26, 38, 61, 65}, 38, 61, 38, 61, 36, 37, 9, 10, 38, 38, 25]
2023-09-07 12:54:21:122 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:122 LL1 LogManager.java:25 
DECISION 27 in rule expr
2023-09-07 12:54:21:124 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null]
2023-09-07 12:54:21:124 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:124 LL1 LogManager.java:25 
DECISION 28 in rule expr
2023-09-07 12:54:21:129 LL1 LogManager.java:25 look=[null, null]
2023-09-07 12:54:21:129 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:129 LL1 LogManager.java:25 
DECISION 29 in rule listParams
2023-09-07 12:54:21:129 LL1 LogManager.java:25 look=[null, 62]
2023-09-07 12:54:21:130 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:130 LL1 LogManager.java:25 
DECISION 30 in rule listAccessArray
2023-09-07 12:54:21:130 LL1 LogManager.java:25 look=[null, 44]
2023-09-07 12:54:21:130 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:130 LL1 LogManager.java:25 
DECISION 31 in rule listArray
2023-09-07 12:54:21:130 LL1 LogManager.java:25 look=[null, null, null]
2023-09-07 12:54:21:130 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:130 LL1 LogManager.java:25 
DECISION 32 in rule listArray
2023-09-07 12:54:21:131 LL1 LogManager.java:25 look=[null, null]
2023-09-07 12:54:21:132 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:132 LL1 LogManager.java:25 
DECISION 33 in rule exprComa
2023-09-07 12:54:21:132 LL1 LogManager.java:25 look=[null, 57]
2023-09-07 12:54:21:132 LL1 LogManager.java:25 LL(1)? false
2023-09-07 12:54:21:155 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-07 12:54:21:337 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-09-07 12:54:21:338 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-09-07 12:54:21:341 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-09-07 12:54:21:350 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-09-07 12:54:21:350 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-09-07 12:54:21:360 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-09-07 12:54:21:360 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,33:13]
2023-09-07 12:54:21:360 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,33:27]
2023-09-07 12:54:21:368 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-09-07 12:54:21:368 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:14]
2023-09-07 12:54:21:369 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,40:22].[@-1,20:23='prnt',<0>,40:32]
2023-09-07 12:54:21:369 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-09-07 12:54:21:370 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:11]
2023-09-07 12:54:21:370 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,41:19].[@-1,17:22='ifinst',<0>,41:26]
2023-09-07 12:54:21:371 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-09-07 12:54:21:371 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:20]
2023-09-07 12:54:21:371 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,42:28].[@-1,26:28='dec',<0>,42:44]
2023-09-07 12:54:21:372 action-translator LogManager.java:25 translate  $inst = $whilestmt.whl 
2023-09-07 12:54:21:372 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-09-07 12:54:21:372 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:22='whl',<0>,43:32]
2023-09-07 12:54:21:374 action-translator LogManager.java:25 translate  $inst = $assignstmt.asg 
2023-09-07 12:54:21:374 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:15]
2023-09-07 12:54:21:379 action-translator LogManager.java:25 qattr [@-1,10:19='assignstmt',<0>,44:23].[@-1,21:23='asg',<0>,44:34]
2023-09-07 12:54:21:379 action-translator LogManager.java:25 translate  $inst = $forstmt.fr 
2023-09-07 12:54:21:379 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:12]
2023-09-07 12:54:21:380 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,45:20].[@-1,18:19='fr',<0>,45:28]
2023-09-07 12:54:21:380 action-translator LogManager.java:25 translate  $inst = $guardstmt.grd 
2023-09-07 12:54:21:380 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:14]
2023-09-07 12:54:21:381 action-translator LogManager.java:25 qattr [@-1,10:18='guardstmt',<0>,46:22].[@-1,20:22='grd',<0>,46:32]
2023-09-07 12:54:21:383 action-translator LogManager.java:25 translate  $inst = $breakstmt.brk 
2023-09-07 12:54:21:384 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:14]
2023-09-07 12:54:21:384 action-translator LogManager.java:25 qattr [@-1,10:18='breakstmt',<0>,47:22].[@-1,20:22='brk',<0>,47:32]
2023-09-07 12:54:21:388 action-translator LogManager.java:25 translate  $inst = $continuestmt.cnt 
2023-09-07 12:54:21:388 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:17]
2023-09-07 12:54:21:388 action-translator LogManager.java:25 qattr [@-1,10:21='continuestmt',<0>,48:25].[@-1,23:25='cnt',<0>,48:38]
2023-09-07 12:54:21:390 action-translator LogManager.java:25 translate  $inst = $fnArray.p 
2023-09-07 12:54:21:390 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,49:12]
2023-09-07 12:54:21:390 action-translator LogManager.java:25 qattr [@-1,10:16='fnArray',<0>,49:20].[@-1,18:18='p',<0>,49:28]
2023-09-07 12:54:21:397 action-translator LogManager.java:25 translate  $inst = $structCreation.dec 
2023-09-07 12:54:21:399 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,50:19]
2023-09-07 12:54:21:399 action-translator LogManager.java:25 qattr [@-1,10:23='structCreation',<0>,50:27].[@-1,25:27='dec',<0>,50:42]
2023-09-07 12:54:21:400 action-translator LogManager.java:25 translate  $inst = $returnstmt.ret 
2023-09-07 12:54:21:400 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,51:15]
2023-09-07 12:54:21:400 action-translator LogManager.java:25 qattr [@-1,10:19='returnstmt',<0>,51:23].[@-1,21:23='ret',<0>,51:34]
2023-09-07 12:54:21:401 action-translator LogManager.java:25 translate  $inst = $fnstmt.fn 
2023-09-07 12:54:21:401 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,52:11]
2023-09-07 12:54:21:401 action-translator LogManager.java:25 qattr [@-1,10:15='fnstmt',<0>,52:19].[@-1,17:18='fn',<0>,52:26]
2023-09-07 12:54:21:401 action-translator LogManager.java:25 translate  $inst = $callFunction.cf 
2023-09-07 12:54:21:401 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,53:17]
2023-09-07 12:54:21:401 action-translator LogManager.java:25 qattr [@-1,10:21='callFunction',<0>,53:25].[@-1,23:24='cf',<0>,53:38]
2023-09-07 12:54:21:417 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-09-07 12:54:21:417 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,57:29]
2023-09-07 12:54:21:417 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,57:59].[@-1,38:41='line',<0>,57:65]
2023-09-07 12:54:21:429 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,57:71].[@-1,50:52='pos',<0>,57:77]
2023-09-07 12:54:21:429 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,57:82].[@-1,60:60='e',<0>,57:87]
2023-09-07 12:54:21:437 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)
2023-09-07 12:54:21:438 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,58:33]
2023-09-07 12:54:21:438 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,58:63].[@-1,38:41='line',<0>,58:69]
2023-09-07 12:54:21:438 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,58:75].[@-1,50:52='pos',<0>,58:81]
2023-09-07 12:54:21:439 action-translator LogManager.java:25 qattr [@-1,55:62='exprComa',<0>,58:86].[@-1,64:64='t',<0>,58:95]
2023-09-07 12:54:21:449 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-09-07 12:54:21:450 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,62:40]
2023-09-07 12:54:21:450 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,62:69].[@-1,34:37='line',<0>,62:72]
2023-09-07 12:54:21:450 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,62:79].[@-1,44:46='pos',<0>,62:82]
2023-09-07 12:54:21:469 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,62:88].[@-1,55:55='e',<0>,62:93]
2023-09-07 12:54:21:469 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,62:97].[@-1,65:67='blk',<0>,62:103]
2023-09-07 12:54:21:471 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) 
2023-09-07 12:54:21:471 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,63:75]
2023-09-07 12:54:21:471 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,63:104].[@-1,34:37='line',<0>,63:107]
2023-09-07 12:54:21:474 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,63:114].[@-1,44:46='pos',<0>,63:117]
2023-09-07 12:54:21:474 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,63:123].[@-1,55:55='e',<0>,63:128]
2023-09-07 12:54:21:477 action-translator LogManager.java:25 qattr [@-1,59:60='e1',<0>,63:132].[@-1,62:64='blk',<0>,63:135]
2023-09-07 12:54:21:478 action-translator LogManager.java:25 qattr [@-1,68:69='e2',<0>,63:141].[@-1,71:73='blk',<0>,63:144]
2023-09-07 12:54:21:479 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) 
2023-09-07 12:54:21:479 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,64:52]
2023-09-07 12:54:21:479 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,64:81].[@-1,34:37='line',<0>,64:84]
2023-09-07 12:54:21:480 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,64:91].[@-1,44:46='pos',<0>,64:94]
2023-09-07 12:54:21:480 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,64:100].[@-1,55:55='e',<0>,64:105]
2023-09-07 12:54:21:481 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,64:109].[@-1,65:67='blk',<0>,64:115]
2023-09-07 12:54:21:481 action-translator LogManager.java:25 qattr [@-1,85:90='ifstmt',<0>,64:135].[@-1,92:97='ifinst',<0>,64:142]
2023-09-07 12:54:21:483 action-translator LogManager.java:25 translate  $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-09-07 12:54:21:483 action-translator LogManager.java:25 attr [@-1,2:4='whl',<0>,68:43]
2023-09-07 12:54:21:484 action-translator LogManager.java:25 qattr [@-1,31:35='WHILE',<0>,68:72].[@-1,37:40='line',<0>,68:78]
2023-09-07 12:54:21:484 action-translator LogManager.java:25 qattr [@-1,44:48='WHILE',<0>,68:85].[@-1,50:52='pos',<0>,68:91]
2023-09-07 12:54:21:484 action-translator LogManager.java:25 qattr [@-1,56:59='expr',<0>,68:97].[@-1,61:61='e',<0>,68:102]
2023-09-07 12:54:21:485 action-translator LogManager.java:25 qattr [@-1,65:69='block',<0>,68:106].[@-1,71:73='blk',<0>,68:112]
2023-09-07 12:54:21:494 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) 
2023-09-07 12:54:21:494 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,72:32]
2023-09-07 12:54:21:494 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,72:67].[@-1,41:44='line',<0>,72:71]
2023-09-07 12:54:21:494 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,72:78].[@-1,52:54='pos',<0>,72:82]
2023-09-07 12:54:21:495 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,72:88].[@-1,61:64='text',<0>,72:91]
2023-09-07 12:54:21:498 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,72:98].[@-1,74:75='ty',<0>,72:104]
2023-09-07 12:54:21:498 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,72:109].[@-1,84:84='e',<0>,72:114]
2023-09-07 12:54:21:499 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) 
2023-09-07 12:54:21:499 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,73:19]
2023-09-07 12:54:21:499 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,73:54].[@-1,41:44='line',<0>,73:58]
2023-09-07 12:54:21:500 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,73:65].[@-1,52:54='pos',<0>,73:69]
2023-09-07 12:54:21:500 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,73:75].[@-1,61:64='text',<0>,73:78]
2023-09-07 12:54:21:500 action-translator LogManager.java:25 qattr [@-1,89:92='expr',<0>,73:106].[@-1,94:94='e',<0>,73:111]
2023-09-07 12:54:21:502 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) 
2023-09-07 12:54:21:502 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,74:24]
2023-09-07 12:54:21:502 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,74:59].[@-1,41:44='line',<0>,74:63]
2023-09-07 12:54:21:502 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,74:70].[@-1,52:54='pos',<0>,74:74]
2023-09-07 12:54:21:503 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,74:80].[@-1,61:64='text',<0>,74:83]
2023-09-07 12:54:21:503 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,74:90].[@-1,74:75='ty',<0>,74:96]
2023-09-07 12:54:21:504 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) 
2023-09-07 12:54:21:504 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,75:32]
2023-09-07 12:54:21:504 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,75:67].[@-1,41:44='line',<0>,75:71]
2023-09-07 12:54:21:505 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,75:78].[@-1,52:54='pos',<0>,75:82]
2023-09-07 12:54:21:506 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,75:88].[@-1,61:64='text',<0>,75:91]
2023-09-07 12:54:21:506 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,75:98].[@-1,74:75='ty',<0>,75:104]
2023-09-07 12:54:21:507 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,75:109].[@-1,84:84='e',<0>,75:114]
2023-09-07 12:54:21:508 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) 
2023-09-07 12:54:21:508 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,76:24]
2023-09-07 12:54:21:509 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,76:59].[@-1,41:44='line',<0>,76:63]
2023-09-07 12:54:21:509 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,76:70].[@-1,52:54='pos',<0>,76:74]
2023-09-07 12:54:21:511 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,76:80].[@-1,61:64='text',<0>,76:83]
2023-09-07 12:54:21:511 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,76:90].[@-1,74:75='ty',<0>,76:96]
2023-09-07 12:54:21:532 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) 
2023-09-07 12:54:21:532 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,77:19]
2023-09-07 12:54:21:532 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,77:54].[@-1,41:44='line',<0>,77:58]
2023-09-07 12:54:21:532 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,77:65].[@-1,52:54='pos',<0>,77:69]
2023-09-07 12:54:21:535 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,77:75].[@-1,61:64='text',<0>,77:78]
2023-09-07 12:54:21:535 action-translator LogManager.java:25 qattr [@-1,89:92='expr',<0>,77:106].[@-1,94:94='e',<0>,77:111]
2023-09-07 12:54:21:541 action-translator LogManager.java:25 translate  $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-07 12:54:21:542 action-translator LogManager.java:25 attr [@-1,2:4='asg',<0>,81:18]
2023-09-07 12:54:21:543 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,81:48].[@-1,35:38='line',<0>,81:51]
2023-09-07 12:54:21:544 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,81:58].[@-1,45:47='pos',<0>,81:61]
2023-09-07 12:54:21:550 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,81:67].[@-1,54:57='text',<0>,81:70]
2023-09-07 12:54:21:550 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,81:77].[@-1,66:66='e',<0>,81:82]
2023-09-07 12:54:21:551 action-translator LogManager.java:25 translate  $asg = instructions.NewStructAssign($listAccessStruct.start.GetLine(),$listAccessStruct.start.GetColumn(), $listAccessStruct.l, $expr.e) 
2023-09-07 12:54:21:552 action-translator LogManager.java:25 attr [@-1,2:4='asg',<0>,82:29]
2023-09-07 12:54:21:552 action-translator LogManager.java:25 qattr [@-1,38:53='listAccessStruct',<0>,82:65].[@-1,55:59='start',<0>,82:82]
2023-09-07 12:54:21:557 action-translator LogManager.java:25 qattr [@-1,72:87='listAccessStruct',<0>,82:99].[@-1,89:93='start',<0>,82:116]
2023-09-07 12:54:21:558 action-translator LogManager.java:25 qattr [@-1,109:124='listAccessStruct',<0>,82:136].[@-1,126:126='l',<0>,82:153]
2023-09-07 12:54:21:560 action-translator LogManager.java:25 qattr [@-1,130:133='expr',<0>,82:157].[@-1,135:135='e',<0>,82:162]
2023-09-07 12:54:21:563 action-translator LogManager.java:25 translate  $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); 
2023-09-07 12:54:21:565 action-translator LogManager.java:25 setAttr [@-1,2:4='asg',<0>,83:33] [@-1,7:89=' instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e)',<0>,83:38]
2023-09-07 12:54:21:565 action-translator LogManager.java:25 translate  instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e)
2023-09-07 12:54:21:565 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,83:68].[@-1,40:43='line',<0>,83:71]
2023-09-07 12:54:21:567 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,83:78].[@-1,50:52='pos',<0>,83:81]
2023-09-07 12:54:21:568 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,83:87].[@-1,59:62='text',<0>,83:90]
2023-09-07 12:54:21:568 action-translator LogManager.java:25 qattr [@-1,66:67='op',<0>,83:97].[@-1,69:72='text',<0>,83:100]
2023-09-07 12:54:21:569 action-translator LogManager.java:25 qattr [@-1,76:79='expr',<0>,83:107].[@-1,81:81='e',<0>,83:112]
2023-09-07 12:54:21:572 action-translator LogManager.java:25 translate  $asg = instructions.NewArrayAssign($ID.line, $ID.pos, $ID.text, $listAccessArray.l, $expr.e) 
2023-09-07 12:54:21:572 action-translator LogManager.java:25 attr [@-1,2:4='asg',<0>,84:31]
2023-09-07 12:54:21:573 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,84:66].[@-1,40:43='line',<0>,84:69]
2023-09-07 12:54:21:573 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,84:76].[@-1,50:52='pos',<0>,84:79]
2023-09-07 12:54:21:573 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,84:85].[@-1,59:62='text',<0>,84:88]
2023-09-07 12:54:21:574 action-translator LogManager.java:25 qattr [@-1,66:80='listAccessArray',<0>,84:95].[@-1,82:82='l',<0>,84:111]
2023-09-07 12:54:21:574 action-translator LogManager.java:25 qattr [@-1,86:89='expr',<0>,84:115].[@-1,91:91='e',<0>,84:120]
2023-09-07 12:54:21:581 action-translator LogManager.java:25 translate  $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); 
2023-09-07 12:54:21:582 action-translator LogManager.java:25 setAttr [@-1,2:3='fr',<0>,88:76] [@-1,6:88=' instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk)',<0>,88:80]
2023-09-07 12:54:21:582 action-translator LogManager.java:25 translate  instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk)
2023-09-07 12:54:21:582 action-translator LogManager.java:25 qattr [@-1,24:26='FOR',<0>,88:98].[@-1,28:31='line',<0>,88:102]
2023-09-07 12:54:21:584 action-translator LogManager.java:25 qattr [@-1,35:37='FOR',<0>,88:109].[@-1,39:41='pos',<0>,88:113]
2023-09-07 12:54:21:584 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,88:119].[@-1,48:51='text',<0>,88:122]
2023-09-07 12:54:21:585 action-translator LogManager.java:25 qattr [@-1,55:58='exp1',<0>,88:129].[@-1,60:60='e',<0>,88:134]
2023-09-07 12:54:21:587 action-translator LogManager.java:25 qattr [@-1,64:67='exp2',<0>,88:138].[@-1,69:69='e',<0>,88:143]
2023-09-07 12:54:21:587 action-translator LogManager.java:25 qattr [@-1,73:77='block',<0>,88:147].[@-1,79:81='blk',<0>,88:153]
2023-09-07 12:54:21:589 action-translator LogManager.java:25 translate  $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); 
2023-09-07 12:54:21:589 action-translator LogManager.java:25 setAttr [@-1,2:3='fr',<0>,89:43] [@-1,6:77=' instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk)',<0>,89:47]
2023-09-07 12:54:21:589 action-translator LogManager.java:25 translate  instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk)
2023-09-07 12:54:21:590 action-translator LogManager.java:25 qattr [@-1,22:24='FOR',<0>,89:63].[@-1,26:29='line',<0>,89:67]
2023-09-07 12:54:21:607 action-translator LogManager.java:25 qattr [@-1,33:35='FOR',<0>,89:74].[@-1,37:39='pos',<0>,89:78]
2023-09-07 12:54:21:608 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,89:84].[@-1,46:49='text',<0>,89:87]
2023-09-07 12:54:21:608 action-translator LogManager.java:25 qattr [@-1,53:56='expr',<0>,89:94].[@-1,58:58='e',<0>,89:99]
2023-09-07 12:54:21:609 action-translator LogManager.java:25 qattr [@-1,62:66='block',<0>,89:103].[@-1,68:70='blk',<0>,89:109]
2023-09-07 12:54:21:613 action-translator LogManager.java:25 translate  $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) 
2023-09-07 12:54:21:613 action-translator LogManager.java:25 attr [@-1,2:4='grd',<0>,93:44]
2023-09-07 12:54:21:613 action-translator LogManager.java:25 qattr [@-1,31:35='GUARD',<0>,93:73].[@-1,37:40='line',<0>,93:79]
2023-09-07 12:54:21:613 action-translator LogManager.java:25 qattr [@-1,44:48='GUARD',<0>,93:86].[@-1,50:52='pos',<0>,93:92]
2023-09-07 12:54:21:617 action-translator LogManager.java:25 qattr [@-1,56:59='expr',<0>,93:98].[@-1,61:61='e',<0>,93:103]
2023-09-07 12:54:21:617 action-translator LogManager.java:25 qattr [@-1,65:69='block',<0>,93:107].[@-1,71:73='blk',<0>,93:113]
2023-09-07 12:54:21:621 action-translator LogManager.java:25 translate  $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) 
2023-09-07 12:54:21:622 action-translator LogManager.java:25 attr [@-1,2:4='brk',<0>,98:10]
2023-09-07 12:54:21:622 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,98:39].[@-1,37:40='line',<0>,98:45]
2023-09-07 12:54:21:622 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,98:52].[@-1,50:52='pos',<0>,98:58]
2023-09-07 12:54:21:624 action-translator LogManager.java:25 translate  $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) 
2023-09-07 12:54:21:624 action-translator LogManager.java:25 attr [@-1,2:4='cnt',<0>,102:13]
2023-09-07 12:54:21:624 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,102:45].[@-1,43:46='line',<0>,102:54]
2023-09-07 12:54:21:625 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,102:61].[@-1,59:61='pos',<0>,102:70]
2023-09-07 12:54:21:629 action-translator LogManager.java:25 translate  $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) 
2023-09-07 12:54:21:629 action-translator LogManager.java:25 attr [@-1,2:4='ret',<0>,106:16]
2023-09-07 12:54:21:629 action-translator LogManager.java:25 qattr [@-1,32:37='RETURN',<0>,106:46].[@-1,39:42='line',<0>,106:53]
2023-09-07 12:54:21:630 action-translator LogManager.java:25 qattr [@-1,46:51='RETURN',<0>,106:60].[@-1,53:55='pos',<0>,106:67]
2023-09-07 12:54:21:630 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,106:73].[@-1,64:64='e',<0>,106:78]
2023-09-07 12:54:21:631 action-translator LogManager.java:25 translate  $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) 
2023-09-07 12:54:21:631 action-translator LogManager.java:25 attr [@-1,2:4='ret',<0>,107:11]
2023-09-07 12:54:21:631 action-translator LogManager.java:25 qattr [@-1,32:37='RETURN',<0>,107:41].[@-1,39:42='line',<0>,107:48]
2023-09-07 12:54:21:631 action-translator LogManager.java:25 qattr [@-1,46:51='RETURN',<0>,107:55].[@-1,53:55='pos',<0>,107:62]
2023-09-07 12:54:21:638 action-translator LogManager.java:25 translate  $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-07 12:54:21:638 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,111:39]
2023-09-07 12:54:21:638 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,111:67].[@-1,33:36='line',<0>,111:70]
2023-09-07 12:54:21:640 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,111:77].[@-1,43:45='pos',<0>,111:80]
2023-09-07 12:54:21:640 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,111:86].[@-1,52:55='text',<0>,111:89]
2023-09-07 12:54:21:640 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,111:96].[@-1,64:64='e',<0>,111:101]
2023-09-07 12:54:21:641 action-translator LogManager.java:25 translate  $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-07 12:54:21:641 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,112:48]
2023-09-07 12:54:21:641 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,112:78].[@-1,35:38='line',<0>,112:81]
2023-09-07 12:54:21:641 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,112:88].[@-1,45:47='pos',<0>,112:91]
2023-09-07 12:54:21:642 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,112:97].[@-1,54:57='text',<0>,112:100]
2023-09-07 12:54:21:642 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,112:107].[@-1,66:66='e',<0>,112:112]
2023-09-07 12:54:21:644 action-translator LogManager.java:25 translate  $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) 
2023-09-07 12:54:21:644 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,113:38]
2023-09-07 12:54:21:644 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,113:70].[@-1,37:40='line',<0>,113:73]
2023-09-07 12:54:21:644 action-translator LogManager.java:25 qattr [@-1,44:45='ID',<0>,113:80].[@-1,47:49='pos',<0>,113:83]
2023-09-07 12:54:21:645 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,113:89].[@-1,56:59='text',<0>,113:92]
2023-09-07 12:54:21:647 action-translator LogManager.java:25 translate  $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) 
2023-09-07 12:54:21:647 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,117:46]
2023-09-07 12:54:21:647 action-translator LogManager.java:25 qattr [@-1,32:37='STRUCT',<0>,117:76].[@-1,39:42='line',<0>,117:83]
2023-09-07 12:54:21:648 action-translator LogManager.java:25 qattr [@-1,46:51='STRUCT',<0>,117:90].[@-1,53:55='pos',<0>,117:97]
2023-09-07 12:54:21:648 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,117:103].[@-1,62:65='text',<0>,117:106]
2023-09-07 12:54:21:648 action-translator LogManager.java:25 qattr [@-1,69:81='listStructDec',<0>,117:113].[@-1,83:83='l',<0>,117:127]
2023-09-07 12:54:21:652 action-translator LogManager.java:25 translate 
2023-09-07 12:54:21:654 action-translator LogManager.java:25 translate 
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty, "")
                        arr = append(arr, newParams)
                        $l = arr
                    
2023-09-07 12:54:21:654 action-translator LogManager.java:25 qattr [@-1,113:114='ID',<0>,4:64].[@-1,116:119='text',<0>,4:67]
2023-09-07 12:54:21:654 action-translator LogManager.java:25 qattr [@-1,123:127='types',<0>,4:74].[@-1,129:130='ty',<0>,4:80]
2023-09-07 12:54:21:655 action-translator LogManager.java:25 attr [@-1,217:217='l',<0>,6:25]
2023-09-07 12:54:21:662 action-translator LogManager.java:25 translate 
                                                var arr []interface{}
                                                newParams := environment.NewStructType($id1.text,environment.UNKNOWN , $id2.text)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            
2023-09-07 12:54:21:662 action-translator LogManager.java:25 qattr [@-1,161:163='id1',<0>,10:88].[@-1,165:168='text',<0>,10:92]
2023-09-07 12:54:21:662 action-translator LogManager.java:25 qattr [@-1,193:195='id2',<0>,10:120].[@-1,197:200='text',<0>,10:124]
2023-09-07 12:54:21:662 action-translator LogManager.java:25 qattr [@-1,266:269='list',<0>,11:62].[@-1,271:271='l',<0>,11:67]
2023-09-07 12:54:21:664 action-translator LogManager.java:25 attr [@-1,335:335='l',<0>,12:49]
2023-09-07 12:54:21:664 action-translator LogManager.java:25 translate  $l = []interface{}{} 
2023-09-07 12:54:21:664 action-translator LogManager.java:25 attr [@-1,2:2='l',<0>,14:12]
2023-09-07 12:54:21:667 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2023-09-07 12:54:21:670 action-translator LogManager.java:25 translate 
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty, "")
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      
2023-09-07 12:54:21:670 action-translator LogManager.java:25 qattr [@-1,181:182='ID',<0>,19:98].[@-1,184:187='text',<0>,19:101]
2023-09-07 12:54:21:671 action-translator LogManager.java:25 qattr [@-1,191:195='types',<0>,19:108].[@-1,197:198='ty',<0>,19:114]
2023-09-07 12:54:21:671 action-translator LogManager.java:25 qattr [@-1,278:281='list',<0>,20:72].[@-1,283:283='l',<0>,20:77]
2023-09-07 12:54:21:672 action-translator LogManager.java:25 attr [@-1,357:357='l',<0>,21:59]
2023-09-07 12:54:21:673 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2023-09-07 12:54:21:674 action-translator LogManager.java:25 translate 
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($id1.text, environment.UNKNOWN, $id2.text)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      
2023-09-07 12:54:21:674 action-translator LogManager.java:25 qattr [@-1,181:183='id1',<0>,25:98].[@-1,185:188='text',<0>,25:102]
2023-09-07 12:54:21:675 action-translator LogManager.java:25 qattr [@-1,213:215='id2',<0>,25:130].[@-1,217:220='text',<0>,25:134]
2023-09-07 12:54:21:676 action-translator LogManager.java:25 qattr [@-1,296:299='list',<0>,26:72].[@-1,301:301='l',<0>,26:77]
2023-09-07 12:54:21:677 action-translator LogManager.java:25 attr [@-1,375:375='l',<0>,27:59]
2023-09-07 12:54:21:678 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-09-07 12:54:21:680 action-translator LogManager.java:25 translate 
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($id1.text, $types.ty, "")
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      
2023-09-07 12:54:21:680 action-translator LogManager.java:25 qattr [@-1,181:183='id1',<0>,31:98].[@-1,185:188='text',<0>,31:102]
2023-09-07 12:54:21:680 action-translator LogManager.java:25 qattr [@-1,192:196='types',<0>,31:109].[@-1,198:199='ty',<0>,31:115]
2023-09-07 12:54:21:681 action-translator LogManager.java:25 qattr [@-1,279:282='list',<0>,32:72].[@-1,284:284='l',<0>,32:77]
2023-09-07 12:54:21:681 action-translator LogManager.java:25 attr [@-1,358:358='l',<0>,33:59]
2023-09-07 12:54:21:690 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2023-09-07 12:54:21:690 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2023-09-07 12:54:21:690 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-09-07 12:54:21:692 action-translator LogManager.java:25 translate 
2023-09-07 12:54:21:693 action-translator LogManager.java:25 translate 
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                
2023-09-07 12:54:21:693 action-translator LogManager.java:25 qattr [@-1,105:106='ID',<0>,4:60].[@-1,108:111='text',<0>,4:63]
2023-09-07 12:54:21:694 action-translator LogManager.java:25 qattr [@-1,115:118='expr',<0>,4:70].[@-1,120:120='e',<0>,4:75]
2023-09-07 12:54:21:694 action-translator LogManager.java:25 attr [@-1,192:192='l',<0>,6:21]
2023-09-07 12:54:21:694 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-09-07 12:54:21:695 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,9:9]
2023-09-07 12:54:21:695 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-07 12:54:21:697 action-translator LogManager.java:25 translate 
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  
2023-09-07 12:54:21:697 action-translator LogManager.java:25 qattr [@-1,173:174='ID',<0>,15:94].[@-1,176:179='text',<0>,15:97]
2023-09-07 12:54:21:698 action-translator LogManager.java:25 qattr [@-1,183:186='expr',<0>,15:104].[@-1,188:188='e',<0>,15:109]
2023-09-07 12:54:21:698 action-translator LogManager.java:25 qattr [@-1,260:263='list',<0>,16:68].[@-1,265:265='l',<0>,16:73]
2023-09-07 12:54:21:698 action-translator LogManager.java:25 attr [@-1,332:332='l',<0>,17:55]
2023-09-07 12:54:21:699 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-07 12:54:21:700 action-translator LogManager.java:25 translate 
2023-09-07 12:54:21:700 action-translator LogManager.java:25 translate  
    $l = []interface{}{}
    $l = append($l, $ID.text) 
    
2023-09-07 12:54:21:701 action-translator LogManager.java:25 attr [@-1,8:8='l',<0>,3:5]
2023-09-07 12:54:21:701 action-translator LogManager.java:25 attr [@-1,34:34='l',<0>,4:5]
2023-09-07 12:54:21:701 action-translator LogManager.java:25 attr [@-1,46:46='l',<0>,4:17]
2023-09-07 12:54:21:701 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,4:21].[@-1,53:56='text',<0>,4:24]
2023-09-07 12:54:21:702 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-07 12:54:21:702 action-translator LogManager.java:25 translate 
                                              var arr []interface{}
                                              arr = append($list.l, $ID.text)
                                              $l = arr
                                          
2023-09-07 12:54:21:702 action-translator LogManager.java:25 qattr [@-1,131:134='list',<0>,10:60].[@-1,136:136='l',<0>,10:65]
2023-09-07 12:54:21:703 action-translator LogManager.java:25 qattr [@-1,140:141='ID',<0>,10:69].[@-1,143:146='text',<0>,10:72]
2023-09-07 12:54:21:703 action-translator LogManager.java:25 attr [@-1,197:197='l',<0>,11:47]
2023-09-07 12:54:21:719 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-07 12:54:21:721 action-translator LogManager.java:25 translate  $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, $types.ty, $block.blk) 
2023-09-07 12:54:21:721 action-translator LogManager.java:25 attr [@-1,2:3='fn',<0>,185:78]
2023-09-07 12:54:21:722 action-translator LogManager.java:25 qattr [@-1,33:36='FUNC',<0>,185:109].[@-1,38:41='line',<0>,185:114]
2023-09-07 12:54:21:722 action-translator LogManager.java:25 qattr [@-1,45:48='FUNC',<0>,185:121].[@-1,50:52='pos',<0>,185:126]
2023-09-07 12:54:21:722 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,185:132].[@-1,59:62='text',<0>,185:135]
2023-09-07 12:54:21:722 action-translator LogManager.java:25 qattr [@-1,66:79='listParamsFunc',<0>,185:142].[@-1,81:81='l',<0>,185:157]
2023-09-07 12:54:21:722 action-translator LogManager.java:25 qattr [@-1,85:89='types',<0>,185:161].[@-1,91:92='ty',<0>,185:167]
2023-09-07 12:54:21:724 action-translator LogManager.java:25 qattr [@-1,96:100='block',<0>,185:172].[@-1,102:104='blk',<0>,185:178]
2023-09-07 12:54:21:724 action-translator LogManager.java:25 translate  $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, environment.NIL, $block.blk) 
2023-09-07 12:54:21:725 action-translator LogManager.java:25 attr [@-1,2:3='fn',<0>,186:65]
2023-09-07 12:54:21:725 action-translator LogManager.java:25 qattr [@-1,33:36='FUNC',<0>,186:96].[@-1,38:41='line',<0>,186:101]
2023-09-07 12:54:21:725 action-translator LogManager.java:25 qattr [@-1,45:48='FUNC',<0>,186:108].[@-1,50:52='pos',<0>,186:113]
2023-09-07 12:54:21:725 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,186:119].[@-1,59:62='text',<0>,186:122]
2023-09-07 12:54:21:729 action-translator LogManager.java:25 qattr [@-1,66:79='listParamsFunc',<0>,186:129].[@-1,81:81='l',<0>,186:144]
2023-09-07 12:54:21:729 action-translator LogManager.java:25 qattr [@-1,102:106='block',<0>,186:165].[@-1,108:110='blk',<0>,186:171]
2023-09-07 12:54:21:732 action-translator LogManager.java:25 translate 
2023-09-07 12:54:21:733 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        
2023-09-07 12:54:21:733 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-07 12:54:21:734 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-07 12:54:21:734 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-07 12:54:21:734 action-translator LogManager.java:25 qattr [@-1,65:73='parametro',<0>,4:29].[@-1,75:75='p',<0>,4:39]
2023-09-07 12:54:21:734 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-09-07 12:54:21:737 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,7:9]
2023-09-07 12:54:21:737 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-07 12:54:21:738 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $parametro.p)
                                          $l = arr
                                      
2023-09-07 12:54:21:738 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,13:56].[@-1,128:128='l',<0>,13:61]
2023-09-07 12:54:21:739 action-translator LogManager.java:25 qattr [@-1,132:140='parametro',<0>,13:65].[@-1,142:142='p',<0>,13:75]
2023-09-07 12:54:21:739 action-translator LogManager.java:25 attr [@-1,189:189='l',<0>,14:43]
2023-09-07 12:54:21:739 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-07 12:54:21:744 action-translator LogManager.java:25 translate  $p = instructions.NewParams($ID.line,$ID.pos,$ID.text ,$ID.text, $types.ty ,false)
2023-09-07 12:54:21:744 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,205:20]
2023-09-07 12:54:21:747 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,205:48].[@-1,33:36='line',<0>,205:51]
2023-09-07 12:54:21:749 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,205:57].[@-1,42:44='pos',<0>,205:60]
2023-09-07 12:54:21:749 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,205:65].[@-1,50:53='text',<0>,205:68]
2023-09-07 12:54:21:750 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,205:75].[@-1,60:63='text',<0>,205:78]
2023-09-07 12:54:21:750 action-translator LogManager.java:25 qattr [@-1,67:71='types',<0>,205:85].[@-1,73:74='ty',<0>,205:91]
2023-09-07 12:54:21:751 action-translator LogManager.java:25 translate  $p = instructions.NewParams($ID.line,$ID.pos,$ID.text,$ID.text, $types.ty,true)
2023-09-07 12:54:21:752 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,206:26]
2023-09-07 12:54:21:752 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,206:54].[@-1,33:36='line',<0>,206:57]
2023-09-07 12:54:21:752 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,206:63].[@-1,42:44='pos',<0>,206:66]
2023-09-07 12:54:21:752 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,206:71].[@-1,50:53='text',<0>,206:74]
2023-09-07 12:54:21:754 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,206:80].[@-1,59:62='text',<0>,206:83]
2023-09-07 12:54:21:754 action-translator LogManager.java:25 qattr [@-1,66:70='types',<0>,206:90].[@-1,72:73='ty',<0>,206:96]
2023-09-07 12:54:21:755 action-translator LogManager.java:25 translate  $p = instructions.NewParams($ID.line,$ID.pos, $ID.text,$exte.text, $types.ty,false)
2023-09-07 12:54:21:755 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,207:39]
2023-09-07 12:54:21:755 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,207:67].[@-1,33:36='line',<0>,207:70]
2023-09-07 12:54:21:755 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,207:76].[@-1,42:44='pos',<0>,207:79]
2023-09-07 12:54:21:756 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,207:85].[@-1,51:54='text',<0>,207:88]
2023-09-07 12:54:21:756 action-translator LogManager.java:25 qattr [@-1,57:60='exte',<0>,207:94].[@-1,62:65='text',<0>,207:99]
2023-09-07 12:54:21:756 action-translator LogManager.java:25 qattr [@-1,69:73='types',<0>,207:106].[@-1,75:76='ty',<0>,207:112]
2023-09-07 12:54:21:758 action-translator LogManager.java:25 translate  $p = instructions.NewParams($ID.line,$ID.pos, $ID.text,$exte.text, $types.ty,true)
2023-09-07 12:54:21:758 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,208:45]
2023-09-07 12:54:21:758 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,208:73].[@-1,33:36='line',<0>,208:76]
2023-09-07 12:54:21:759 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,208:82].[@-1,42:44='pos',<0>,208:85]
2023-09-07 12:54:21:759 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,208:91].[@-1,51:54='text',<0>,208:94]
2023-09-07 12:54:21:760 action-translator LogManager.java:25 qattr [@-1,57:60='exte',<0>,208:100].[@-1,62:65='text',<0>,208:105]
2023-09-07 12:54:21:761 action-translator LogManager.java:25 qattr [@-1,69:73='types',<0>,208:112].[@-1,75:76='ty',<0>,208:118]
2023-09-07 12:54:21:765 action-translator LogManager.java:25 translate  $cfe = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2023-09-07 12:54:21:765 action-translator LogManager.java:25 attr [@-1,2:4='cfe',<0>,212:36]
2023-09-07 12:54:21:765 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,212:66].[@-1,35:38='line',<0>,212:69]
2023-09-07 12:54:21:765 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,212:76].[@-1,45:47='pos',<0>,212:79]
2023-09-07 12:54:21:784 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,212:85].[@-1,54:57='text',<0>,212:88]
2023-09-07 12:54:21:784 action-translator LogManager.java:25 qattr [@-1,61:74='listParamsCall',<0>,212:95].[@-1,76:76='l',<0>,212:110]
2023-09-07 12:54:21:789 action-translator LogManager.java:25 translate  $cf = instructions.NewCallFunc($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2023-09-07 12:54:21:789 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,216:36]
2023-09-07 12:54:21:790 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,216:67].[@-1,36:39='line',<0>,216:70]
2023-09-07 12:54:21:790 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,216:77].[@-1,46:48='pos',<0>,216:80]
2023-09-07 12:54:21:790 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,216:86].[@-1,55:58='text',<0>,216:89]
2023-09-07 12:54:21:790 action-translator LogManager.java:25 qattr [@-1,62:75='listParamsCall',<0>,216:96].[@-1,77:77='l',<0>,216:111]
2023-09-07 12:54:21:792 action-translator LogManager.java:25 translate 
2023-09-07 12:54:21:798 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-07 12:54:21:799 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-07 12:54:21:799 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-07 12:54:21:799 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-07 12:54:21:801 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-07 12:54:21:802 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-09-07 12:54:21:804 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,7:9]
2023-09-07 12:54:21:805 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-07 12:54:21:807 action-translator LogManager.java:25 translate 
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          
2023-09-07 12:54:21:807 action-translator LogManager.java:25 qattr [@-1,131:134='list',<0>,13:60].[@-1,136:136='l',<0>,13:65]
2023-09-07 12:54:21:808 action-translator LogManager.java:25 qattr [@-1,140:143='expr',<0>,13:69].[@-1,145:145='e',<0>,13:74]
2023-09-07 12:54:21:808 action-translator LogManager.java:25 attr [@-1,196:196='l',<0>,14:47]
2023-09-07 12:54:21:809 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-07 12:54:21:818 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-09-07 12:54:21:819 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,236:8]
2023-09-07 12:54:21:820 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-09-07 12:54:21:821 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,237:10]
2023-09-07 12:54:21:821 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-09-07 12:54:21:821 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,238:8]
2023-09-07 12:54:21:821 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-09-07 12:54:21:821 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,239:9]
2023-09-07 12:54:21:821 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-09-07 12:54:21:823 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,240:24]
2023-09-07 12:54:21:823 action-translator LogManager.java:25 translate  $ty = environment.STR 
2023-09-07 12:54:21:823 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,241:24]
2023-09-07 12:54:21:823 action-translator LogManager.java:25 translate  $ty = environment.NIL 
2023-09-07 12:54:21:824 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,242:8]
2023-09-07 12:54:21:824 action-translator LogManager.java:25 translate  $ty = environment.STRUCT 
2023-09-07 12:54:21:824 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,243:11]
2023-09-07 12:54:21:824 action-translator LogManager.java:25 translate  $ty = environment.UNKNOWN 
2023-09-07 12:54:21:824 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,244:7]
2023-09-07 12:54:21:838 action-translator LogManager.java:25 translate 
2023-09-07 12:54:21:880 action-translator LogManager.java:25 translate $e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)
2023-09-07 12:54:21:881 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,2:67]
2023-09-07 12:54:21:888 action-translator LogManager.java:25 qattr [@-1,31:33='SUB',<0>,2:97].[@-1,35:38='line',<0>,2:101]
2023-09-07 12:54:21:888 action-translator LogManager.java:25 qattr [@-1,41:43='SUB',<0>,2:107].[@-1,45:47='pos',<0>,2:111]
2023-09-07 12:54:21:889 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,2:116].[@-1,55:55='e',<0>,2:121]
2023-09-07 12:54:21:890 action-translator LogManager.java:25 translate $e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)
2023-09-07 12:54:21:890 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,3:65]
2023-09-07 12:54:21:890 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,3:95].[@-1,35:38='line',<0>,3:99]
2023-09-07 12:54:21:891 action-translator LogManager.java:25 qattr [@-1,42:44='NOT',<0>,3:106].[@-1,46:48='pos',<0>,3:110]
2023-09-07 12:54:21:891 action-translator LogManager.java:25 qattr [@-1,52:56='right',<0>,3:116].[@-1,58:58='e',<0>,3:122]
2023-09-07 12:54:21:892 action-translator LogManager.java:25 qattr [@-1,62:64='NOT',<0>,3:126].[@-1,66:69='text',<0>,3:130]
2023-09-07 12:54:21:892 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-09-07 12:54:21:918 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:82]
2023-09-07 12:54:21:918 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:87].[@-1,12:12='e',<0>,4:92]
2023-09-07 12:54:21:918 action-translator LogManager.java:25 translate  $e = $callExp.cfe 
2023-09-07 12:54:21:918 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:37]
2023-09-07 12:54:21:918 action-translator LogManager.java:25 qattr [@-1,7:13='callExp',<0>,5:42].[@-1,15:17='cfe',<0>,5:50]
2023-09-07 12:54:21:929 action-translator LogManager.java:25 translate  $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) 
2023-09-07 12:54:21:929 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:105]
2023-09-07 12:54:21:929 action-translator LogManager.java:25 qattr [@-1,27:31='types',<0>,6:130].[@-1,33:37='start',<0>,6:136]
2023-09-07 12:54:21:930 action-translator LogManager.java:25 qattr [@-1,51:55='types',<0>,6:154].[@-1,57:61='start',<0>,6:160]
2023-09-07 12:54:21:930 action-translator LogManager.java:25 qattr [@-1,77:81='types',<0>,6:180].[@-1,83:84='ty',<0>,6:186]
2023-09-07 12:54:21:930 action-translator LogManager.java:25 qattr [@-1,88:91='expr',<0>,6:191].[@-1,93:93='e',<0>,6:196]
2023-09-07 12:54:21:931 action-translator LogManager.java:25 translate  $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) 
2023-09-07 12:54:21:931 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:111]
2023-09-07 12:54:21:931 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,7:141].[@-1,35:38='line',<0>,7:144]
2023-09-07 12:54:21:931 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,7:151].[@-1,45:47='pos',<0>,7:154]
2023-09-07 12:54:21:932 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,7:160].[@-1,54:57='text',<0>,7:163]
2023-09-07 12:54:21:932 action-translator LogManager.java:25 qattr [@-1,61:73='listStructExp',<0>,7:170].[@-1,75:75='l',<0>,7:184]
2023-09-07 12:54:21:932 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) 
2023-09-07 12:54:21:932 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,8:60]
2023-09-07 12:54:21:932 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,8:86].[@-1,35:38='line',<0>,8:93]
2023-09-07 12:54:21:934 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,8:100].[@-1,49:51='pos',<0>,8:107]
2023-09-07 12:54:21:934 action-translator LogManager.java:25 translate  $e = $list.p
2023-09-07 12:54:21:934 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,9:44]
2023-09-07 12:54:21:934 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,9:49].[@-1,12:12='p',<0>,9:54]
2023-09-07 12:54:21:935 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-09-07 12:54:21:935 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,10:88]
2023-09-07 12:54:21:935 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,10:114].[@-1,35:38='line',<0>,10:121]
2023-09-07 12:54:21:936 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,10:128].[@-1,49:51='pos',<0>,10:135]
2023-09-07 12:54:21:936 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,10:141].[@-1,66:66='l',<0>,10:152]
2023-09-07 12:54:21:937 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-09-07 12:54:21:937 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,13:30].[@-1,39:42='text',<0>,13:37]
2023-09-07 12:54:21:938 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,14:43].[@-1,102:105='text',<0>,14:50]
2023-09-07 12:54:21:938 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,18:13]
2023-09-07 12:54:21:938 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,18:43].[@-1,240:243='line',<0>,18:50]
2023-09-07 12:54:21:939 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,18:56].[@-1,253:255='pos',<0>,18:63]
2023-09-07 12:54:21:939 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,20:37].[@-1,341:344='text',<0>,20:44]
2023-09-07 12:54:21:939 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,24:13]
2023-09-07 12:54:21:939 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,24:43].[@-1,474:477='line',<0>,24:50]
2023-09-07 12:54:21:940 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,24:56].[@-1,487:489='pos',<0>,24:63]
2023-09-07 12:54:21:940 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-09-07 12:54:21:940 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,29:16].[@-1,25:28='text',<0>,29:23]
2023-09-07 12:54:21:941 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,30:9]
2023-09-07 12:54:21:941 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,30:39].[@-1,77:80='line',<0>,30:46]
2023-09-07 12:54:21:941 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,30:53].[@-1,91:93='pos',<0>,30:60]
2023-09-07 12:54:21:941 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-09-07 12:54:21:942 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:33]
2023-09-07 12:54:21:942 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,32:63].[@-1,36:39='line',<0>,32:67]
2023-09-07 12:54:21:943 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,32:74].[@-1,47:49='pos',<0>,32:78]
2023-09-07 12:54:21:943 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-09-07 12:54:21:944 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:33]
2023-09-07 12:54:21:944 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,33:63].[@-1,36:39='line',<0>,33:67]
2023-09-07 12:54:21:944 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,33:74].[@-1,47:49='pos',<0>,33:78]
2023-09-07 12:54:21:944 action-translator LogManager.java:25 translate  $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) 
2023-09-07 12:54:21:945 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:78]
2023-09-07 12:54:21:945 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,34:104].[@-1,31:34='line',<0>,34:107]
2023-09-07 12:54:21:945 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,34:114].[@-1,41:43='pos',<0>,34:117]
2023-09-07 12:54:21:945 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,34:123].[@-1,50:53='text',<0>,34:126]
2023-09-07 12:54:21:946 action-translator LogManager.java:25 translate  $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) 
2023-09-07 12:54:21:946 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:80]
2023-09-07 12:54:21:947 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,35:108].[@-1,33:36='line',<0>,35:111]
2023-09-07 12:54:21:947 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,35:118].[@-1,43:45='pos',<0>,35:121]
2023-09-07 12:54:21:947 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,35:127].[@-1,52:55='text',<0>,35:130]
2023-09-07 12:54:21:948 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) 
2023-09-07 12:54:21:948 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:33]
2023-09-07 12:54:21:948 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,36:63].[@-1,36:39='line',<0>,36:67]
2023-09-07 12:54:21:948 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,36:74].[@-1,47:49='pos',<0>,36:78]
2023-09-07 12:54:21:949 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-09-07 12:54:21:949 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) 
2023-09-07 12:54:21:950 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:142]
2023-09-07 12:54:21:950 action-translator LogManager.java:25 qattr [@-1,32:33='op',<0>,39:172].[@-1,35:38='line',<0>,39:175]
2023-09-07 12:54:21:950 action-translator LogManager.java:25 qattr [@-1,42:43='op',<0>,39:182].[@-1,45:47='pos',<0>,39:185]
2023-09-07 12:54:21:950 action-translator LogManager.java:25 qattr [@-1,56:57='op',<0>,39:196].[@-1,59:62='text',<0>,39:199]
2023-09-07 12:54:21:950 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,39:206].[@-1,71:71='e',<0>,39:211]
2023-09-07 12:54:21:951 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-09-07 12:54:21:952 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-07 12:54:21:952 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:173]
2023-09-07 12:54:21:952 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:203].[@-1,37:41='start',<0>,40:208]
2023-09-07 12:54:22:009 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:226].[@-1,60:64='start',<0>,40:231]
2023-09-07 12:54:22:009 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:251].[@-1,85:85='e',<0>,40:256]
2023-09-07 12:54:22:012 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:260].[@-1,92:95='text',<0>,40:263]
2023-09-07 12:54:22:014 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:270].[@-1,105:105='e',<0>,40:276]
2023-09-07 12:54:22:014 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-07 12:54:22:014 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-07 12:54:22:014 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:152]
2023-09-07 12:54:22:014 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:182].[@-1,37:41='start',<0>,41:187]
2023-09-07 12:54:22:019 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:205].[@-1,60:64='start',<0>,41:210]
2023-09-07 12:54:22:019 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:230].[@-1,85:85='e',<0>,41:235]
2023-09-07 12:54:22:019 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:239].[@-1,92:95='text',<0>,41:242]
2023-09-07 12:54:22:019 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:249].[@-1,105:105='e',<0>,41:255]
2023-09-07 12:54:22:019 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-07 12:54:22:019 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-07 12:54:22:019 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,42:157]
2023-09-07 12:54:22:019 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,42:187].[@-1,37:41='start',<0>,42:192]
2023-09-07 12:54:22:019 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,42:210].[@-1,60:64='start',<0>,42:215]
2023-09-07 12:54:22:023 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,42:235].[@-1,85:85='e',<0>,42:240]
2023-09-07 12:54:22:023 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,42:244].[@-1,92:95='text',<0>,42:247]
2023-09-07 12:54:22:023 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,42:254].[@-1,105:105='e',<0>,42:260]
2023-09-07 12:54:22:023 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-07 12:54:22:025 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-07 12:54:22:029 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,43:157]
2023-09-07 12:54:22:030 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,43:187].[@-1,37:41='start',<0>,43:192]
2023-09-07 12:54:22:030 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,43:210].[@-1,60:64='start',<0>,43:215]
2023-09-07 12:54:22:031 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,43:235].[@-1,85:85='e',<0>,43:240]
2023-09-07 12:54:22:031 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,43:244].[@-1,92:95='text',<0>,43:247]
2023-09-07 12:54:22:031 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,43:254].[@-1,105:105='e',<0>,43:260]
2023-09-07 12:54:22:032 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-07 12:54:22:032 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-07 12:54:22:032 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,44:154]
2023-09-07 12:54:22:032 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,44:184].[@-1,37:41='start',<0>,44:189]
2023-09-07 12:54:22:034 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,44:207].[@-1,60:64='start',<0>,44:212]
2023-09-07 12:54:22:034 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,44:232].[@-1,85:85='e',<0>,44:237]
2023-09-07 12:54:22:037 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,44:241].[@-1,92:95='text',<0>,44:244]
2023-09-07 12:54:22:038 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,44:251].[@-1,105:105='e',<0>,44:257]
2023-09-07 12:54:22:039 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-07 12:54:22:041 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-07 12:54:22:041 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,45:129]
2023-09-07 12:54:22:041 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,45:159].[@-1,37:41='start',<0>,45:164]
2023-09-07 12:54:22:041 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,45:182].[@-1,60:64='start',<0>,45:187]
2023-09-07 12:54:22:042 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,45:207].[@-1,85:85='e',<0>,45:212]
2023-09-07 12:54:22:042 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,45:216].[@-1,92:95='text',<0>,45:219]
2023-09-07 12:54:22:042 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,45:226].[@-1,105:105='e',<0>,45:232]
2023-09-07 12:54:22:042 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-07 12:54:22:047 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-07 12:54:22:048 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,46:128]
2023-09-07 12:54:22:048 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,46:158].[@-1,37:41='start',<0>,46:163]
2023-09-07 12:54:22:048 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,46:181].[@-1,60:64='start',<0>,46:186]
2023-09-07 12:54:22:049 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,46:206].[@-1,85:85='e',<0>,46:211]
2023-09-07 12:54:22:049 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,46:215].[@-1,92:95='text',<0>,46:218]
2023-09-07 12:54:22:049 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,46:225].[@-1,105:105='e',<0>,46:231]
2023-09-07 12:54:22:050 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-09-07 12:54:22:050 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-09-07 12:54:22:050 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-07 12:54:22:050 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-07 12:54:22:050 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-07 12:54:22:050 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-07 12:54:22:050 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-07 12:54:22:050 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-07 12:54:22:052 action-translator LogManager.java:25 translate 
2023-09-07 12:54:22:052 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-07 12:54:22:052 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-07 12:54:22:052 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-07 12:54:22:054 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-07 12:54:22:054 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-07 12:54:22:057 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-07 12:54:22:057 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-09-07 12:54:22:057 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-09-07 12:54:22:058 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-09-07 12:54:22:058 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-09-07 12:54:22:058 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-07 12:54:22:091 action-translator LogManager.java:25 translate 
2023-09-07 12:54:22:091 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-07 12:54:22:092 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-07 12:54:22:093 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-07 12:54:22:093 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-07 12:54:22:093 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-07 12:54:22:097 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-07 12:54:22:098 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-09-07 12:54:22:099 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-09-07 12:54:22:099 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-09-07 12:54:22:099 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-09-07 12:54:22:100 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-07 12:54:22:101 action-translator LogManager.java:25 translate 
2023-09-07 12:54:22:102 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-09-07 12:54:22:102 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:35]
2023-09-07 12:54:22:102 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:63].[@-1,33:36='line',<0>,2:66]
2023-09-07 12:54:22:102 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:73].[@-1,43:45='pos',<0>,2:76]
2023-09-07 12:54:22:102 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:82].[@-1,52:55='text',<0>,2:85]
2023-09-07 12:54:22:104 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-09-07 12:54:22:108 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-09-07 12:54:22:108 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:130]
2023-09-07 12:54:22:108 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:162].[@-1,39:43='start',<0>,5:167]
2023-09-07 12:54:22:108 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:185].[@-1,62:66='start',<0>,5:190]
2023-09-07 12:54:22:109 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:210].[@-1,87:87='p',<0>,5:215]
2023-09-07 12:54:22:109 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:219].[@-1,96:96='e',<0>,5:224]
2023-09-07 12:54:22:109 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-07 12:54:22:110 action-translator LogManager.java:25 translate  $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  
2023-09-07 12:54:22:111 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:113]
2023-09-07 12:54:22:111 action-translator LogManager.java:25 qattr [@-1,35:38='list',<0>,6:146].[@-1,40:44='start',<0>,6:151]
2023-09-07 12:54:22:111 action-translator LogManager.java:25 qattr [@-1,58:61='list',<0>,6:169].[@-1,63:67='start',<0>,6:174]
2023-09-07 12:54:22:112 action-translator LogManager.java:25 qattr [@-1,83:86='list',<0>,6:194].[@-1,88:88='p',<0>,6:199]
2023-09-07 12:54:22:114 action-translator LogManager.java:25 qattr [@-1,92:93='ID',<0>,6:203].[@-1,95:98='text',<0>,6:206]
2023-09-07 12:54:22:118 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-07 12:54:22:120 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-09-07 12:54:22:120 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,7:183]
2023-09-07 12:54:22:120 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,7:215].[@-1,39:43='start',<0>,7:220]
2023-09-07 12:54:22:121 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,7:238].[@-1,62:66='start',<0>,7:243]
2023-09-07 12:54:22:121 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,7:263].[@-1,87:87='p',<0>,7:268]
2023-09-07 12:54:22:121 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,7:272].[@-1,96:96='e',<0>,7:277]
2023-09-07 12:54:22:122 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2023-09-07 12:54:22:122 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-07 12:54:22:122 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-07 12:54:22:124 action-translator LogManager.java:25 translate 
2023-09-07 12:54:22:124 action-translator LogManager.java:25 translate  $t = $expr.e 
2023-09-07 12:54:22:125 action-translator LogManager.java:25 attr [@-1,2:2='t',<0>,2:37]
2023-09-07 12:54:22:125 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:42].[@-1,12:12='e',<0>,2:47]
2023-09-07 12:54:22:129 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-07 12:54:22:130 action-translator LogManager.java:25 translate  $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) 
2023-09-07 12:54:22:130 action-translator LogManager.java:25 attr [@-1,2:2='t',<0>,5:113]
2023-09-07 12:54:22:130 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,5:143].[@-1,37:41='start',<0>,5:148]
2023-09-07 12:54:22:131 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,5:166].[@-1,60:64='start',<0>,5:171]
2023-09-07 12:54:22:131 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,5:191].[@-1,85:85='t',<0>,5:196]
2023-09-07 12:54:22:131 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,5:200].[@-1,92:95='text',<0>,5:203]
2023-09-07 12:54:22:131 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,5:210].[@-1,105:105='e',<0>,5:216]
2023-09-07 12:54:22:132 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-07 12:54:25:879 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-07 12:54:25:880 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-07 12:54:26:389 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-07 12:54:26:389 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

