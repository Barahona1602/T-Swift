2023-08-31 13:22:21:149 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMILLA (BLOCK (ALT '"'))) (RULE FLECHA (BLOCK (ALT '->'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-31 13:22:21:268 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMILLA (BLOCK (ALT '"'))) (RULE FLECHA (BLOCK (ALT '->'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-31 13:22:26:270 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}) (ALT PRINT PARIZQ exprComa PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID (= op IG) types PARIZQ expr PARDER { $dec = instructions.NewCastDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE returnstmt (returns interfaces.Instruction ret) (BLOCK (ALT RETURN expr { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) }) (ALT RETURN { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (= left expr) (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) types IG CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (= left expr) (= op COMA) (= right expr) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) })))))
2023-08-31 13:22:26:289 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}) (ALT PRINT PARIZQ exprComa PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID (= op IG) types PARIZQ expr PARDER { $dec = instructions.NewCastDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUB_IG SUM_IG)) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE returnstmt (returns interfaces.Instruction ret) (BLOCK (ALT RETURN expr { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) }) (ALT RETURN { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) types IG CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (= left expr) (= op COMA) (= right expr) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) })))))
2023-08-31 13:22:26:319 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}) (ALT PRINT PARIZQ exprComa PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID (= op IG) types PARIZQ expr PARDER { $dec = instructions.NewCastDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUB_IG SUM_IG)) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE returnstmt (returns interfaces.Instruction ret) (BLOCK (ALT RETURN expr { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) }) (ALT RETURN { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) types IG CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (= left expr) (= op COMA) (= right expr) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) })))))
2023-08-31 13:22:26:319 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-08-31 13:22:26:517 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} SUB<tokenIndex=668> opDe=expr<tokenIndex=672,p=21> {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)} 
        | types<tokenIndex=678> PARIZQ<tokenIndex=680> expr<tokenIndex=682> PARDER<tokenIndex=684> { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) } 
        | PARIZQ<tokenIndex=842> expr<tokenIndex=844> PARDER<tokenIndex=846> { $e = $expr.e } 
        | CORIZQ<tokenIndex=852> CORDER<tokenIndex=854> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) } 
        | list=listArray<tokenIndex=862> { $e = $list.p} 
        | CORIZQ<tokenIndex=868> listParams<tokenIndex=870> CORDER<tokenIndex=872> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=878>
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=884>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=890> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=896> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | ID<tokenIndex=902> PUNTO<tokenIndex=904> COUNT<tokenIndex=906> { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) } 
        | ID<tokenIndex=912> PUNTO<tokenIndex=914> ISEMPTY<tokenIndex=916> { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) } 
        | NIL<tokenIndex=922> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NIL) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(SUB_IG<tokenIndex=697>|SUM_IG<tokenIndex=699>) expr<tokenIndex=702,p=20> { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(MUL<tokenIndex=715>|DIV<tokenIndex=717>|MOD<tokenIndex=719>) right=expr<tokenIndex=724,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(ADD<tokenIndex=737>|SUB<tokenIndex=739>) right=expr<tokenIndex=744,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MAY_IG<tokenIndex=757>|MAYOR<tokenIndex=759>) right=expr<tokenIndex=764,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(MEN_IG<tokenIndex=777>|MENOR<tokenIndex=779>) right=expr<tokenIndex=784,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(IG_IG<tokenIndex=797>|DIF<tokenIndex=799>) right=expr<tokenIndex=804,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=AND<tokenIndex=816> right=expr<tokenIndex=820,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=OR<tokenIndex=832> right=expr<tokenIndex=836,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-31 13:22:26:701 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (SUB (ELEMENT_OPTIONS (= tokenIndex 668))) (= opDe (expr (ELEMENT_OPTIONS (= tokenIndex 672) (= p 21)))) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (types (ELEMENT_OPTIONS (= tokenIndex 678))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 680))) (expr (ELEMENT_OPTIONS (= tokenIndex 682))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 684))) { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 842))) (expr (ELEMENT_OPTIONS (= tokenIndex 844))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 846))) { $e = $expr.e }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 852))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 854))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 862)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 868))) (listParams (ELEMENT_OPTIONS (= tokenIndex 870))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 872))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 878))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 884))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 890))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 896))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 902))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 904))) (COUNT (ELEMENT_OPTIONS (= tokenIndex 906))) { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 912))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 914))) (ISEMPTY (ELEMENT_OPTIONS (= tokenIndex 916))) { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 922))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NIL) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (SUB_IG (ELEMENT_OPTIONS (= tokenIndex 697))) (SUM_IG (ELEMENT_OPTIONS (= tokenIndex 699))))) (expr (ELEMENT_OPTIONS (= tokenIndex 702) (= p 20))) { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 715))) (DIV (ELEMENT_OPTIONS (= tokenIndex 717))) (MOD (ELEMENT_OPTIONS (= tokenIndex 719))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 724) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 737))) (SUB (ELEMENT_OPTIONS (= tokenIndex 739))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 744) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 757))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 759))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 764) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 777))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 779))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 784) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 797))) (DIF (ELEMENT_OPTIONS (= tokenIndex 799))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 804) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 816)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 820) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 832)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 836) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-31 13:22:26:710 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=947> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=939> expr<tokenIndex=941> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-08-31 13:22:26:721 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 947))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 939))) (expr (ELEMENT_OPTIONS (= tokenIndex 941))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-08-31 13:22:26:722 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=980> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> types<tokenIndex=966> IG<tokenIndex=968> CORIZQ<tokenIndex=970> expr<tokenIndex=972> CORDER<tokenIndex=974> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-08-31 13:22:26:744 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 980))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (types (ELEMENT_OPTIONS (= tokenIndex 966))) (IG (ELEMENT_OPTIONS (= tokenIndex 968))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 970))) (expr (ELEMENT_OPTIONS (= tokenIndex 972))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 974))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-08-31 13:22:26:799 grammar LogManager.java:25 import INT=1
2023-08-31 13:22:26:800 grammar LogManager.java:25 import FLOAT=2
2023-08-31 13:22:26:800 grammar LogManager.java:25 import BOOL=3
2023-08-31 13:22:26:800 grammar LogManager.java:25 import STR=4
2023-08-31 13:22:26:800 grammar LogManager.java:25 import CHAR=5
2023-08-31 13:22:26:800 grammar LogManager.java:25 import VAR=6
2023-08-31 13:22:26:800 grammar LogManager.java:25 import LET=7
2023-08-31 13:22:26:800 grammar LogManager.java:25 import VOID=8
2023-08-31 13:22:26:846 grammar LogManager.java:25 import TRU=9
2023-08-31 13:22:26:846 grammar LogManager.java:25 import FAL=10
2023-08-31 13:22:26:846 grammar LogManager.java:25 import PRINT=11
2023-08-31 13:22:26:846 grammar LogManager.java:25 import IF=12
2023-08-31 13:22:26:846 grammar LogManager.java:25 import ELSE=13
2023-08-31 13:22:26:847 grammar LogManager.java:25 import WHILE=14
2023-08-31 13:22:26:847 grammar LogManager.java:25 import FOR=15
2023-08-31 13:22:26:847 grammar LogManager.java:25 import IN=16
2023-08-31 13:22:26:847 grammar LogManager.java:25 import SWITCH=17
2023-08-31 13:22:26:847 grammar LogManager.java:25 import CASE=18
2023-08-31 13:22:26:847 grammar LogManager.java:25 import DEFAULT=19
2023-08-31 13:22:26:848 grammar LogManager.java:25 import BREAK=20
2023-08-31 13:22:26:848 grammar LogManager.java:25 import RETURN=21
2023-08-31 13:22:26:849 grammar LogManager.java:25 import CONTINUE=22
2023-08-31 13:22:26:850 grammar LogManager.java:25 import GUARD=23
2023-08-31 13:22:26:850 grammar LogManager.java:25 import FUNC=24
2023-08-31 13:22:26:850 grammar LogManager.java:25 import NIL=25
2023-08-31 13:22:26:850 grammar LogManager.java:25 import STRUCT=26
2023-08-31 13:22:26:850 grammar LogManager.java:25 import MUTATING=27
2023-08-31 13:22:26:850 grammar LogManager.java:25 import SELF=28
2023-08-31 13:22:26:850 grammar LogManager.java:25 import INOUT=29
2023-08-31 13:22:26:852 grammar LogManager.java:25 import APPEND=30
2023-08-31 13:22:26:858 grammar LogManager.java:25 import REMOVELAST=31
2023-08-31 13:22:26:858 grammar LogManager.java:25 import REMOVE=32
2023-08-31 13:22:26:858 grammar LogManager.java:25 import AT=33
2023-08-31 13:22:26:858 grammar LogManager.java:25 import ISEMPTY=34
2023-08-31 13:22:26:859 grammar LogManager.java:25 import COUNT=35
2023-08-31 13:22:26:859 grammar LogManager.java:25 import NUMBER=36
2023-08-31 13:22:26:859 grammar LogManager.java:25 import STRING=37
2023-08-31 13:22:26:859 grammar LogManager.java:25 import ID=38
2023-08-31 13:22:26:859 grammar LogManager.java:25 import DIF=39
2023-08-31 13:22:26:859 grammar LogManager.java:25 import IG_IG=40
2023-08-31 13:22:26:859 grammar LogManager.java:25 import NOT=41
2023-08-31 13:22:26:859 grammar LogManager.java:25 import OR=42
2023-08-31 13:22:26:859 grammar LogManager.java:25 import AND=43
2023-08-31 13:22:26:859 grammar LogManager.java:25 import IG=44
2023-08-31 13:22:26:859 grammar LogManager.java:25 import MAY_IG=45
2023-08-31 13:22:26:860 grammar LogManager.java:25 import MEN_IG=46
2023-08-31 13:22:26:860 grammar LogManager.java:25 import SUM_IG=47
2023-08-31 13:22:26:860 grammar LogManager.java:25 import SUB_IG=48
2023-08-31 13:22:26:860 grammar LogManager.java:25 import MAYOR=49
2023-08-31 13:22:26:860 grammar LogManager.java:25 import MENOR=50
2023-08-31 13:22:26:860 grammar LogManager.java:25 import MUL=51
2023-08-31 13:22:26:860 grammar LogManager.java:25 import DIV=52
2023-08-31 13:22:26:861 grammar LogManager.java:25 import ADD=53
2023-08-31 13:22:26:861 grammar LogManager.java:25 import SUB=54
2023-08-31 13:22:26:861 grammar LogManager.java:25 import MOD=55
2023-08-31 13:22:26:861 grammar LogManager.java:25 import PARIZQ=56
2023-08-31 13:22:26:861 grammar LogManager.java:25 import PARDER=57
2023-08-31 13:22:26:861 grammar LogManager.java:25 import LLAVEIZQ=58
2023-08-31 13:22:26:861 grammar LogManager.java:25 import LLAVEDER=59
2023-08-31 13:22:26:861 grammar LogManager.java:25 import D_PTS=60
2023-08-31 13:22:26:861 grammar LogManager.java:25 import CORIZQ=61
2023-08-31 13:22:26:862 grammar LogManager.java:25 import CORDER=62
2023-08-31 13:22:26:862 grammar LogManager.java:25 import COMA=63
2023-08-31 13:22:26:862 grammar LogManager.java:25 import PUNTO=64
2023-08-31 13:22:26:862 grammar LogManager.java:25 import COMILLA=65
2023-08-31 13:22:26:862 grammar LogManager.java:25 import FLECHA=66
2023-08-31 13:22:26:862 grammar LogManager.java:25 import WHITESPACE=67
2023-08-31 13:22:26:862 grammar LogManager.java:25 import COMMENT=68
2023-08-31 13:22:26:862 grammar LogManager.java:25 import LINE_COMMENT=69
2023-08-31 13:22:26:862 grammar LogManager.java:25 import 'Int'=1
2023-08-31 13:22:26:862 grammar LogManager.java:25 import 'Float'=2
2023-08-31 13:22:26:862 grammar LogManager.java:25 import 'Bool'=3
2023-08-31 13:22:26:862 grammar LogManager.java:25 import 'String'=4
2023-08-31 13:22:26:863 grammar LogManager.java:25 import 'Character'=5
2023-08-31 13:22:26:863 grammar LogManager.java:25 import 'var'=6
2023-08-31 13:22:26:863 grammar LogManager.java:25 import 'let'=7
2023-08-31 13:22:26:863 grammar LogManager.java:25 import 'void'=8
2023-08-31 13:22:26:863 grammar LogManager.java:25 import 'true'=9
2023-08-31 13:22:26:863 grammar LogManager.java:25 import 'false'=10
2023-08-31 13:22:26:864 grammar LogManager.java:25 import 'print'=11
2023-08-31 13:22:26:864 grammar LogManager.java:25 import 'if'=12
2023-08-31 13:22:26:864 grammar LogManager.java:25 import 'else'=13
2023-08-31 13:22:26:864 grammar LogManager.java:25 import 'while'=14
2023-08-31 13:22:26:864 grammar LogManager.java:25 import 'for'=15
2023-08-31 13:22:26:864 grammar LogManager.java:25 import 'in'=16
2023-08-31 13:22:26:864 grammar LogManager.java:25 import 'switch'=17
2023-08-31 13:22:26:864 grammar LogManager.java:25 import 'case'=18
2023-08-31 13:22:26:864 grammar LogManager.java:25 import 'default'=19
2023-08-31 13:22:26:865 grammar LogManager.java:25 import 'break'=20
2023-08-31 13:22:26:865 grammar LogManager.java:25 import 'return'=21
2023-08-31 13:22:26:865 grammar LogManager.java:25 import 'continue'=22
2023-08-31 13:22:26:865 grammar LogManager.java:25 import 'guard'=23
2023-08-31 13:22:26:865 grammar LogManager.java:25 import 'func'=24
2023-08-31 13:22:26:865 grammar LogManager.java:25 import 'nil'=25
2023-08-31 13:22:26:865 grammar LogManager.java:25 import 'struct'=26
2023-08-31 13:22:26:865 grammar LogManager.java:25 import 'mutating'=27
2023-08-31 13:22:26:866 grammar LogManager.java:25 import 'self'=28
2023-08-31 13:22:26:866 grammar LogManager.java:25 import 'inout'=29
2023-08-31 13:22:26:867 grammar LogManager.java:25 import 'append'=30
2023-08-31 13:22:26:867 grammar LogManager.java:25 import 'removeLast'=31
2023-08-31 13:22:26:867 grammar LogManager.java:25 import 'remove'=32
2023-08-31 13:22:26:867 grammar LogManager.java:25 import 'at'=33
2023-08-31 13:22:26:867 grammar LogManager.java:25 import 'isEmpty'=34
2023-08-31 13:22:26:867 grammar LogManager.java:25 import 'count'=35
2023-08-31 13:22:26:867 grammar LogManager.java:25 import '!='=39
2023-08-31 13:22:26:867 grammar LogManager.java:25 import '=='=40
2023-08-31 13:22:26:867 grammar LogManager.java:25 import '!'=41
2023-08-31 13:22:26:867 grammar LogManager.java:25 import '||'=42
2023-08-31 13:22:26:868 grammar LogManager.java:25 import '&&'=43
2023-08-31 13:22:26:868 grammar LogManager.java:25 import '='=44
2023-08-31 13:22:26:868 grammar LogManager.java:25 import '>='=45
2023-08-31 13:22:26:868 grammar LogManager.java:25 import '<='=46
2023-08-31 13:22:26:868 grammar LogManager.java:25 import '+='=47
2023-08-31 13:22:26:868 grammar LogManager.java:25 import '-='=48
2023-08-31 13:22:26:868 grammar LogManager.java:25 import '>'=49
2023-08-31 13:22:26:868 grammar LogManager.java:25 import '<'=50
2023-08-31 13:22:26:868 grammar LogManager.java:25 import '*'=51
2023-08-31 13:22:26:868 grammar LogManager.java:25 import '/'=52
2023-08-31 13:22:26:869 grammar LogManager.java:25 import '+'=53
2023-08-31 13:22:26:869 grammar LogManager.java:25 import '-'=54
2023-08-31 13:22:26:869 grammar LogManager.java:25 import '%'=55
2023-08-31 13:22:26:869 grammar LogManager.java:25 import '('=56
2023-08-31 13:22:26:869 grammar LogManager.java:25 import ')'=57
2023-08-31 13:22:26:869 grammar LogManager.java:25 import '{'=58
2023-08-31 13:22:26:870 grammar LogManager.java:25 import '}'=59
2023-08-31 13:22:26:870 grammar LogManager.java:25 import ':'=60
2023-08-31 13:22:26:870 grammar LogManager.java:25 import '['=61
2023-08-31 13:22:26:870 grammar LogManager.java:25 import ']'=62
2023-08-31 13:22:26:870 grammar LogManager.java:25 import ','=63
2023-08-31 13:22:26:870 grammar LogManager.java:25 import '.'=64
2023-08-31 13:22:26:870 grammar LogManager.java:25 import '"'=65
2023-08-31 13:22:26:870 grammar LogManager.java:25 import '->'=66
2023-08-31 13:22:26:871 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO=64, COMILLA=65, FLECHA=66, WHITESPACE=67, COMMENT=68, LINE_COMMENT=69, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, '.'=64, '"'=65, '->'=66}
2023-08-31 13:22:26:872 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO=64, COMILLA=65, FLECHA=66, WHITESPACE=67, COMMENT=68, LINE_COMMENT=69}
2023-08-31 13:22:26:874 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, '.'=64, '"'=65, '->'=66}
2023-08-31 13:22:27:056 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-31 13:22:27:060 LL1 LogManager.java:25 look=[{6..7, 11..12, 14..15, 20, 22..23, 38}, {<EOF>, 59}]
2023-08-31 13:22:27:061 LL1 LogManager.java:25 LL(1)? true
2023-08-31 13:22:27:061 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-31 13:22:27:062 LL1 LogManager.java:25 look=[11, 12, {6..7}, 14, 38, 15, 23, 20, 22, 38]
2023-08-31 13:22:27:062 LL1 LogManager.java:25 LL(1)? false
2023-08-31 13:22:27:062 LL1 LogManager.java:25 
DECISION 2 in rule printstmt
2023-08-31 13:22:27:062 LL1 LogManager.java:25 look=[11, 11]
2023-08-31 13:22:27:062 LL1 LogManager.java:25 LL(1)? false
2023-08-31 13:22:27:062 LL1 LogManager.java:25 
DECISION 3 in rule ifstmt
2023-08-31 13:22:27:064 LL1 LogManager.java:25 look=[12, 12, 12]
2023-08-31 13:22:27:064 LL1 LogManager.java:25 LL(1)? false
2023-08-31 13:22:27:064 LL1 LogManager.java:25 
DECISION 4 in rule declarationstmt
2023-08-31 13:22:27:064 LL1 LogManager.java:25 look=[6, 6, 6, 7, 7]
2023-08-31 13:22:27:064 LL1 LogManager.java:25 LL(1)? false
2023-08-31 13:22:27:064 LL1 LogManager.java:25 
DECISION 5 in rule assignstmt
2023-08-31 13:22:27:064 LL1 LogManager.java:25 look=[38, 38]
2023-08-31 13:22:27:064 LL1 LogManager.java:25 LL(1)? false
2023-08-31 13:22:27:064 LL1 LogManager.java:25 
DECISION 6 in rule forstmt
2023-08-31 13:22:27:064 LL1 LogManager.java:25 look=[15, 15]
2023-08-31 13:22:27:064 LL1 LogManager.java:25 LL(1)? false
2023-08-31 13:22:27:064 LL1 LogManager.java:25 
DECISION 7 in rule returnstmt
2023-08-31 13:22:27:064 LL1 LogManager.java:25 look=[21, 21]
2023-08-31 13:22:27:065 LL1 LogManager.java:25 LL(1)? false
2023-08-31 13:22:27:065 LL1 LogManager.java:25 
DECISION 8 in rule fnArray
2023-08-31 13:22:27:065 LL1 LogManager.java:25 look=[38, 38, 38]
2023-08-31 13:22:27:065 LL1 LogManager.java:25 LL(1)? false
2023-08-31 13:22:27:065 LL1 LogManager.java:25 
DECISION 9 in rule types
2023-08-31 13:22:27:065 LL1 LogManager.java:25 look=[1, 2, 4, 3, 61, 65, 25]
2023-08-31 13:22:27:065 LL1 LogManager.java:25 LL(1)? true
2023-08-31 13:22:27:065 LL1 LogManager.java:25 
DECISION 10 in rule expr
2023-08-31 13:22:27:066 LL1 LogManager.java:25 look=[54, {1..4, 25, 61, 65}, 56, 61, 38, 61, 36, 37, 9, 10, 38, 38, 25]
2023-08-31 13:22:27:066 LL1 LogManager.java:25 LL(1)? false
2023-08-31 13:22:27:066 LL1 LogManager.java:25 
DECISION 11 in rule expr
2023-08-31 13:22:27:066 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null]
2023-08-31 13:22:27:066 LL1 LogManager.java:25 LL(1)? false
2023-08-31 13:22:27:066 LL1 LogManager.java:25 
DECISION 12 in rule expr
2023-08-31 13:22:27:069 LL1 LogManager.java:25 look=[null, null]
2023-08-31 13:22:27:070 LL1 LogManager.java:25 LL(1)? false
2023-08-31 13:22:27:070 LL1 LogManager.java:25 
DECISION 13 in rule listParams
2023-08-31 13:22:27:070 LL1 LogManager.java:25 look=[null, 62]
2023-08-31 13:22:27:070 LL1 LogManager.java:25 LL(1)? false
2023-08-31 13:22:27:070 LL1 LogManager.java:25 
DECISION 14 in rule listArray
2023-08-31 13:22:27:071 LL1 LogManager.java:25 look=[null, null]
2023-08-31 13:22:27:072 LL1 LogManager.java:25 LL(1)? false
2023-08-31 13:22:27:089 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-31 13:22:27:154 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-31 13:22:27:155 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-08-31 13:22:27:160 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-08-31 13:22:27:165 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-31 13:22:27:165 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-08-31 13:22:27:173 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-31 13:22:27:173 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,33:13]
2023-08-31 13:22:27:173 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,33:27]
2023-08-31 13:22:27:177 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-31 13:22:27:179 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:14]
2023-08-31 13:22:27:179 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,40:22].[@-1,20:23='prnt',<0>,40:32]
2023-08-31 13:22:27:180 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-08-31 13:22:27:180 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:11]
2023-08-31 13:22:27:181 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,41:19].[@-1,17:22='ifinst',<0>,41:26]
2023-08-31 13:22:27:182 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-08-31 13:22:27:182 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:20]
2023-08-31 13:22:27:183 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,42:28].[@-1,26:28='dec',<0>,42:44]
2023-08-31 13:22:27:184 action-translator LogManager.java:25 translate  $inst = $whilestmt.whl 
2023-08-31 13:22:27:184 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-08-31 13:22:27:185 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:22='whl',<0>,43:32]
2023-08-31 13:22:27:185 action-translator LogManager.java:25 translate  $inst = $assignstmt.asg 
2023-08-31 13:22:27:186 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:15]
2023-08-31 13:22:27:187 action-translator LogManager.java:25 qattr [@-1,10:19='assignstmt',<0>,44:23].[@-1,21:23='asg',<0>,44:34]
2023-08-31 13:22:27:187 action-translator LogManager.java:25 translate  $inst = $forstmt.fr 
2023-08-31 13:22:27:188 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:12]
2023-08-31 13:22:27:188 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,45:20].[@-1,18:19='fr',<0>,45:28]
2023-08-31 13:22:27:232 action-translator LogManager.java:25 translate  $inst = $guardstmt.grd 
2023-08-31 13:22:27:233 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:14]
2023-08-31 13:22:27:233 action-translator LogManager.java:25 qattr [@-1,10:18='guardstmt',<0>,46:22].[@-1,20:22='grd',<0>,46:32]
2023-08-31 13:22:27:235 action-translator LogManager.java:25 translate  $inst = $breakstmt.brk 
2023-08-31 13:22:27:235 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:14]
2023-08-31 13:22:27:236 action-translator LogManager.java:25 qattr [@-1,10:18='breakstmt',<0>,47:22].[@-1,20:22='brk',<0>,47:32]
2023-08-31 13:22:27:236 action-translator LogManager.java:25 translate  $inst = $continuestmt.cnt 
2023-08-31 13:22:27:237 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:17]
2023-08-31 13:22:27:237 action-translator LogManager.java:25 qattr [@-1,10:21='continuestmt',<0>,48:25].[@-1,23:25='cnt',<0>,48:38]
2023-08-31 13:22:27:239 action-translator LogManager.java:25 translate  $inst = $fnArray.p 
2023-08-31 13:22:27:239 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,49:12]
2023-08-31 13:22:27:240 action-translator LogManager.java:25 qattr [@-1,10:16='fnArray',<0>,49:20].[@-1,18:18='p',<0>,49:28]
2023-08-31 13:22:27:246 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-31 13:22:27:247 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,55:29]
2023-08-31 13:22:27:247 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,55:59].[@-1,38:41='line',<0>,55:65]
2023-08-31 13:22:27:252 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,55:71].[@-1,50:52='pos',<0>,55:77]
2023-08-31 13:22:27:254 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,55:82].[@-1,60:60='e',<0>,55:87]
2023-08-31 13:22:27:255 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)
2023-08-31 13:22:27:255 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,56:33]
2023-08-31 13:22:27:255 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,56:63].[@-1,38:41='line',<0>,56:69]
2023-08-31 13:22:27:256 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,56:75].[@-1,50:52='pos',<0>,56:81]
2023-08-31 13:22:27:256 action-translator LogManager.java:25 qattr [@-1,55:62='exprComa',<0>,56:86].[@-1,64:64='t',<0>,56:95]
2023-08-31 13:22:27:267 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-08-31 13:22:27:267 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,60:40]
2023-08-31 13:22:27:267 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,60:69].[@-1,34:37='line',<0>,60:72]
2023-08-31 13:22:27:268 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,60:79].[@-1,44:46='pos',<0>,60:82]
2023-08-31 13:22:27:269 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,60:88].[@-1,55:55='e',<0>,60:93]
2023-08-31 13:22:27:269 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,60:97].[@-1,65:67='blk',<0>,60:103]
2023-08-31 13:22:27:270 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) 
2023-08-31 13:22:27:271 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,61:75]
2023-08-31 13:22:27:271 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,61:104].[@-1,34:37='line',<0>,61:107]
2023-08-31 13:22:27:271 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,61:114].[@-1,44:46='pos',<0>,61:117]
2023-08-31 13:22:27:272 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,61:123].[@-1,55:55='e',<0>,61:128]
2023-08-31 13:22:27:272 action-translator LogManager.java:25 qattr [@-1,59:60='e1',<0>,61:132].[@-1,62:64='blk',<0>,61:135]
2023-08-31 13:22:27:272 action-translator LogManager.java:25 qattr [@-1,68:69='e2',<0>,61:141].[@-1,71:73='blk',<0>,61:144]
2023-08-31 13:22:27:274 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) 
2023-08-31 13:22:27:289 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,62:52]
2023-08-31 13:22:27:290 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,62:81].[@-1,34:37='line',<0>,62:84]
2023-08-31 13:22:27:292 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,62:91].[@-1,44:46='pos',<0>,62:94]
2023-08-31 13:22:27:293 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,62:100].[@-1,55:55='e',<0>,62:105]
2023-08-31 13:22:27:297 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,62:109].[@-1,65:67='blk',<0>,62:115]
2023-08-31 13:22:27:297 action-translator LogManager.java:25 qattr [@-1,85:90='ifstmt',<0>,62:135].[@-1,92:97='ifinst',<0>,62:142]
2023-08-31 13:22:27:302 action-translator LogManager.java:25 translate  $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-08-31 13:22:27:302 action-translator LogManager.java:25 attr [@-1,2:4='whl',<0>,66:43]
2023-08-31 13:22:27:302 action-translator LogManager.java:25 qattr [@-1,31:35='WHILE',<0>,66:72].[@-1,37:40='line',<0>,66:78]
2023-08-31 13:22:27:303 action-translator LogManager.java:25 qattr [@-1,44:48='WHILE',<0>,66:85].[@-1,50:52='pos',<0>,66:91]
2023-08-31 13:22:27:304 action-translator LogManager.java:25 qattr [@-1,56:59='expr',<0>,66:97].[@-1,61:61='e',<0>,66:102]
2023-08-31 13:22:27:304 action-translator LogManager.java:25 qattr [@-1,65:69='block',<0>,66:106].[@-1,71:73='blk',<0>,66:112]
2023-08-31 13:22:27:310 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) 
2023-08-31 13:22:27:310 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,70:32]
2023-08-31 13:22:27:310 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,70:67].[@-1,41:44='line',<0>,70:71]
2023-08-31 13:22:27:311 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,70:78].[@-1,52:54='pos',<0>,70:82]
2023-08-31 13:22:27:312 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,70:88].[@-1,61:64='text',<0>,70:91]
2023-08-31 13:22:27:312 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,70:98].[@-1,74:75='ty',<0>,70:104]
2023-08-31 13:22:27:312 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,70:109].[@-1,84:84='e',<0>,70:114]
2023-08-31 13:22:27:315 action-translator LogManager.java:25 translate  $dec = instructions.NewCastDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) 
2023-08-31 13:22:27:315 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,71:42]
2023-08-31 13:22:27:315 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,71:81].[@-1,45:48='line',<0>,71:85]
2023-08-31 13:22:27:315 action-translator LogManager.java:25 qattr [@-1,52:54='VAR',<0>,71:92].[@-1,56:58='pos',<0>,71:96]
2023-08-31 13:22:27:316 action-translator LogManager.java:25 qattr [@-1,62:63='ID',<0>,71:102].[@-1,65:68='text',<0>,71:105]
2023-08-31 13:22:27:316 action-translator LogManager.java:25 qattr [@-1,72:76='types',<0>,71:112].[@-1,78:79='ty',<0>,71:118]
2023-08-31 13:22:27:317 action-translator LogManager.java:25 qattr [@-1,83:86='expr',<0>,71:123].[@-1,88:88='e',<0>,71:128]
2023-08-31 13:22:27:318 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) 
2023-08-31 13:22:27:319 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,72:24]
2023-08-31 13:22:27:319 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,72:59].[@-1,41:44='line',<0>,72:63]
2023-08-31 13:22:27:319 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,72:70].[@-1,52:54='pos',<0>,72:74]
2023-08-31 13:22:27:320 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,72:80].[@-1,61:64='text',<0>,72:83]
2023-08-31 13:22:27:320 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,72:90].[@-1,74:75='ty',<0>,72:96]
2023-08-31 13:22:27:321 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) 
2023-08-31 13:22:27:322 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,73:32]
2023-08-31 13:22:27:322 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,73:67].[@-1,41:44='line',<0>,73:71]
2023-08-31 13:22:27:322 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,73:78].[@-1,52:54='pos',<0>,73:82]
2023-08-31 13:22:27:323 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,73:88].[@-1,61:64='text',<0>,73:91]
2023-08-31 13:22:27:323 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,73:98].[@-1,74:75='ty',<0>,73:104]
2023-08-31 13:22:27:324 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,73:109].[@-1,84:84='e',<0>,73:114]
2023-08-31 13:22:27:324 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) 
2023-08-31 13:22:27:324 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,74:24]
2023-08-31 13:22:27:325 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,74:59].[@-1,41:44='line',<0>,74:63]
2023-08-31 13:22:27:325 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,74:70].[@-1,52:54='pos',<0>,74:74]
2023-08-31 13:22:27:325 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,74:80].[@-1,61:64='text',<0>,74:83]
2023-08-31 13:22:27:326 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,74:90].[@-1,74:75='ty',<0>,74:96]
2023-08-31 13:22:27:330 action-translator LogManager.java:25 translate  $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-08-31 13:22:27:330 action-translator LogManager.java:25 attr [@-1,2:4='asg',<0>,78:18]
2023-08-31 13:22:27:330 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,78:48].[@-1,35:38='line',<0>,78:51]
2023-08-31 13:22:27:330 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,78:58].[@-1,45:47='pos',<0>,78:61]
2023-08-31 13:22:27:332 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,78:67].[@-1,54:57='text',<0>,78:70]
2023-08-31 13:22:27:332 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,78:77].[@-1,66:66='e',<0>,78:82]
2023-08-31 13:22:27:340 action-translator LogManager.java:25 translate  $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); 
2023-08-31 13:22:27:342 action-translator LogManager.java:25 setAttr [@-1,2:4='asg',<0>,79:33] [@-1,7:89=' instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e)',<0>,79:38]
2023-08-31 13:22:27:342 action-translator LogManager.java:25 translate  instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e)
2023-08-31 13:22:27:343 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,79:68].[@-1,40:43='line',<0>,79:71]
2023-08-31 13:22:27:344 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,79:78].[@-1,50:52='pos',<0>,79:81]
2023-08-31 13:22:27:344 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,79:87].[@-1,59:62='text',<0>,79:90]
2023-08-31 13:22:27:344 action-translator LogManager.java:25 qattr [@-1,66:67='op',<0>,79:97].[@-1,69:72='text',<0>,79:100]
2023-08-31 13:22:27:344 action-translator LogManager.java:25 qattr [@-1,76:79='expr',<0>,79:107].[@-1,81:81='e',<0>,79:112]
2023-08-31 13:22:27:352 action-translator LogManager.java:25 translate  $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); 
2023-08-31 13:22:27:352 action-translator LogManager.java:25 setAttr [@-1,2:3='fr',<0>,83:76] [@-1,6:88=' instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk)',<0>,83:80]
2023-08-31 13:22:27:352 action-translator LogManager.java:25 translate  instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk)
2023-08-31 13:22:27:352 action-translator LogManager.java:25 qattr [@-1,24:26='FOR',<0>,83:98].[@-1,28:31='line',<0>,83:102]
2023-08-31 13:22:27:353 action-translator LogManager.java:25 qattr [@-1,35:37='FOR',<0>,83:109].[@-1,39:41='pos',<0>,83:113]
2023-08-31 13:22:27:353 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,83:119].[@-1,48:51='text',<0>,83:122]
2023-08-31 13:22:27:353 action-translator LogManager.java:25 qattr [@-1,55:58='exp1',<0>,83:129].[@-1,60:60='e',<0>,83:134]
2023-08-31 13:22:27:354 action-translator LogManager.java:25 qattr [@-1,64:67='exp2',<0>,83:138].[@-1,69:69='e',<0>,83:143]
2023-08-31 13:22:27:354 action-translator LogManager.java:25 qattr [@-1,73:77='block',<0>,83:147].[@-1,79:81='blk',<0>,83:153]
2023-08-31 13:22:27:354 action-translator LogManager.java:25 translate  $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); 
2023-08-31 13:22:27:355 action-translator LogManager.java:25 setAttr [@-1,2:3='fr',<0>,84:43] [@-1,6:77=' instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk)',<0>,84:47]
2023-08-31 13:22:27:355 action-translator LogManager.java:25 translate  instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk)
2023-08-31 13:22:27:355 action-translator LogManager.java:25 qattr [@-1,22:24='FOR',<0>,84:63].[@-1,26:29='line',<0>,84:67]
2023-08-31 13:22:27:355 action-translator LogManager.java:25 qattr [@-1,33:35='FOR',<0>,84:74].[@-1,37:39='pos',<0>,84:78]
2023-08-31 13:22:27:355 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,84:84].[@-1,46:49='text',<0>,84:87]
2023-08-31 13:22:27:357 action-translator LogManager.java:25 qattr [@-1,53:56='expr',<0>,84:94].[@-1,58:58='e',<0>,84:99]
2023-08-31 13:22:27:357 action-translator LogManager.java:25 qattr [@-1,62:66='block',<0>,84:103].[@-1,68:70='blk',<0>,84:109]
2023-08-31 13:22:27:361 action-translator LogManager.java:25 translate  $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) 
2023-08-31 13:22:27:361 action-translator LogManager.java:25 attr [@-1,2:4='grd',<0>,88:44]
2023-08-31 13:22:27:361 action-translator LogManager.java:25 qattr [@-1,31:35='GUARD',<0>,88:73].[@-1,37:40='line',<0>,88:79]
2023-08-31 13:22:27:362 action-translator LogManager.java:25 qattr [@-1,44:48='GUARD',<0>,88:86].[@-1,50:52='pos',<0>,88:92]
2023-08-31 13:22:27:362 action-translator LogManager.java:25 qattr [@-1,56:59='expr',<0>,88:98].[@-1,61:61='e',<0>,88:103]
2023-08-31 13:22:27:363 action-translator LogManager.java:25 qattr [@-1,65:69='block',<0>,88:107].[@-1,71:73='blk',<0>,88:113]
2023-08-31 13:22:27:364 action-translator LogManager.java:25 translate  $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) 
2023-08-31 13:22:27:364 action-translator LogManager.java:25 attr [@-1,2:4='brk',<0>,112:10]
2023-08-31 13:22:27:364 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,112:39].[@-1,37:40='line',<0>,112:45]
2023-08-31 13:22:27:365 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,112:52].[@-1,50:52='pos',<0>,112:58]
2023-08-31 13:22:27:367 action-translator LogManager.java:25 translate  $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) 
2023-08-31 13:22:27:367 action-translator LogManager.java:25 attr [@-1,2:4='cnt',<0>,116:13]
2023-08-31 13:22:27:367 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,116:45].[@-1,43:46='line',<0>,116:54]
2023-08-31 13:22:27:368 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,116:61].[@-1,59:61='pos',<0>,116:70]
2023-08-31 13:22:27:370 action-translator LogManager.java:25 translate  $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) 
2023-08-31 13:22:27:371 action-translator LogManager.java:25 attr [@-1,2:4='ret',<0>,120:16]
2023-08-31 13:22:27:371 action-translator LogManager.java:25 qattr [@-1,32:37='RETURN',<0>,120:46].[@-1,39:42='line',<0>,120:53]
2023-08-31 13:22:27:371 action-translator LogManager.java:25 qattr [@-1,46:51='RETURN',<0>,120:60].[@-1,53:55='pos',<0>,120:67]
2023-08-31 13:22:27:371 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,120:73].[@-1,64:64='e',<0>,120:78]
2023-08-31 13:22:27:372 action-translator LogManager.java:25 translate  $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) 
2023-08-31 13:22:27:372 action-translator LogManager.java:25 attr [@-1,2:4='ret',<0>,121:11]
2023-08-31 13:22:27:373 action-translator LogManager.java:25 qattr [@-1,32:37='RETURN',<0>,121:41].[@-1,39:42='line',<0>,121:48]
2023-08-31 13:22:27:374 action-translator LogManager.java:25 qattr [@-1,46:51='RETURN',<0>,121:55].[@-1,53:55='pos',<0>,121:62]
2023-08-31 13:22:27:378 action-translator LogManager.java:25 translate  $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-08-31 13:22:27:383 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,125:39]
2023-08-31 13:22:27:383 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,125:67].[@-1,33:36='line',<0>,125:70]
2023-08-31 13:22:27:384 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,125:77].[@-1,43:45='pos',<0>,125:80]
2023-08-31 13:22:27:384 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,125:86].[@-1,52:55='text',<0>,125:89]
2023-08-31 13:22:27:384 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,125:96].[@-1,64:64='e',<0>,125:101]
2023-08-31 13:22:27:385 action-translator LogManager.java:25 translate  $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-08-31 13:22:27:386 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,126:48]
2023-08-31 13:22:27:386 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,126:78].[@-1,35:38='line',<0>,126:81]
2023-08-31 13:22:27:387 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,126:88].[@-1,45:47='pos',<0>,126:91]
2023-08-31 13:22:27:387 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,126:97].[@-1,54:57='text',<0>,126:100]
2023-08-31 13:22:27:388 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,126:107].[@-1,66:66='e',<0>,126:112]
2023-08-31 13:22:27:390 action-translator LogManager.java:25 translate  $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) 
2023-08-31 13:22:27:390 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,127:38]
2023-08-31 13:22:27:390 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,127:70].[@-1,37:40='line',<0>,127:73]
2023-08-31 13:22:27:390 action-translator LogManager.java:25 qattr [@-1,44:45='ID',<0>,127:80].[@-1,47:49='pos',<0>,127:83]
2023-08-31 13:22:27:391 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,127:89].[@-1,56:59='text',<0>,127:92]
2023-08-31 13:22:27:394 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-08-31 13:22:27:394 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,136:8]
2023-08-31 13:22:27:394 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-08-31 13:22:27:395 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,137:10]
2023-08-31 13:22:27:395 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-08-31 13:22:27:395 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,138:8]
2023-08-31 13:22:27:396 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-08-31 13:22:27:396 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,139:9]
2023-08-31 13:22:27:397 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-08-31 13:22:27:397 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,140:24]
2023-08-31 13:22:27:398 action-translator LogManager.java:25 translate  $ty = environment.STR 
2023-08-31 13:22:27:398 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,141:24]
2023-08-31 13:22:27:398 action-translator LogManager.java:25 translate  $ty = environment.NIL 
2023-08-31 13:22:27:399 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,142:8]
2023-08-31 13:22:27:410 action-translator LogManager.java:25 translate 
2023-08-31 13:22:27:411 action-translator LogManager.java:25 translate $e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)
2023-08-31 13:22:27:411 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,2:65]
2023-08-31 13:22:27:412 action-translator LogManager.java:25 qattr [@-1,31:33='SUB',<0>,2:95].[@-1,35:38='line',<0>,2:99]
2023-08-31 13:22:27:412 action-translator LogManager.java:25 qattr [@-1,41:43='SUB',<0>,2:105].[@-1,45:47='pos',<0>,2:109]
2023-08-31 13:22:27:413 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,2:114].[@-1,55:55='e',<0>,2:119]
2023-08-31 13:22:27:414 action-translator LogManager.java:25 translate  $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) 
2023-08-31 13:22:27:414 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:101]
2023-08-31 13:22:27:414 action-translator LogManager.java:25 qattr [@-1,27:31='types',<0>,3:126].[@-1,33:37='start',<0>,3:132]
2023-08-31 13:22:27:415 action-translator LogManager.java:25 qattr [@-1,51:55='types',<0>,3:150].[@-1,57:61='start',<0>,3:156]
2023-08-31 13:22:27:415 action-translator LogManager.java:25 qattr [@-1,77:81='types',<0>,3:176].[@-1,83:84='ty',<0>,3:182]
2023-08-31 13:22:27:416 action-translator LogManager.java:25 qattr [@-1,88:91='expr',<0>,3:187].[@-1,93:93='e',<0>,3:192]
2023-08-31 13:22:27:417 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-31 13:22:27:417 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:79]
2023-08-31 13:22:27:417 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:84].[@-1,12:12='e',<0>,4:89]
2023-08-31 13:22:27:436 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) 
2023-08-31 13:22:27:436 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:58]
2023-08-31 13:22:27:436 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,5:84].[@-1,35:38='line',<0>,5:91]
2023-08-31 13:22:27:437 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,5:98].[@-1,49:51='pos',<0>,5:105]
2023-08-31 13:22:27:441 action-translator LogManager.java:25 translate  $e = $list.p
2023-08-31 13:22:27:441 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:43]
2023-08-31 13:22:27:441 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,6:48].[@-1,12:12='p',<0>,6:53]
2023-08-31 13:22:27:443 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-08-31 13:22:27:443 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:85]
2023-08-31 13:22:27:443 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,7:111].[@-1,35:38='line',<0>,7:118]
2023-08-31 13:22:27:443 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,7:125].[@-1,49:51='pos',<0>,7:132]
2023-08-31 13:22:27:444 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,7:138].[@-1,66:66='l',<0>,7:149]
2023-08-31 13:22:27:444 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-31 13:22:27:445 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,10:30].[@-1,39:42='text',<0>,10:37]
2023-08-31 13:22:27:445 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,11:43].[@-1,102:105='text',<0>,11:50]
2023-08-31 13:22:27:445 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,15:13]
2023-08-31 13:22:27:445 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,15:43].[@-1,240:243='line',<0>,15:50]
2023-08-31 13:22:27:446 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,15:56].[@-1,253:255='pos',<0>,15:63]
2023-08-31 13:22:27:446 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,17:37].[@-1,341:344='text',<0>,17:44]
2023-08-31 13:22:27:447 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,21:13]
2023-08-31 13:22:27:447 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,21:43].[@-1,474:477='line',<0>,21:50]
2023-08-31 13:22:27:450 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,21:56].[@-1,487:489='pos',<0>,21:63]
2023-08-31 13:22:27:450 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-31 13:22:27:451 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,26:16].[@-1,25:28='text',<0>,26:23]
2023-08-31 13:22:27:451 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,27:9]
2023-08-31 13:22:27:451 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,27:39].[@-1,77:80='line',<0>,27:46]
2023-08-31 13:22:27:452 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,27:53].[@-1,91:93='pos',<0>,27:60]
2023-08-31 13:22:27:452 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-31 13:22:27:452 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,29:32]
2023-08-31 13:22:27:453 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,29:62].[@-1,36:39='line',<0>,29:66]
2023-08-31 13:22:27:453 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,29:73].[@-1,47:49='pos',<0>,29:77]
2023-08-31 13:22:27:453 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-31 13:22:27:453 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:32]
2023-08-31 13:22:27:453 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,30:62].[@-1,36:39='line',<0>,30:66]
2023-08-31 13:22:27:454 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,30:73].[@-1,47:49='pos',<0>,30:77]
2023-08-31 13:22:27:454 action-translator LogManager.java:25 translate  $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) 
2023-08-31 13:22:27:456 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:75]
2023-08-31 13:22:27:456 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,31:101].[@-1,31:34='line',<0>,31:104]
2023-08-31 13:22:27:456 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,31:111].[@-1,41:43='pos',<0>,31:114]
2023-08-31 13:22:27:456 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,31:120].[@-1,50:53='text',<0>,31:123]
2023-08-31 13:22:27:458 action-translator LogManager.java:25 translate  $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) 
2023-08-31 13:22:27:460 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:77]
2023-08-31 13:22:27:460 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,32:105].[@-1,33:36='line',<0>,32:108]
2023-08-31 13:22:27:460 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,32:115].[@-1,43:45='pos',<0>,32:118]
2023-08-31 13:22:27:461 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,32:124].[@-1,52:55='text',<0>,32:127]
2023-08-31 13:22:27:461 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NIL) 
2023-08-31 13:22:27:461 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:32]
2023-08-31 13:22:27:461 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,33:62].[@-1,36:39='line',<0>,33:66]
2023-08-31 13:22:27:462 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,33:73].[@-1,47:49='pos',<0>,33:77]
2023-08-31 13:22:27:464 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-08-31 13:22:27:465 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) 
2023-08-31 13:22:27:465 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:139]
2023-08-31 13:22:27:465 action-translator LogManager.java:25 qattr [@-1,32:33='op',<0>,36:169].[@-1,35:38='line',<0>,36:172]
2023-08-31 13:22:27:466 action-translator LogManager.java:25 qattr [@-1,42:43='op',<0>,36:179].[@-1,45:47='pos',<0>,36:182]
2023-08-31 13:22:27:467 action-translator LogManager.java:25 qattr [@-1,56:57='op',<0>,36:193].[@-1,59:62='text',<0>,36:196]
2023-08-31 13:22:27:467 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,36:203].[@-1,71:71='e',<0>,36:208]
2023-08-31 13:22:27:469 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-08-31 13:22:27:471 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-31 13:22:27:471 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:169]
2023-08-31 13:22:27:471 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:199].[@-1,37:41='start',<0>,37:204]
2023-08-31 13:22:27:471 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:222].[@-1,60:64='start',<0>,37:227]
2023-08-31 13:22:27:472 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:247].[@-1,85:85='e',<0>,37:252]
2023-08-31 13:22:27:472 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:256].[@-1,92:95='text',<0>,37:259]
2023-08-31 13:22:27:472 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:266].[@-1,105:105='e',<0>,37:272]
2023-08-31 13:22:27:472 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-31 13:22:27:474 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-31 13:22:27:474 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:149]
2023-08-31 13:22:27:477 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:179].[@-1,37:41='start',<0>,38:184]
2023-08-31 13:22:27:477 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:202].[@-1,60:64='start',<0>,38:207]
2023-08-31 13:22:27:477 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:227].[@-1,85:85='e',<0>,38:232]
2023-08-31 13:22:27:477 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:236].[@-1,92:95='text',<0>,38:239]
2023-08-31 13:22:27:482 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:246].[@-1,105:105='e',<0>,38:252]
2023-08-31 13:22:27:482 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-31 13:22:27:483 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-31 13:22:27:484 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:154]
2023-08-31 13:22:27:484 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:184].[@-1,37:41='start',<0>,39:189]
2023-08-31 13:22:27:484 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:207].[@-1,60:64='start',<0>,39:212]
2023-08-31 13:22:27:485 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:232].[@-1,85:85='e',<0>,39:237]
2023-08-31 13:22:27:487 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:241].[@-1,92:95='text',<0>,39:244]
2023-08-31 13:22:27:487 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:251].[@-1,105:105='e',<0>,39:257]
2023-08-31 13:22:27:490 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-31 13:22:27:491 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-31 13:22:27:491 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:154]
2023-08-31 13:22:27:491 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:184].[@-1,37:41='start',<0>,40:189]
2023-08-31 13:22:27:491 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:207].[@-1,60:64='start',<0>,40:212]
2023-08-31 13:22:27:492 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:232].[@-1,85:85='e',<0>,40:237]
2023-08-31 13:22:27:492 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:241].[@-1,92:95='text',<0>,40:244]
2023-08-31 13:22:27:493 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:251].[@-1,105:105='e',<0>,40:257]
2023-08-31 13:22:27:493 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-31 13:22:27:494 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-31 13:22:27:494 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:151]
2023-08-31 13:22:27:494 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:181].[@-1,37:41='start',<0>,41:186]
2023-08-31 13:22:27:495 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:204].[@-1,60:64='start',<0>,41:209]
2023-08-31 13:22:27:495 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:229].[@-1,85:85='e',<0>,41:234]
2023-08-31 13:22:27:495 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:238].[@-1,92:95='text',<0>,41:241]
2023-08-31 13:22:27:495 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:248].[@-1,105:105='e',<0>,41:254]
2023-08-31 13:22:27:495 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-31 13:22:27:496 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-31 13:22:27:497 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,42:127]
2023-08-31 13:22:27:497 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,42:157].[@-1,37:41='start',<0>,42:162]
2023-08-31 13:22:27:497 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,42:180].[@-1,60:64='start',<0>,42:185]
2023-08-31 13:22:27:498 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,42:205].[@-1,85:85='e',<0>,42:210]
2023-08-31 13:22:27:498 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,42:214].[@-1,92:95='text',<0>,42:217]
2023-08-31 13:22:27:498 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,42:224].[@-1,105:105='e',<0>,42:230]
2023-08-31 13:22:27:499 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-31 13:22:27:499 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-31 13:22:27:500 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,43:126]
2023-08-31 13:22:27:500 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,43:156].[@-1,37:41='start',<0>,43:161]
2023-08-31 13:22:27:500 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,43:179].[@-1,60:64='start',<0>,43:184]
2023-08-31 13:22:27:501 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,43:204].[@-1,85:85='e',<0>,43:209]
2023-08-31 13:22:27:501 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,43:213].[@-1,92:95='text',<0>,43:216]
2023-08-31 13:22:27:501 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,43:223].[@-1,105:105='e',<0>,43:229]
2023-08-31 13:22:27:506 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-08-31 13:22:27:506 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-08-31 13:22:27:506 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-31 13:22:27:507 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-31 13:22:27:507 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-31 13:22:27:507 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-31 13:22:27:507 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-31 13:22:27:507 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-31 13:22:27:511 action-translator LogManager.java:25 translate 
2023-08-31 13:22:27:511 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-08-31 13:22:27:512 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-08-31 13:22:27:512 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-08-31 13:22:27:512 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-08-31 13:22:27:512 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-08-31 13:22:27:512 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-31 13:22:27:514 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-08-31 13:22:27:514 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-08-31 13:22:27:514 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-08-31 13:22:27:514 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-08-31 13:22:27:515 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-31 13:22:27:517 action-translator LogManager.java:25 translate 
2023-08-31 13:22:27:517 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-08-31 13:22:27:518 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-08-31 13:22:27:518 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:62].[@-1,33:36='line',<0>,2:65]
2023-08-31 13:22:27:519 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:72].[@-1,43:45='pos',<0>,2:75]
2023-08-31 13:22:27:520 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:81].[@-1,52:55='text',<0>,2:84]
2023-08-31 13:22:27:521 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-31 13:22:27:522 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-08-31 13:22:27:522 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:168]
2023-08-31 13:22:27:531 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:200].[@-1,39:43='start',<0>,5:205]
2023-08-31 13:22:27:531 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:223].[@-1,62:66='start',<0>,5:228]
2023-08-31 13:22:27:531 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:248].[@-1,87:87='p',<0>,5:253]
2023-08-31 13:22:27:532 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:257].[@-1,96:96='e',<0>,5:262]
2023-08-31 13:22:27:532 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-31 13:22:27:534 action-translator LogManager.java:25 translate  $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-31 13:22:27:535 action-translator LogManager.java:25 attr [@-1,2:2='t',<0>,207:33]
2023-08-31 13:22:27:535 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,207:63].[@-1,37:41='start',<0>,207:68]
2023-08-31 13:22:27:535 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,207:86].[@-1,60:64='start',<0>,207:91]
2023-08-31 13:22:27:535 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,207:111].[@-1,85:85='e',<0>,207:116]
2023-08-31 13:22:27:535 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,207:120].[@-1,92:95='text',<0>,207:123]
2023-08-31 13:22:27:535 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,207:130].[@-1,105:105='e',<0>,207:136]
2023-08-31 13:22:29:498 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-31 13:22:29:499 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-31 13:22:30:140 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-31 13:22:30:141 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

