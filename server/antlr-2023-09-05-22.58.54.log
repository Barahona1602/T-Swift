2023-09-05 22:58:36:021 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMILLA (BLOCK (ALT '"'))) (RULE FLECHA (BLOCK (ALT '->'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-05 22:58:36:129 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE CHAR (BLOCK (ALT 'Character'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE SUM_IG (BLOCK (ALT '+='))) (RULE SUB_IG (BLOCK (ALT '-='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMILLA (BLOCK (ALT '"'))) (RULE FLECHA (BLOCK (ALT '->'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-05 22:58:43:550 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }) (ALT returnstmt { $inst = $returnstmt.ret }) (ALT fnstmt { $inst = $fnstmt.fn }) (ALT callFunction { $inst = $callFunction.cf }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}) (ALT PRINT PARIZQ exprComa PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) }) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }) (ALT ID listAccessArray IG expr { $asg = instructions.NewArrayAssign($ID.line, $ID.pos, $ID.text, $listAccessArray.l, $expr.e) }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE returnstmt (returns interfaces.Instruction ret) (BLOCK (ALT RETURN expr { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) }) (ALT RETURN { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE fnstmt (returns interfaces.Instruction fn) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER FLECHA types LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, $types.ty, $block.blk) }) (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, environment.NIL, $block.blk) }))) (RULE listParamsFunc (returns []interface{} l) (BLOCK (ALT (= list listParamsFunc) COMA parametro {
                                var arr []interface{}
                                arr = append($list.l, $parametro.p)
                                $l = arr
                            }) (ALT parametro {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE parametro (returns interfaces.Instruction p) (BLOCK (ALT ID D_PTS types { $p = instructions.NewParams($ID.line,$ID.pos,$ID.text ,$ID.text, $types.ty ,false)}) (ALT ID D_PTS INOUT types { $p = instructions.NewParams($ID.line,$ID.pos,$ID.text,$ID.text, $types.ty,true)}) (ALT (= exte (BLOCK (ALT GUIONBAJO) (ALT ID))) ID D_PTS types { $p = instructions.NewParams($ID.line,$ID.pos, $ID.text,$exte.text, $types.ty,false)}) (ALT (= exte (BLOCK (ALT GUIONBAJO) (ALT ID))) ID D_PTS INOUT types { $p = instructions.NewParams($ID.line,$ID.pos, $ID.text,$exte.text, $types.ty,true)}))) (RULE callFunction (returns interfaces.Instruction cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = instructions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (= left expr) (= op (BLOCK (ALT SUB_IG) (ALT SUM_IG))) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= right expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listAccessArray (returns []interface{} l) (BLOCK (ALT (= list listAccessArray) CORIZQ expr CORDER {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT CORIZQ expr CORDER {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) types IG CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (= left exprComa) (= op COMA) (= right expr) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }) (ALT expr { $t = $expr.e })))))
2023-09-05 22:58:43:574 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }) (ALT returnstmt { $inst = $returnstmt.ret }) (ALT fnstmt { $inst = $fnstmt.fn }) (ALT callFunction { $inst = $callFunction.cf }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}) (ALT PRINT PARIZQ exprComa PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) }) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUB_IG SUM_IG)) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }) (ALT ID listAccessArray IG expr { $asg = instructions.NewArrayAssign($ID.line, $ID.pos, $ID.text, $listAccessArray.l, $expr.e) }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE returnstmt (returns interfaces.Instruction ret) (BLOCK (ALT RETURN expr { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) }) (ALT RETURN { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE fnstmt (returns interfaces.Instruction fn) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER FLECHA types LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, $types.ty, $block.blk) }) (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, environment.NIL, $block.blk) }))) (RULE listParamsFunc (returns []interface{} l) (BLOCK (ALT (= list listParamsFunc) COMA parametro {
                                var arr []interface{}
                                arr = append($list.l, $parametro.p)
                                $l = arr
                            }) (ALT parametro {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE parametro (returns interfaces.Instruction p) (BLOCK (ALT ID D_PTS types { $p = instructions.NewParams($ID.line,$ID.pos,$ID.text ,$ID.text, $types.ty ,false)}) (ALT ID D_PTS INOUT types { $p = instructions.NewParams($ID.line,$ID.pos,$ID.text,$ID.text, $types.ty,true)}) (ALT (= exte (SET GUIONBAJO ID)) ID D_PTS types { $p = instructions.NewParams($ID.line,$ID.pos, $ID.text,$exte.text, $types.ty,false)}) (ALT (= exte (SET GUIONBAJO ID)) ID D_PTS INOUT types { $p = instructions.NewParams($ID.line,$ID.pos, $ID.text,$exte.text, $types.ty,true)}))) (RULE callFunction (returns interfaces.Instruction cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = instructions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= right expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listAccessArray (returns []interface{} l) (BLOCK (ALT (= list listAccessArray) CORIZQ expr CORDER {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT CORIZQ expr CORDER {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) types IG CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (= left exprComa) (= op COMA) (= right expr) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }) (ALT expr { $t = $expr.e })))))
2023-09-05 22:58:43:589 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT whilestmt { $inst = $whilestmt.whl }) (ALT assignstmt { $inst = $assignstmt.asg }) (ALT forstmt { $inst = $forstmt.fr }) (ALT guardstmt { $inst = $guardstmt.grd }) (ALT breakstmt { $inst = $breakstmt.brk }) (ALT continuestmt { $inst = $continuestmt.cnt }) (ALT fnArray { $inst = $fnArray.p }) (ALT returnstmt { $inst = $returnstmt.ret }) (ALT fnstmt { $inst = $fnstmt.fn }) (ALT callFunction { $inst = $callFunction.cf }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}) (ALT PRINT PARIZQ exprComa PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVEIZQ (= e1 block) LLAVEDER ELSE LLAVEIZQ (= e2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER ELSE ifstmt { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) }))) (RULE whilestmt (returns interfaces.Instruction whl) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) }) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) }) (ALT VAR ID D_PTS types { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) }) (ALT LET ID D_PTS types IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) }) (ALT LET ID D_PTS types { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) }) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) }))) (RULE assignstmt (returns interfaces.Instruction asg) (BLOCK (ALT ID (= op IG) expr { $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUB_IG SUM_IG)) expr { $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); }) (ALT ID listAccessArray IG expr { $asg = instructions.NewArrayAssign($ID.line, $ID.pos, $ID.text, $listAccessArray.l, $expr.e) }))) (RULE forstmt (returns interfaces.Instruction fr) (BLOCK (ALT FOR ID IN (= exp1 expr) PUNTO PUNTO PUNTO (= exp2 expr) LLAVEIZQ block LLAVEDER { $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); }) (ALT FOR ID IN expr LLAVEIZQ block LLAVEDER { $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); }))) (RULE guardstmt (returns interfaces.Instruction grd) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER { $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) }))) (RULE breakstmt (returns interfaces.Instruction brk) (BLOCK (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) }))) (RULE continuestmt (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE returnstmt (returns interfaces.Instruction ret) (BLOCK (ALT RETURN expr { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) }) (ALT RETURN { $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE fnArray (returns interfaces.Instruction p) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE fnstmt (returns interfaces.Instruction fn) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER FLECHA types LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, $types.ty, $block.blk) }) (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER { $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, environment.NIL, $block.blk) }))) (RULE listParamsFunc (returns []interface{} l) (BLOCK (ALT (= list listParamsFunc) COMA parametro {
                                var arr []interface{}
                                arr = append($list.l, $parametro.p)
                                $l = arr
                            }) (ALT parametro {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE parametro (returns interfaces.Instruction p) (BLOCK (ALT ID D_PTS types { $p = instructions.NewParams($ID.line,$ID.pos,$ID.text ,$ID.text, $types.ty ,false)}) (ALT ID D_PTS INOUT types { $p = instructions.NewParams($ID.line,$ID.pos,$ID.text,$ID.text, $types.ty,true)}) (ALT (= exte (SET GUIONBAJO ID)) ID D_PTS types { $p = instructions.NewParams($ID.line,$ID.pos, $ID.text,$exte.text, $types.ty,false)}) (ALT (= exte (SET GUIONBAJO ID)) ID D_PTS INOUT types { $p = instructions.NewParams($ID.line,$ID.pos, $ID.text,$exte.text, $types.ty,true)}))) (RULE callFunction (returns interfaces.Instruction cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = instructions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT COMILLA STR COMILLA { $ty = environment.STR }) (ALT NIL { $ty = environment.NIL }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT SUB (= opDe expr) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT types PARIZQ expr PARDER { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (= left expr) (= op (SET SUB_IG SUM_IG)) expr { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT (= left expr) (= op (SET MUL DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= right expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT CORIZQ CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listAccessArray (returns []interface{} l) (BLOCK (ALT (= list listAccessArray) CORIZQ expr CORDER {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT CORIZQ expr CORDER {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) types IG CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (= left exprComa) (= op COMA) (= right expr) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }) (ALT expr { $t = $expr.e })))))
2023-09-05 22:58:43:589 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-09-05 22:58:43:717 left-recursion LogManager.java:25 listParamsFunc returns [[]interface{} l]
    :   ( {} parametro<tokenIndex=733> {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=725> parametro<tokenIndex=727> {
                                          var arr []interface{}
                                          arr = append($list.l, $parametro.p)
                                          $l = arr
                                      }
        )*
    ;
2023-09-05 22:58:43:749 grammar LogManager.java:25 added: (RULE listParamsFunc (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (parametro (ELEMENT_OPTIONS (= tokenIndex 733))) {
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 725))) (parametro (ELEMENT_OPTIONS (= tokenIndex 727))) {
                                          var arr []interface{}
                                          arr = append($list.l, $parametro.p)
                                          $l = arr
                                      }))))))
2023-09-05 22:58:43:751 left-recursion LogManager.java:25 listParamsCall returns [[]interface{} l]
    :   ( {} expr<tokenIndex=848>  {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=840> expr<tokenIndex=842> {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }
        )*
    ;
2023-09-05 22:58:43:768 grammar LogManager.java:25 added: (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 848))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 840))) (expr (ELEMENT_OPTIONS (= tokenIndex 842))) {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }))))))
2023-09-05 22:58:43:814 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} SUB<tokenIndex=923> opDe=expr<tokenIndex=927,p=22> {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)} 
        | types<tokenIndex=933> PARIZQ<tokenIndex=935> expr<tokenIndex=937> PARDER<tokenIndex=939> { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) } 
        | NOT<tokenIndex=1097> right=expr<tokenIndex=1101,p=12> {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)} 
        | PARIZQ<tokenIndex=1109> expr<tokenIndex=1111> PARDER<tokenIndex=1113> { $e = $expr.e } 
        | CORIZQ<tokenIndex=1119> CORDER<tokenIndex=1121> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) } 
        | list=listArray<tokenIndex=1129> { $e = $list.p} 
        | CORIZQ<tokenIndex=1135> listParams<tokenIndex=1137> CORDER<tokenIndex=1139> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=1145>
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=1151>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=1157> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=1163> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | ID<tokenIndex=1169> PUNTO<tokenIndex=1171> COUNT<tokenIndex=1173> { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) } 
        | ID<tokenIndex=1179> PUNTO<tokenIndex=1181> ISEMPTY<tokenIndex=1183> { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) } 
        | NIL<tokenIndex=1189> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=(SUB_IG<tokenIndex=952>|SUM_IG<tokenIndex=954>) expr<tokenIndex=957,p=21> { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MUL<tokenIndex=970>|DIV<tokenIndex=972>|MOD<tokenIndex=974>) right=expr<tokenIndex=979,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(ADD<tokenIndex=992>|SUB<tokenIndex=994>) right=expr<tokenIndex=999,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MAY_IG<tokenIndex=1012>|MAYOR<tokenIndex=1014>) right=expr<tokenIndex=1019,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MEN_IG<tokenIndex=1032>|MENOR<tokenIndex=1034>) right=expr<tokenIndex=1039,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(IG_IG<tokenIndex=1052>|DIF<tokenIndex=1054>) right=expr<tokenIndex=1059,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=AND<tokenIndex=1071> right=expr<tokenIndex=1075,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=OR<tokenIndex=1087> right=expr<tokenIndex=1091,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-09-05 22:58:43:918 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (SUB (ELEMENT_OPTIONS (= tokenIndex 923))) (= opDe (expr (ELEMENT_OPTIONS (= tokenIndex 927) (= p 22)))) {$e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)}) (ALT (types (ELEMENT_OPTIONS (= tokenIndex 933))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 935))) (expr (ELEMENT_OPTIONS (= tokenIndex 937))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 939))) { $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) }) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 1097))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1101) (= p 12)))) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)}) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1109))) (expr (ELEMENT_OPTIONS (= tokenIndex 1111))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1113))) { $e = $expr.e }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1119))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1121))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 1129)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1135))) (listParams (ELEMENT_OPTIONS (= tokenIndex 1137))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1139))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 1145))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 1151))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 1157))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 1163))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1169))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1171))) (COUNT (ELEMENT_OPTIONS (= tokenIndex 1173))) { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1179))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1181))) (ISEMPTY (ELEMENT_OPTIONS (= tokenIndex 1183))) { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 1189))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (SET (SUB_IG (ELEMENT_OPTIONS (= tokenIndex 952))) (SUM_IG (ELEMENT_OPTIONS (= tokenIndex 954))))) (expr (ELEMENT_OPTIONS (= tokenIndex 957) (= p 21))) { $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 970))) (DIV (ELEMENT_OPTIONS (= tokenIndex 972))) (MOD (ELEMENT_OPTIONS (= tokenIndex 974))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 979) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 992))) (SUB (ELEMENT_OPTIONS (= tokenIndex 994))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 999) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 1012))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1014))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1019) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 1032))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1034))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1039) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 1052))) (DIF (ELEMENT_OPTIONS (= tokenIndex 1054))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1059) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 1071)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1075) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 1087)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1091) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-09-05 22:58:43:920 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=1214> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1206> expr<tokenIndex=1208> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-09-05 22:58:43:931 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1214))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1206))) (expr (ELEMENT_OPTIONS (= tokenIndex 1208))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-09-05 22:58:43:931 left-recursion LogManager.java:25 listAccessArray returns [[]interface{} l]
    :   ( {} CORIZQ<tokenIndex=1241> expr<tokenIndex=1243> CORDER<tokenIndex=1245> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=1231> expr<tokenIndex=1233> CORDER<tokenIndex=1235> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-09-05 22:58:43:936 grammar LogManager.java:25 added: (RULE listAccessArray (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1241))) (expr (ELEMENT_OPTIONS (= tokenIndex 1243))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1245))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1231))) (expr (ELEMENT_OPTIONS (= tokenIndex 1233))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1235))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-09-05 22:58:43:938 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=1294> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> CORIZQ<tokenIndex=1264> expr<tokenIndex=1266> CORDER<tokenIndex=1268> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> types<tokenIndex=1280> IG<tokenIndex=1282> CORIZQ<tokenIndex=1284> expr<tokenIndex=1286> CORDER<tokenIndex=1288> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-09-05 22:58:43:945 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1294))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1264))) (expr (ELEMENT_OPTIONS (= tokenIndex 1266))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1268))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (types (ELEMENT_OPTIONS (= tokenIndex 1280))) (IG (ELEMENT_OPTIONS (= tokenIndex 1282))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1284))) (expr (ELEMENT_OPTIONS (= tokenIndex 1286))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1288))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-09-05 22:58:43:961 left-recursion LogManager.java:25 exprComa returns [interfaces.Expression t]
    :   ( {} expr<tokenIndex=1323> { $t = $expr.e } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> op=COMA<tokenIndex=1313> right=expr<tokenIndex=1317> { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }
        )*
    ;
2023-09-05 22:58:43:974 grammar LogManager.java:25 added: (RULE exprComa (returns interfaces.Expression t) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1323))) { $t = $expr.e })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (= op (COMA (ELEMENT_OPTIONS (= tokenIndex 1313)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1317)))) { $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) }))))))
2023-09-05 22:58:44:182 grammar LogManager.java:25 import INT=1
2023-09-05 22:58:44:187 grammar LogManager.java:25 import FLOAT=2
2023-09-05 22:58:44:188 grammar LogManager.java:25 import BOOL=3
2023-09-05 22:58:44:188 grammar LogManager.java:25 import STR=4
2023-09-05 22:58:44:188 grammar LogManager.java:25 import CHAR=5
2023-09-05 22:58:44:188 grammar LogManager.java:25 import VAR=6
2023-09-05 22:58:44:188 grammar LogManager.java:25 import LET=7
2023-09-05 22:58:44:191 grammar LogManager.java:25 import VOID=8
2023-09-05 22:58:44:192 grammar LogManager.java:25 import TRU=9
2023-09-05 22:58:44:192 grammar LogManager.java:25 import FAL=10
2023-09-05 22:58:44:192 grammar LogManager.java:25 import PRINT=11
2023-09-05 22:58:44:192 grammar LogManager.java:25 import IF=12
2023-09-05 22:58:44:192 grammar LogManager.java:25 import ELSE=13
2023-09-05 22:58:44:192 grammar LogManager.java:25 import WHILE=14
2023-09-05 22:58:44:192 grammar LogManager.java:25 import FOR=15
2023-09-05 22:58:44:192 grammar LogManager.java:25 import IN=16
2023-09-05 22:58:44:192 grammar LogManager.java:25 import SWITCH=17
2023-09-05 22:58:44:193 grammar LogManager.java:25 import CASE=18
2023-09-05 22:58:44:194 grammar LogManager.java:25 import DEFAULT=19
2023-09-05 22:58:44:194 grammar LogManager.java:25 import BREAK=20
2023-09-05 22:58:44:194 grammar LogManager.java:25 import RETURN=21
2023-09-05 22:58:44:194 grammar LogManager.java:25 import CONTINUE=22
2023-09-05 22:58:44:194 grammar LogManager.java:25 import GUARD=23
2023-09-05 22:58:44:194 grammar LogManager.java:25 import FUNC=24
2023-09-05 22:58:44:194 grammar LogManager.java:25 import NIL=25
2023-09-05 22:58:44:196 grammar LogManager.java:25 import STRUCT=26
2023-09-05 22:58:44:196 grammar LogManager.java:25 import MUTATING=27
2023-09-05 22:58:44:196 grammar LogManager.java:25 import SELF=28
2023-09-05 22:58:44:196 grammar LogManager.java:25 import INOUT=29
2023-09-05 22:58:44:197 grammar LogManager.java:25 import APPEND=30
2023-09-05 22:58:44:197 grammar LogManager.java:25 import REMOVELAST=31
2023-09-05 22:58:44:197 grammar LogManager.java:25 import REMOVE=32
2023-09-05 22:58:44:197 grammar LogManager.java:25 import AT=33
2023-09-05 22:58:44:197 grammar LogManager.java:25 import ISEMPTY=34
2023-09-05 22:58:44:197 grammar LogManager.java:25 import COUNT=35
2023-09-05 22:58:44:197 grammar LogManager.java:25 import NUMBER=36
2023-09-05 22:58:44:197 grammar LogManager.java:25 import STRING=37
2023-09-05 22:58:44:198 grammar LogManager.java:25 import ID=38
2023-09-05 22:58:44:198 grammar LogManager.java:25 import DIF=39
2023-09-05 22:58:44:198 grammar LogManager.java:25 import IG_IG=40
2023-09-05 22:58:44:198 grammar LogManager.java:25 import NOT=41
2023-09-05 22:58:44:198 grammar LogManager.java:25 import OR=42
2023-09-05 22:58:44:198 grammar LogManager.java:25 import AND=43
2023-09-05 22:58:44:198 grammar LogManager.java:25 import IG=44
2023-09-05 22:58:44:198 grammar LogManager.java:25 import MAY_IG=45
2023-09-05 22:58:44:198 grammar LogManager.java:25 import MEN_IG=46
2023-09-05 22:58:44:198 grammar LogManager.java:25 import SUM_IG=47
2023-09-05 22:58:44:198 grammar LogManager.java:25 import SUB_IG=48
2023-09-05 22:58:44:198 grammar LogManager.java:25 import MAYOR=49
2023-09-05 22:58:44:199 grammar LogManager.java:25 import MENOR=50
2023-09-05 22:58:44:199 grammar LogManager.java:25 import MUL=51
2023-09-05 22:58:44:199 grammar LogManager.java:25 import DIV=52
2023-09-05 22:58:44:199 grammar LogManager.java:25 import ADD=53
2023-09-05 22:58:44:199 grammar LogManager.java:25 import SUB=54
2023-09-05 22:58:44:199 grammar LogManager.java:25 import MOD=55
2023-09-05 22:58:44:199 grammar LogManager.java:25 import PARIZQ=56
2023-09-05 22:58:44:199 grammar LogManager.java:25 import PARDER=57
2023-09-05 22:58:44:199 grammar LogManager.java:25 import LLAVEIZQ=58
2023-09-05 22:58:44:200 grammar LogManager.java:25 import LLAVEDER=59
2023-09-05 22:58:44:200 grammar LogManager.java:25 import D_PTS=60
2023-09-05 22:58:44:200 grammar LogManager.java:25 import CORIZQ=61
2023-09-05 22:58:44:200 grammar LogManager.java:25 import CORDER=62
2023-09-05 22:58:44:200 grammar LogManager.java:25 import COMA=63
2023-09-05 22:58:44:200 grammar LogManager.java:25 import PUNTO=64
2023-09-05 22:58:44:200 grammar LogManager.java:25 import COMILLA=65
2023-09-05 22:58:44:200 grammar LogManager.java:25 import FLECHA=66
2023-09-05 22:58:44:200 grammar LogManager.java:25 import GUIONBAJO=67
2023-09-05 22:58:44:200 grammar LogManager.java:25 import WHITESPACE=68
2023-09-05 22:58:44:200 grammar LogManager.java:25 import COMMENT=69
2023-09-05 22:58:44:200 grammar LogManager.java:25 import LINE_COMMENT=70
2023-09-05 22:58:44:200 grammar LogManager.java:25 import 'Int'=1
2023-09-05 22:58:44:200 grammar LogManager.java:25 import 'Float'=2
2023-09-05 22:58:44:200 grammar LogManager.java:25 import 'Bool'=3
2023-09-05 22:58:44:201 grammar LogManager.java:25 import 'String'=4
2023-09-05 22:58:44:201 grammar LogManager.java:25 import 'Character'=5
2023-09-05 22:58:44:201 grammar LogManager.java:25 import 'var'=6
2023-09-05 22:58:44:201 grammar LogManager.java:25 import 'let'=7
2023-09-05 22:58:44:201 grammar LogManager.java:25 import 'void'=8
2023-09-05 22:58:44:201 grammar LogManager.java:25 import 'true'=9
2023-09-05 22:58:44:201 grammar LogManager.java:25 import 'false'=10
2023-09-05 22:58:44:201 grammar LogManager.java:25 import 'print'=11
2023-09-05 22:58:44:202 grammar LogManager.java:25 import 'if'=12
2023-09-05 22:58:44:202 grammar LogManager.java:25 import 'else'=13
2023-09-05 22:58:44:202 grammar LogManager.java:25 import 'while'=14
2023-09-05 22:58:44:202 grammar LogManager.java:25 import 'for'=15
2023-09-05 22:58:44:202 grammar LogManager.java:25 import 'in'=16
2023-09-05 22:58:44:202 grammar LogManager.java:25 import 'switch'=17
2023-09-05 22:58:44:202 grammar LogManager.java:25 import 'case'=18
2023-09-05 22:58:44:204 grammar LogManager.java:25 import 'default'=19
2023-09-05 22:58:44:204 grammar LogManager.java:25 import 'break'=20
2023-09-05 22:58:44:205 grammar LogManager.java:25 import 'return'=21
2023-09-05 22:58:44:205 grammar LogManager.java:25 import 'continue'=22
2023-09-05 22:58:44:205 grammar LogManager.java:25 import 'guard'=23
2023-09-05 22:58:44:205 grammar LogManager.java:25 import 'func'=24
2023-09-05 22:58:44:205 grammar LogManager.java:25 import 'nil'=25
2023-09-05 22:58:44:205 grammar LogManager.java:25 import 'struct'=26
2023-09-05 22:58:44:205 grammar LogManager.java:25 import 'mutating'=27
2023-09-05 22:58:44:206 grammar LogManager.java:25 import 'self'=28
2023-09-05 22:58:44:206 grammar LogManager.java:25 import 'inout'=29
2023-09-05 22:58:44:206 grammar LogManager.java:25 import 'append'=30
2023-09-05 22:58:44:206 grammar LogManager.java:25 import 'removeLast'=31
2023-09-05 22:58:44:206 grammar LogManager.java:25 import 'remove'=32
2023-09-05 22:58:44:206 grammar LogManager.java:25 import 'at'=33
2023-09-05 22:58:44:206 grammar LogManager.java:25 import 'isEmpty'=34
2023-09-05 22:58:44:206 grammar LogManager.java:25 import 'count'=35
2023-09-05 22:58:44:206 grammar LogManager.java:25 import '!='=39
2023-09-05 22:58:44:206 grammar LogManager.java:25 import '=='=40
2023-09-05 22:58:44:206 grammar LogManager.java:25 import '!'=41
2023-09-05 22:58:44:207 grammar LogManager.java:25 import '||'=42
2023-09-05 22:58:44:207 grammar LogManager.java:25 import '&&'=43
2023-09-05 22:58:44:207 grammar LogManager.java:25 import '='=44
2023-09-05 22:58:44:207 grammar LogManager.java:25 import '>='=45
2023-09-05 22:58:44:207 grammar LogManager.java:25 import '<='=46
2023-09-05 22:58:44:207 grammar LogManager.java:25 import '+='=47
2023-09-05 22:58:44:207 grammar LogManager.java:25 import '-='=48
2023-09-05 22:58:44:208 grammar LogManager.java:25 import '>'=49
2023-09-05 22:58:44:208 grammar LogManager.java:25 import '<'=50
2023-09-05 22:58:44:208 grammar LogManager.java:25 import '*'=51
2023-09-05 22:58:44:208 grammar LogManager.java:25 import '/'=52
2023-09-05 22:58:44:208 grammar LogManager.java:25 import '+'=53
2023-09-05 22:58:44:208 grammar LogManager.java:25 import '-'=54
2023-09-05 22:58:44:208 grammar LogManager.java:25 import '%'=55
2023-09-05 22:58:44:208 grammar LogManager.java:25 import '('=56
2023-09-05 22:58:44:208 grammar LogManager.java:25 import ')'=57
2023-09-05 22:58:44:208 grammar LogManager.java:25 import '{'=58
2023-09-05 22:58:44:208 grammar LogManager.java:25 import '}'=59
2023-09-05 22:58:44:209 grammar LogManager.java:25 import ':'=60
2023-09-05 22:58:44:209 grammar LogManager.java:25 import '['=61
2023-09-05 22:58:44:209 grammar LogManager.java:25 import ']'=62
2023-09-05 22:58:44:209 grammar LogManager.java:25 import ','=63
2023-09-05 22:58:44:209 grammar LogManager.java:25 import '.'=64
2023-09-05 22:58:44:209 grammar LogManager.java:25 import '"'=65
2023-09-05 22:58:44:210 grammar LogManager.java:25 import '->'=66
2023-09-05 22:58:44:210 grammar LogManager.java:25 import '_'=67
2023-09-05 22:58:44:211 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO=64, COMILLA=65, FLECHA=66, GUIONBAJO=67, WHITESPACE=68, COMMENT=69, LINE_COMMENT=70, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, '.'=64, '"'=65, '->'=66, '_'=67}
2023-09-05 22:58:44:217 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, CHAR=5, VAR=6, LET=7, VOID=8, TRU=9, FAL=10, PRINT=11, IF=12, ELSE=13, WHILE=14, FOR=15, IN=16, SWITCH=17, CASE=18, DEFAULT=19, BREAK=20, RETURN=21, CONTINUE=22, GUARD=23, FUNC=24, NIL=25, STRUCT=26, MUTATING=27, SELF=28, INOUT=29, APPEND=30, REMOVELAST=31, REMOVE=32, AT=33, ISEMPTY=34, COUNT=35, NUMBER=36, STRING=37, ID=38, DIF=39, IG_IG=40, NOT=41, OR=42, AND=43, IG=44, MAY_IG=45, MEN_IG=46, SUM_IG=47, SUB_IG=48, MAYOR=49, MENOR=50, MUL=51, DIV=52, ADD=53, SUB=54, MOD=55, PARIZQ=56, PARDER=57, LLAVEIZQ=58, LLAVEDER=59, D_PTS=60, CORIZQ=61, CORDER=62, COMA=63, PUNTO=64, COMILLA=65, FLECHA=66, GUIONBAJO=67, WHITESPACE=68, COMMENT=69, LINE_COMMENT=70}
2023-09-05 22:58:44:219 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'Character'=5, 'var'=6, 'let'=7, 'void'=8, 'true'=9, 'false'=10, 'print'=11, 'if'=12, 'else'=13, 'while'=14, 'for'=15, 'in'=16, 'switch'=17, 'case'=18, 'default'=19, 'break'=20, 'return'=21, 'continue'=22, 'guard'=23, 'func'=24, 'nil'=25, 'struct'=26, 'mutating'=27, 'self'=28, 'inout'=29, 'append'=30, 'removeLast'=31, 'remove'=32, 'at'=33, 'isEmpty'=34, 'count'=35, '!='=39, '=='=40, '!'=41, '||'=42, '&&'=43, '='=44, '>='=45, '<='=46, '+='=47, '-='=48, '>'=49, '<'=50, '*'=51, '/'=52, '+'=53, '-'=54, '%'=55, '('=56, ')'=57, '{'=58, '}'=59, ':'=60, '['=61, ']'=62, ','=63, '.'=64, '"'=65, '->'=66, '_'=67}
2023-09-05 22:58:44:495 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-05 22:58:44:498 LL1 LogManager.java:25 look=[{6..7, 11..12, 14..15, 20..24, 38}, {<EOF>, 59}]
2023-09-05 22:58:44:499 LL1 LogManager.java:25 LL(1)? true
2023-09-05 22:58:44:499 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-09-05 22:58:44:500 LL1 LogManager.java:25 look=[11, 12, {6..7}, 14, 38, 15, 23, 20, 22, 38, 21, 24, 38]
2023-09-05 22:58:44:501 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:501 LL1 LogManager.java:25 
DECISION 2 in rule printstmt
2023-09-05 22:58:44:501 LL1 LogManager.java:25 look=[11, 11]
2023-09-05 22:58:44:501 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:501 LL1 LogManager.java:25 
DECISION 3 in rule ifstmt
2023-09-05 22:58:44:501 LL1 LogManager.java:25 look=[12, 12, 12]
2023-09-05 22:58:44:501 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:501 LL1 LogManager.java:25 
DECISION 4 in rule declarationstmt
2023-09-05 22:58:44:507 LL1 LogManager.java:25 look=[6, 6, 6, 7, 7, 7]
2023-09-05 22:58:44:507 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:507 LL1 LogManager.java:25 
DECISION 5 in rule assignstmt
2023-09-05 22:58:44:507 LL1 LogManager.java:25 look=[38, 38, 38]
2023-09-05 22:58:44:508 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:508 LL1 LogManager.java:25 
DECISION 6 in rule forstmt
2023-09-05 22:58:44:508 LL1 LogManager.java:25 look=[15, 15]
2023-09-05 22:58:44:508 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:508 LL1 LogManager.java:25 
DECISION 7 in rule returnstmt
2023-09-05 22:58:44:508 LL1 LogManager.java:25 look=[21, 21]
2023-09-05 22:58:44:508 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:508 LL1 LogManager.java:25 
DECISION 8 in rule fnArray
2023-09-05 22:58:44:508 LL1 LogManager.java:25 look=[38, 38, 38]
2023-09-05 22:58:44:508 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:508 LL1 LogManager.java:25 
DECISION 9 in rule fnstmt
2023-09-05 22:58:44:508 LL1 LogManager.java:25 look=[24, 24]
2023-09-05 22:58:44:508 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:508 LL1 LogManager.java:25 
DECISION 10 in rule listParamsFunc
2023-09-05 22:58:44:508 LL1 LogManager.java:25 look=[{38, 67}, null]
2023-09-05 22:58:44:509 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:509 LL1 LogManager.java:25 
DECISION 11 in rule listParamsFunc
2023-09-05 22:58:44:509 LL1 LogManager.java:25 look=[null, 57]
2023-09-05 22:58:44:509 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:509 LL1 LogManager.java:25 
DECISION 12 in rule parametro
2023-09-05 22:58:44:509 LL1 LogManager.java:25 look=[38, 38, {38, 67}, {38, 67}]
2023-09-05 22:58:44:509 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:509 LL1 LogManager.java:25 
DECISION 13 in rule listParamsCall
2023-09-05 22:58:44:510 LL1 LogManager.java:25 look=[{1..4, 9..10, 25, 36..38, 41, 54, 56, 61, 65}, null]
2023-09-05 22:58:44:510 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:510 LL1 LogManager.java:25 
DECISION 14 in rule listParamsCall
2023-09-05 22:58:44:510 LL1 LogManager.java:25 look=[null, 57]
2023-09-05 22:58:44:510 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:510 LL1 LogManager.java:25 
DECISION 15 in rule types
2023-09-05 22:58:44:511 LL1 LogManager.java:25 look=[1, 2, 4, 3, 61, 65, 25]
2023-09-05 22:58:44:511 LL1 LogManager.java:25 LL(1)? true
2023-09-05 22:58:44:511 LL1 LogManager.java:25 
DECISION 16 in rule expr
2023-09-05 22:58:44:511 LL1 LogManager.java:25 look=[54, {1..4, 25, 61, 65}, 41, 56, 61, 38, 61, 36, 37, 9, 10, 38, 38, 25]
2023-09-05 22:58:44:511 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:512 LL1 LogManager.java:25 
DECISION 17 in rule expr
2023-09-05 22:58:44:512 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null]
2023-09-05 22:58:44:512 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:512 LL1 LogManager.java:25 
DECISION 18 in rule expr
2023-09-05 22:58:44:515 LL1 LogManager.java:25 look=[null, null]
2023-09-05 22:58:44:516 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:516 LL1 LogManager.java:25 
DECISION 19 in rule listParams
2023-09-05 22:58:44:516 LL1 LogManager.java:25 look=[null, 62]
2023-09-05 22:58:44:516 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:516 LL1 LogManager.java:25 
DECISION 20 in rule listAccessArray
2023-09-05 22:58:44:516 LL1 LogManager.java:25 look=[null, 44]
2023-09-05 22:58:44:516 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:516 LL1 LogManager.java:25 
DECISION 21 in rule listArray
2023-09-05 22:58:44:516 LL1 LogManager.java:25 look=[null, null]
2023-09-05 22:58:44:516 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:516 LL1 LogManager.java:25 
DECISION 22 in rule listArray
2023-09-05 22:58:44:518 LL1 LogManager.java:25 look=[null, null]
2023-09-05 22:58:44:518 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:518 LL1 LogManager.java:25 
DECISION 23 in rule exprComa
2023-09-05 22:58:44:518 LL1 LogManager.java:25 look=[null, 57]
2023-09-05 22:58:44:519 LL1 LogManager.java:25 LL(1)? false
2023-09-05 22:58:44:532 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-05 22:58:44:615 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-09-05 22:58:44:615 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-09-05 22:58:44:638 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-09-05 22:58:44:643 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-09-05 22:58:44:644 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-09-05 22:58:44:652 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-09-05 22:58:44:652 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,33:13]
2023-09-05 22:58:44:652 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,33:27]
2023-09-05 22:58:44:658 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-09-05 22:58:44:658 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:14]
2023-09-05 22:58:44:658 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,40:22].[@-1,20:23='prnt',<0>,40:32]
2023-09-05 22:58:44:661 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-09-05 22:58:44:661 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:11]
2023-09-05 22:58:44:661 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,41:19].[@-1,17:22='ifinst',<0>,41:26]
2023-09-05 22:58:44:678 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-09-05 22:58:44:678 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:20]
2023-09-05 22:58:44:679 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,42:28].[@-1,26:28='dec',<0>,42:44]
2023-09-05 22:58:44:680 action-translator LogManager.java:25 translate  $inst = $whilestmt.whl 
2023-09-05 22:58:44:680 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-09-05 22:58:44:680 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:22='whl',<0>,43:32]
2023-09-05 22:58:44:681 action-translator LogManager.java:25 translate  $inst = $assignstmt.asg 
2023-09-05 22:58:44:682 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:15]
2023-09-05 22:58:44:682 action-translator LogManager.java:25 qattr [@-1,10:19='assignstmt',<0>,44:23].[@-1,21:23='asg',<0>,44:34]
2023-09-05 22:58:44:683 action-translator LogManager.java:25 translate  $inst = $forstmt.fr 
2023-09-05 22:58:44:684 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:12]
2023-09-05 22:58:44:686 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,45:20].[@-1,18:19='fr',<0>,45:28]
2023-09-05 22:58:44:688 action-translator LogManager.java:25 translate  $inst = $guardstmt.grd 
2023-09-05 22:58:44:688 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:14]
2023-09-05 22:58:44:688 action-translator LogManager.java:25 qattr [@-1,10:18='guardstmt',<0>,46:22].[@-1,20:22='grd',<0>,46:32]
2023-09-05 22:58:44:690 action-translator LogManager.java:25 translate  $inst = $breakstmt.brk 
2023-09-05 22:58:44:690 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:14]
2023-09-05 22:58:44:691 action-translator LogManager.java:25 qattr [@-1,10:18='breakstmt',<0>,47:22].[@-1,20:22='brk',<0>,47:32]
2023-09-05 22:58:44:692 action-translator LogManager.java:25 translate  $inst = $continuestmt.cnt 
2023-09-05 22:58:44:694 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:17]
2023-09-05 22:58:44:702 action-translator LogManager.java:25 qattr [@-1,10:21='continuestmt',<0>,48:25].[@-1,23:25='cnt',<0>,48:38]
2023-09-05 22:58:44:704 action-translator LogManager.java:25 translate  $inst = $fnArray.p 
2023-09-05 22:58:44:705 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,49:12]
2023-09-05 22:58:44:705 action-translator LogManager.java:25 qattr [@-1,10:16='fnArray',<0>,49:20].[@-1,18:18='p',<0>,49:28]
2023-09-05 22:58:44:706 action-translator LogManager.java:25 translate  $inst = $returnstmt.ret 
2023-09-05 22:58:44:706 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,51:15]
2023-09-05 22:58:44:707 action-translator LogManager.java:25 qattr [@-1,10:19='returnstmt',<0>,51:23].[@-1,21:23='ret',<0>,51:34]
2023-09-05 22:58:44:708 action-translator LogManager.java:25 translate  $inst = $fnstmt.fn 
2023-09-05 22:58:44:708 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,52:11]
2023-09-05 22:58:44:709 action-translator LogManager.java:25 qattr [@-1,10:15='fnstmt',<0>,52:19].[@-1,17:18='fn',<0>,52:26]
2023-09-05 22:58:44:711 action-translator LogManager.java:25 translate  $inst = $callFunction.cf 
2023-09-05 22:58:44:711 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,53:17]
2023-09-05 22:58:44:711 action-translator LogManager.java:25 qattr [@-1,10:21='callFunction',<0>,53:25].[@-1,23:24='cf',<0>,53:38]
2023-09-05 22:58:44:716 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-09-05 22:58:44:716 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,57:29]
2023-09-05 22:58:44:717 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,57:59].[@-1,38:41='line',<0>,57:65]
2023-09-05 22:58:44:727 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,57:71].[@-1,50:52='pos',<0>,57:77]
2023-09-05 22:58:44:730 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,57:82].[@-1,60:60='e',<0>,57:87]
2023-09-05 22:58:44:732 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$exprComa.t)
2023-09-05 22:58:44:733 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,58:33]
2023-09-05 22:58:44:734 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,58:63].[@-1,38:41='line',<0>,58:69]
2023-09-05 22:58:44:738 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,58:75].[@-1,50:52='pos',<0>,58:81]
2023-09-05 22:58:44:738 action-translator LogManager.java:25 qattr [@-1,55:62='exprComa',<0>,58:86].[@-1,64:64='t',<0>,58:95]
2023-09-05 22:58:44:748 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-09-05 22:58:44:748 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,62:40]
2023-09-05 22:58:44:749 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,62:69].[@-1,34:37='line',<0>,62:72]
2023-09-05 22:58:44:749 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,62:79].[@-1,44:46='pos',<0>,62:82]
2023-09-05 22:58:44:750 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,62:88].[@-1,55:55='e',<0>,62:93]
2023-09-05 22:58:44:750 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,62:97].[@-1,65:67='blk',<0>,62:103]
2023-09-05 22:58:44:751 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $e1.blk, $e2.blk) 
2023-09-05 22:58:44:751 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,63:75]
2023-09-05 22:58:44:752 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,63:104].[@-1,34:37='line',<0>,63:107]
2023-09-05 22:58:44:752 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,63:114].[@-1,44:46='pos',<0>,63:117]
2023-09-05 22:58:44:753 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,63:123].[@-1,55:55='e',<0>,63:128]
2023-09-05 22:58:44:753 action-translator LogManager.java:25 qattr [@-1,59:60='e1',<0>,63:132].[@-1,62:64='blk',<0>,63:135]
2023-09-05 22:58:44:797 action-translator LogManager.java:25 qattr [@-1,68:69='e2',<0>,63:141].[@-1,71:73='blk',<0>,63:144]
2023-09-05 22:58:44:799 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, []interface{}{$ifstmt.ifinst}) 
2023-09-05 22:58:44:802 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,64:52]
2023-09-05 22:58:44:804 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,64:81].[@-1,34:37='line',<0>,64:84]
2023-09-05 22:58:44:805 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,64:91].[@-1,44:46='pos',<0>,64:94]
2023-09-05 22:58:44:809 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,64:100].[@-1,55:55='e',<0>,64:105]
2023-09-05 22:58:44:809 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,64:109].[@-1,65:67='blk',<0>,64:115]
2023-09-05 22:58:44:810 action-translator LogManager.java:25 qattr [@-1,85:90='ifstmt',<0>,64:135].[@-1,92:97='ifinst',<0>,64:142]
2023-09-05 22:58:44:817 action-translator LogManager.java:25 translate  $whl = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-09-05 22:58:44:817 action-translator LogManager.java:25 attr [@-1,2:4='whl',<0>,68:43]
2023-09-05 22:58:44:818 action-translator LogManager.java:25 qattr [@-1,31:35='WHILE',<0>,68:72].[@-1,37:40='line',<0>,68:78]
2023-09-05 22:58:44:818 action-translator LogManager.java:25 qattr [@-1,44:48='WHILE',<0>,68:85].[@-1,50:52='pos',<0>,68:91]
2023-09-05 22:58:44:818 action-translator LogManager.java:25 qattr [@-1,56:59='expr',<0>,68:97].[@-1,61:61='e',<0>,68:102]
2023-09-05 22:58:44:818 action-translator LogManager.java:25 qattr [@-1,65:69='block',<0>,68:106].[@-1,71:73='blk',<0>,68:112]
2023-09-05 22:58:44:825 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, true) 
2023-09-05 22:58:44:825 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,72:32]
2023-09-05 22:58:44:826 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,72:67].[@-1,41:44='line',<0>,72:71]
2023-09-05 22:58:44:826 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,72:78].[@-1,52:54='pos',<0>,72:82]
2023-09-05 22:58:44:827 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,72:88].[@-1,61:64='text',<0>,72:91]
2023-09-05 22:58:44:828 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,72:98].[@-1,74:75='ty',<0>,72:104]
2023-09-05 22:58:44:828 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,72:109].[@-1,84:84='e',<0>,72:114]
2023-09-05 22:58:44:829 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.UNKNOWN, $expr.e, true) 
2023-09-05 22:58:44:830 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,73:19]
2023-09-05 22:58:44:830 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,73:54].[@-1,41:44='line',<0>,73:58]
2023-09-05 22:58:44:830 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,73:65].[@-1,52:54='pos',<0>,73:69]
2023-09-05 22:58:44:830 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,73:75].[@-1,61:64='text',<0>,73:78]
2023-09-05 22:58:44:830 action-translator LogManager.java:25 qattr [@-1,89:92='expr',<0>,73:106].[@-1,94:94='e',<0>,73:111]
2023-09-05 22:58:44:832 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, nil, true) 
2023-09-05 22:58:44:832 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,74:24]
2023-09-05 22:58:44:832 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,74:59].[@-1,41:44='line',<0>,74:63]
2023-09-05 22:58:44:833 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,74:70].[@-1,52:54='pos',<0>,74:74]
2023-09-05 22:58:44:833 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,74:80].[@-1,61:64='text',<0>,74:83]
2023-09-05 22:58:44:834 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,74:90].[@-1,74:75='ty',<0>,74:96]
2023-09-05 22:58:44:835 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, false) 
2023-09-05 22:58:44:835 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,75:32]
2023-09-05 22:58:44:836 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,75:67].[@-1,41:44='line',<0>,75:71]
2023-09-05 22:58:44:836 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,75:78].[@-1,52:54='pos',<0>,75:82]
2023-09-05 22:58:44:837 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,75:88].[@-1,61:64='text',<0>,75:91]
2023-09-05 22:58:44:837 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,75:98].[@-1,74:75='ty',<0>,75:104]
2023-09-05 22:58:44:837 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,75:109].[@-1,84:84='e',<0>,75:114]
2023-09-05 22:58:44:838 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, nil, false) 
2023-09-05 22:58:44:838 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,76:24]
2023-09-05 22:58:44:839 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,76:59].[@-1,41:44='line',<0>,76:63]
2023-09-05 22:58:44:839 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,76:70].[@-1,52:54='pos',<0>,76:74]
2023-09-05 22:58:44:839 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,76:80].[@-1,61:64='text',<0>,76:83]
2023-09-05 22:58:44:839 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,76:90].[@-1,74:75='ty',<0>,76:96]
2023-09-05 22:58:44:840 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.UNKNOWN, $expr.e, false) 
2023-09-05 22:58:44:840 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,77:19]
2023-09-05 22:58:44:840 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,77:54].[@-1,41:44='line',<0>,77:58]
2023-09-05 22:58:44:841 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,77:65].[@-1,52:54='pos',<0>,77:69]
2023-09-05 22:58:44:841 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,77:75].[@-1,61:64='text',<0>,77:78]
2023-09-05 22:58:44:842 action-translator LogManager.java:25 qattr [@-1,89:92='expr',<0>,77:106].[@-1,94:94='e',<0>,77:111]
2023-09-05 22:58:44:847 action-translator LogManager.java:25 translate  $asg = instructions.NewAssign($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-05 22:58:44:847 action-translator LogManager.java:25 attr [@-1,2:4='asg',<0>,81:18]
2023-09-05 22:58:44:847 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,81:48].[@-1,35:38='line',<0>,81:51]
2023-09-05 22:58:44:848 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,81:58].[@-1,45:47='pos',<0>,81:61]
2023-09-05 22:58:44:861 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,81:67].[@-1,54:57='text',<0>,81:70]
2023-09-05 22:58:44:861 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,81:77].[@-1,66:66='e',<0>,81:82]
2023-09-05 22:58:44:863 action-translator LogManager.java:25 translate  $asg = instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e); 
2023-09-05 22:58:44:864 action-translator LogManager.java:25 setAttr [@-1,2:4='asg',<0>,82:33] [@-1,7:89=' instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e)',<0>,82:38]
2023-09-05 22:58:44:864 action-translator LogManager.java:25 translate  instructions.NewImplicitAssignment($ID.line, $ID.pos, $ID.text, $op.text, $expr.e)
2023-09-05 22:58:44:864 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,82:68].[@-1,40:43='line',<0>,82:71]
2023-09-05 22:58:44:865 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,82:78].[@-1,50:52='pos',<0>,82:81]
2023-09-05 22:58:44:866 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,82:87].[@-1,59:62='text',<0>,82:90]
2023-09-05 22:58:44:866 action-translator LogManager.java:25 qattr [@-1,66:67='op',<0>,82:97].[@-1,69:72='text',<0>,82:100]
2023-09-05 22:58:44:867 action-translator LogManager.java:25 qattr [@-1,76:79='expr',<0>,82:107].[@-1,81:81='e',<0>,82:112]
2023-09-05 22:58:44:869 action-translator LogManager.java:25 translate  $asg = instructions.NewArrayAssign($ID.line, $ID.pos, $ID.text, $listAccessArray.l, $expr.e) 
2023-09-05 22:58:44:869 action-translator LogManager.java:25 attr [@-1,2:4='asg',<0>,83:31]
2023-09-05 22:58:44:869 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,83:66].[@-1,40:43='line',<0>,83:69]
2023-09-05 22:58:44:870 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,83:76].[@-1,50:52='pos',<0>,83:79]
2023-09-05 22:58:44:870 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,83:85].[@-1,59:62='text',<0>,83:88]
2023-09-05 22:58:44:870 action-translator LogManager.java:25 qattr [@-1,66:80='listAccessArray',<0>,83:95].[@-1,82:82='l',<0>,83:111]
2023-09-05 22:58:44:870 action-translator LogManager.java:25 qattr [@-1,86:89='expr',<0>,83:115].[@-1,91:91='e',<0>,83:120]
2023-09-05 22:58:44:875 action-translator LogManager.java:25 translate  $fr = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk); 
2023-09-05 22:58:44:875 action-translator LogManager.java:25 setAttr [@-1,2:3='fr',<0>,87:76] [@-1,6:88=' instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk)',<0>,87:80]
2023-09-05 22:58:44:875 action-translator LogManager.java:25 translate  instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $exp1.e, $exp2.e, $block.blk)
2023-09-05 22:58:44:875 action-translator LogManager.java:25 qattr [@-1,24:26='FOR',<0>,87:98].[@-1,28:31='line',<0>,87:102]
2023-09-05 22:58:44:877 action-translator LogManager.java:25 qattr [@-1,35:37='FOR',<0>,87:109].[@-1,39:41='pos',<0>,87:113]
2023-09-05 22:58:44:877 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,87:119].[@-1,48:51='text',<0>,87:122]
2023-09-05 22:58:44:878 action-translator LogManager.java:25 qattr [@-1,55:58='exp1',<0>,87:129].[@-1,60:60='e',<0>,87:134]
2023-09-05 22:58:44:878 action-translator LogManager.java:25 qattr [@-1,64:67='exp2',<0>,87:138].[@-1,69:69='e',<0>,87:143]
2023-09-05 22:58:44:878 action-translator LogManager.java:25 qattr [@-1,73:77='block',<0>,87:147].[@-1,79:81='blk',<0>,87:153]
2023-09-05 22:58:44:879 action-translator LogManager.java:25 translate  $fr = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk); 
2023-09-05 22:58:44:880 action-translator LogManager.java:25 setAttr [@-1,2:3='fr',<0>,88:43] [@-1,6:77=' instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk)',<0>,88:47]
2023-09-05 22:58:44:880 action-translator LogManager.java:25 translate  instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $expr.e, $block.blk)
2023-09-05 22:58:44:880 action-translator LogManager.java:25 qattr [@-1,22:24='FOR',<0>,88:63].[@-1,26:29='line',<0>,88:67]
2023-09-05 22:58:44:880 action-translator LogManager.java:25 qattr [@-1,33:35='FOR',<0>,88:74].[@-1,37:39='pos',<0>,88:78]
2023-09-05 22:58:44:881 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,88:84].[@-1,46:49='text',<0>,88:87]
2023-09-05 22:58:44:881 action-translator LogManager.java:25 qattr [@-1,53:56='expr',<0>,88:94].[@-1,58:58='e',<0>,88:99]
2023-09-05 22:58:44:882 action-translator LogManager.java:25 qattr [@-1,62:66='block',<0>,88:103].[@-1,68:70='blk',<0>,88:109]
2023-09-05 22:58:44:884 action-translator LogManager.java:25 translate  $grd = instructions.NewGuard($GUARD.line, $GUARD.pos, $expr.e, $block.blk) 
2023-09-05 22:58:44:884 action-translator LogManager.java:25 attr [@-1,2:4='grd',<0>,92:44]
2023-09-05 22:58:44:885 action-translator LogManager.java:25 qattr [@-1,31:35='GUARD',<0>,92:73].[@-1,37:40='line',<0>,92:79]
2023-09-05 22:58:44:885 action-translator LogManager.java:25 qattr [@-1,44:48='GUARD',<0>,92:86].[@-1,50:52='pos',<0>,92:92]
2023-09-05 22:58:44:886 action-translator LogManager.java:25 qattr [@-1,56:59='expr',<0>,92:98].[@-1,61:61='e',<0>,92:103]
2023-09-05 22:58:44:886 action-translator LogManager.java:25 qattr [@-1,65:69='block',<0>,92:107].[@-1,71:73='blk',<0>,92:113]
2023-09-05 22:58:44:888 action-translator LogManager.java:25 translate  $brk = instructions.NewBreak($BREAK.line, $BREAK.pos) 
2023-09-05 22:58:44:888 action-translator LogManager.java:25 attr [@-1,2:4='brk',<0>,97:10]
2023-09-05 22:58:44:888 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,97:39].[@-1,37:40='line',<0>,97:45]
2023-09-05 22:58:44:889 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,97:52].[@-1,50:52='pos',<0>,97:58]
2023-09-05 22:58:44:890 action-translator LogManager.java:25 translate  $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) 
2023-09-05 22:58:44:890 action-translator LogManager.java:25 attr [@-1,2:4='cnt',<0>,101:13]
2023-09-05 22:58:44:891 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,101:45].[@-1,43:46='line',<0>,101:54]
2023-09-05 22:58:44:891 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,101:61].[@-1,59:61='pos',<0>,101:70]
2023-09-05 22:58:44:893 action-translator LogManager.java:25 translate  $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e) 
2023-09-05 22:58:44:893 action-translator LogManager.java:25 attr [@-1,2:4='ret',<0>,105:16]
2023-09-05 22:58:44:894 action-translator LogManager.java:25 qattr [@-1,32:37='RETURN',<0>,105:46].[@-1,39:42='line',<0>,105:53]
2023-09-05 22:58:44:894 action-translator LogManager.java:25 qattr [@-1,46:51='RETURN',<0>,105:60].[@-1,53:55='pos',<0>,105:67]
2023-09-05 22:58:44:894 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,105:73].[@-1,64:64='e',<0>,105:78]
2023-09-05 22:58:44:895 action-translator LogManager.java:25 translate  $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) 
2023-09-05 22:58:44:895 action-translator LogManager.java:25 attr [@-1,2:4='ret',<0>,106:11]
2023-09-05 22:58:44:895 action-translator LogManager.java:25 qattr [@-1,32:37='RETURN',<0>,106:41].[@-1,39:42='line',<0>,106:48]
2023-09-05 22:58:44:940 action-translator LogManager.java:25 qattr [@-1,46:51='RETURN',<0>,106:55].[@-1,53:55='pos',<0>,106:62]
2023-09-05 22:58:44:961 action-translator LogManager.java:25 translate  $p = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-05 22:58:44:962 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,110:39]
2023-09-05 22:58:44:962 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,110:67].[@-1,33:36='line',<0>,110:70]
2023-09-05 22:58:44:963 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,110:77].[@-1,43:45='pos',<0>,110:80]
2023-09-05 22:58:44:967 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,110:86].[@-1,52:55='text',<0>,110:89]
2023-09-05 22:58:44:968 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,110:96].[@-1,64:64='e',<0>,110:101]
2023-09-05 22:58:44:969 action-translator LogManager.java:25 translate  $p = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-05 22:58:44:969 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,111:48]
2023-09-05 22:58:44:970 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,111:78].[@-1,35:38='line',<0>,111:81]
2023-09-05 22:58:44:970 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,111:88].[@-1,45:47='pos',<0>,111:91]
2023-09-05 22:58:44:971 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,111:97].[@-1,54:57='text',<0>,111:100]
2023-09-05 22:58:44:971 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,111:107].[@-1,66:66='e',<0>,111:112]
2023-09-05 22:58:44:972 action-translator LogManager.java:25 translate  $p = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) 
2023-09-05 22:58:44:972 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,112:38]
2023-09-05 22:58:44:972 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,112:70].[@-1,37:40='line',<0>,112:73]
2023-09-05 22:58:44:974 action-translator LogManager.java:25 qattr [@-1,44:45='ID',<0>,112:80].[@-1,47:49='pos',<0>,112:83]
2023-09-05 22:58:44:975 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,112:89].[@-1,56:59='text',<0>,112:92]
2023-09-05 22:58:44:978 action-translator LogManager.java:25 translate  $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, $types.ty, $block.blk) 
2023-09-05 22:58:44:979 action-translator LogManager.java:25 attr [@-1,2:3='fn',<0>,154:78]
2023-09-05 22:58:44:979 action-translator LogManager.java:25 qattr [@-1,33:36='FUNC',<0>,154:109].[@-1,38:41='line',<0>,154:114]
2023-09-05 22:58:44:980 action-translator LogManager.java:25 qattr [@-1,45:48='FUNC',<0>,154:121].[@-1,50:52='pos',<0>,154:126]
2023-09-05 22:58:44:980 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,154:132].[@-1,59:62='text',<0>,154:135]
2023-09-05 22:58:44:980 action-translator LogManager.java:25 qattr [@-1,66:79='listParamsFunc',<0>,154:142].[@-1,81:81='l',<0>,154:157]
2023-09-05 22:58:44:980 action-translator LogManager.java:25 qattr [@-1,85:89='types',<0>,154:161].[@-1,91:92='ty',<0>,154:167]
2023-09-05 22:58:44:981 action-translator LogManager.java:25 qattr [@-1,96:100='block',<0>,154:172].[@-1,102:104='blk',<0>,154:178]
2023-09-05 22:58:44:982 action-translator LogManager.java:25 translate  $fn = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.l, environment.NIL, $block.blk) 
2023-09-05 22:58:44:982 action-translator LogManager.java:25 attr [@-1,2:3='fn',<0>,155:65]
2023-09-05 22:58:44:982 action-translator LogManager.java:25 qattr [@-1,33:36='FUNC',<0>,155:96].[@-1,38:41='line',<0>,155:101]
2023-09-05 22:58:44:983 action-translator LogManager.java:25 qattr [@-1,45:48='FUNC',<0>,155:108].[@-1,50:52='pos',<0>,155:113]
2023-09-05 22:58:44:983 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,155:119].[@-1,59:62='text',<0>,155:122]
2023-09-05 22:58:44:983 action-translator LogManager.java:25 qattr [@-1,66:79='listParamsFunc',<0>,155:129].[@-1,81:81='l',<0>,155:144]
2023-09-05 22:58:44:984 action-translator LogManager.java:25 qattr [@-1,102:106='block',<0>,155:165].[@-1,108:110='blk',<0>,155:171]
2023-09-05 22:58:44:987 action-translator LogManager.java:25 translate 
2023-09-05 22:58:44:988 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $parametro.p)
        
2023-09-05 22:58:44:988 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-05 22:58:44:988 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-05 22:58:44:988 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-05 22:58:44:989 action-translator LogManager.java:25 qattr [@-1,65:73='parametro',<0>,4:29].[@-1,75:75='p',<0>,4:39]
2023-09-05 22:58:44:989 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-09-05 22:58:44:989 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,7:9]
2023-09-05 22:58:44:991 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-05 22:58:44:992 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $parametro.p)
                                          $l = arr
                                      
2023-09-05 22:58:44:992 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,13:56].[@-1,128:128='l',<0>,13:61]
2023-09-05 22:58:44:992 action-translator LogManager.java:25 qattr [@-1,132:140='parametro',<0>,13:65].[@-1,142:142='p',<0>,13:75]
2023-09-05 22:58:44:993 action-translator LogManager.java:25 attr [@-1,189:189='l',<0>,14:43]
2023-09-05 22:58:45:009 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-05 22:58:45:017 action-translator LogManager.java:25 translate  $p = instructions.NewParams($ID.line,$ID.pos,$ID.text ,$ID.text, $types.ty ,false)
2023-09-05 22:58:45:017 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,174:20]
2023-09-05 22:58:45:018 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,174:48].[@-1,33:36='line',<0>,174:51]
2023-09-05 22:58:45:018 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,174:57].[@-1,42:44='pos',<0>,174:60]
2023-09-05 22:58:45:018 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,174:65].[@-1,50:53='text',<0>,174:68]
2023-09-05 22:58:45:019 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,174:75].[@-1,60:63='text',<0>,174:78]
2023-09-05 22:58:45:019 action-translator LogManager.java:25 qattr [@-1,67:71='types',<0>,174:85].[@-1,73:74='ty',<0>,174:91]
2023-09-05 22:58:45:020 action-translator LogManager.java:25 translate  $p = instructions.NewParams($ID.line,$ID.pos,$ID.text,$ID.text, $types.ty,true)
2023-09-05 22:58:45:020 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,175:26]
2023-09-05 22:58:45:021 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,175:54].[@-1,33:36='line',<0>,175:57]
2023-09-05 22:58:45:021 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,175:63].[@-1,42:44='pos',<0>,175:66]
2023-09-05 22:58:45:021 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,175:71].[@-1,50:53='text',<0>,175:74]
2023-09-05 22:58:45:022 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,175:80].[@-1,59:62='text',<0>,175:83]
2023-09-05 22:58:45:022 action-translator LogManager.java:25 qattr [@-1,66:70='types',<0>,175:90].[@-1,72:73='ty',<0>,175:96]
2023-09-05 22:58:45:023 action-translator LogManager.java:25 translate  $p = instructions.NewParams($ID.line,$ID.pos, $ID.text,$exte.text, $types.ty,false)
2023-09-05 22:58:45:024 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,176:39]
2023-09-05 22:58:45:025 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,176:67].[@-1,33:36='line',<0>,176:70]
2023-09-05 22:58:45:025 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,176:76].[@-1,42:44='pos',<0>,176:79]
2023-09-05 22:58:45:025 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,176:85].[@-1,51:54='text',<0>,176:88]
2023-09-05 22:58:45:026 action-translator LogManager.java:25 qattr [@-1,57:60='exte',<0>,176:94].[@-1,62:65='text',<0>,176:99]
2023-09-05 22:58:45:026 action-translator LogManager.java:25 qattr [@-1,69:73='types',<0>,176:106].[@-1,75:76='ty',<0>,176:112]
2023-09-05 22:58:45:029 action-translator LogManager.java:25 translate  $p = instructions.NewParams($ID.line,$ID.pos, $ID.text,$exte.text, $types.ty,true)
2023-09-05 22:58:45:029 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,177:45]
2023-09-05 22:58:45:029 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,177:73].[@-1,33:36='line',<0>,177:76]
2023-09-05 22:58:45:029 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,177:82].[@-1,42:44='pos',<0>,177:85]
2023-09-05 22:58:45:030 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,177:91].[@-1,51:54='text',<0>,177:94]
2023-09-05 22:58:45:030 action-translator LogManager.java:25 qattr [@-1,57:60='exte',<0>,177:100].[@-1,62:65='text',<0>,177:105]
2023-09-05 22:58:45:030 action-translator LogManager.java:25 qattr [@-1,69:73='types',<0>,177:112].[@-1,75:76='ty',<0>,177:118]
2023-09-05 22:58:45:032 action-translator LogManager.java:25 translate  $cf = instructions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2023-09-05 22:58:45:032 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,182:36]
2023-09-05 22:58:45:032 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,182:66].[@-1,35:38='line',<0>,182:69]
2023-09-05 22:58:45:032 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,182:76].[@-1,45:47='pos',<0>,182:79]
2023-09-05 22:58:45:034 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,182:85].[@-1,54:57='text',<0>,182:88]
2023-09-05 22:58:45:034 action-translator LogManager.java:25 qattr [@-1,61:74='listParamsCall',<0>,182:95].[@-1,76:76='l',<0>,182:110]
2023-09-05 22:58:45:036 action-translator LogManager.java:25 translate 
2023-09-05 22:58:45:037 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-05 22:58:45:037 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-05 22:58:45:037 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-05 22:58:45:037 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-05 22:58:45:037 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-05 22:58:45:038 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-09-05 22:58:45:038 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,7:9]
2023-09-05 22:58:45:038 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-05 22:58:45:039 action-translator LogManager.java:25 translate 
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          
2023-09-05 22:58:45:039 action-translator LogManager.java:25 qattr [@-1,131:134='list',<0>,13:60].[@-1,136:136='l',<0>,13:65]
2023-09-05 22:58:45:040 action-translator LogManager.java:25 qattr [@-1,140:143='expr',<0>,13:69].[@-1,145:145='e',<0>,13:74]
2023-09-05 22:58:45:040 action-translator LogManager.java:25 attr [@-1,196:196='l',<0>,14:47]
2023-09-05 22:58:45:040 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-05 22:58:45:044 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-09-05 22:58:45:045 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,201:8]
2023-09-05 22:58:45:046 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-09-05 22:58:45:046 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,202:10]
2023-09-05 22:58:45:047 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-09-05 22:58:45:048 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,203:8]
2023-09-05 22:58:45:048 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-09-05 22:58:45:048 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,204:9]
2023-09-05 22:58:45:049 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-09-05 22:58:45:049 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,205:24]
2023-09-05 22:58:45:050 action-translator LogManager.java:25 translate  $ty = environment.STR 
2023-09-05 22:58:45:050 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,206:24]
2023-09-05 22:58:45:050 action-translator LogManager.java:25 translate  $ty = environment.NIL 
2023-09-05 22:58:45:050 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,207:8]
2023-09-05 22:58:45:088 action-translator LogManager.java:25 translate 
2023-09-05 22:58:45:089 action-translator LogManager.java:25 translate $e = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.e,"NEGACION",nil)
2023-09-05 22:58:45:089 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,2:65]
2023-09-05 22:58:45:090 action-translator LogManager.java:25 qattr [@-1,31:33='SUB',<0>,2:95].[@-1,35:38='line',<0>,2:99]
2023-09-05 22:58:45:090 action-translator LogManager.java:25 qattr [@-1,41:43='SUB',<0>,2:105].[@-1,45:47='pos',<0>,2:109]
2023-09-05 22:58:45:091 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,2:114].[@-1,55:55='e',<0>,2:119]
2023-09-05 22:58:45:092 action-translator LogManager.java:25 translate  $e = expressions.NewCast($types.start.GetLine(), $types.start.GetColumn(), $types.ty, $expr.e) 
2023-09-05 22:58:45:092 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:101]
2023-09-05 22:58:45:092 action-translator LogManager.java:25 qattr [@-1,27:31='types',<0>,3:126].[@-1,33:37='start',<0>,3:132]
2023-09-05 22:58:45:095 action-translator LogManager.java:25 qattr [@-1,51:55='types',<0>,3:150].[@-1,57:61='start',<0>,3:156]
2023-09-05 22:58:45:096 action-translator LogManager.java:25 qattr [@-1,77:81='types',<0>,3:176].[@-1,83:84='ty',<0>,3:182]
2023-09-05 22:58:45:096 action-translator LogManager.java:25 qattr [@-1,88:91='expr',<0>,3:187].[@-1,93:93='e',<0>,3:192]
2023-09-05 22:58:45:097 action-translator LogManager.java:25 translate $e = expressions.NewOperation($NOT.line, $NOT.pos, $right.e, $NOT.text ,nil)
2023-09-05 22:58:45:097 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,4:65]
2023-09-05 22:58:45:097 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,4:95].[@-1,35:38='line',<0>,4:99]
2023-09-05 22:58:45:098 action-translator LogManager.java:25 qattr [@-1,42:44='NOT',<0>,4:106].[@-1,46:48='pos',<0>,4:110]
2023-09-05 22:58:45:098 action-translator LogManager.java:25 qattr [@-1,52:56='right',<0>,4:116].[@-1,58:58='e',<0>,4:122]
2023-09-05 22:58:45:098 action-translator LogManager.java:25 qattr [@-1,62:64='NOT',<0>,4:126].[@-1,66:69='text',<0>,4:130]
2023-09-05 22:58:45:099 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-09-05 22:58:45:099 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:82]
2023-09-05 22:58:45:099 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,5:87].[@-1,12:12='e',<0>,5:92]
2023-09-05 22:58:45:100 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, nil) 
2023-09-05 22:58:45:100 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:60]
2023-09-05 22:58:45:100 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,6:86].[@-1,35:38='line',<0>,6:93]
2023-09-05 22:58:45:101 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,6:100].[@-1,49:51='pos',<0>,6:107]
2023-09-05 22:58:45:101 action-translator LogManager.java:25 translate  $e = $list.p
2023-09-05 22:58:45:101 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:44]
2023-09-05 22:58:45:102 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,7:49].[@-1,12:12='p',<0>,7:54]
2023-09-05 22:58:45:102 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-09-05 22:58:45:102 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,8:88]
2023-09-05 22:58:45:102 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,8:114].[@-1,35:38='line',<0>,8:121]
2023-09-05 22:58:45:103 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,8:128].[@-1,49:51='pos',<0>,8:135]
2023-09-05 22:58:45:103 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,8:141].[@-1,66:66='l',<0>,8:152]
2023-09-05 22:58:45:103 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-09-05 22:58:45:103 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,11:30].[@-1,39:42='text',<0>,11:37]
2023-09-05 22:58:45:104 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,12:43].[@-1,102:105='text',<0>,12:50]
2023-09-05 22:58:45:104 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,16:13]
2023-09-05 22:58:45:104 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,16:43].[@-1,240:243='line',<0>,16:50]
2023-09-05 22:58:45:105 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,16:56].[@-1,253:255='pos',<0>,16:63]
2023-09-05 22:58:45:105 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,18:37].[@-1,341:344='text',<0>,18:44]
2023-09-05 22:58:45:105 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,22:13]
2023-09-05 22:58:45:105 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,22:43].[@-1,474:477='line',<0>,22:50]
2023-09-05 22:58:45:105 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,22:56].[@-1,487:489='pos',<0>,22:63]
2023-09-05 22:58:45:106 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-09-05 22:58:45:106 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,27:16].[@-1,25:28='text',<0>,27:23]
2023-09-05 22:58:45:107 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,28:9]
2023-09-05 22:58:45:107 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,28:39].[@-1,77:80='line',<0>,28:46]
2023-09-05 22:58:45:108 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,28:53].[@-1,91:93='pos',<0>,28:60]
2023-09-05 22:58:45:109 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-09-05 22:58:45:109 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:33]
2023-09-05 22:58:45:109 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,30:63].[@-1,36:39='line',<0>,30:67]
2023-09-05 22:58:45:109 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,30:74].[@-1,47:49='pos',<0>,30:78]
2023-09-05 22:58:45:110 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-09-05 22:58:45:110 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:33]
2023-09-05 22:58:45:110 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,31:63].[@-1,36:39='line',<0>,31:67]
2023-09-05 22:58:45:110 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,31:74].[@-1,47:49='pos',<0>,31:78]
2023-09-05 22:58:45:111 action-translator LogManager.java:25 translate  $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) 
2023-09-05 22:58:45:111 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:78]
2023-09-05 22:58:45:111 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,32:104].[@-1,31:34='line',<0>,32:107]
2023-09-05 22:58:45:112 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,32:114].[@-1,41:43='pos',<0>,32:117]
2023-09-05 22:58:45:112 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,32:123].[@-1,50:53='text',<0>,32:126]
2023-09-05 22:58:45:112 action-translator LogManager.java:25 translate  $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) 
2023-09-05 22:58:45:113 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:80]
2023-09-05 22:58:45:113 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,33:108].[@-1,33:36='line',<0>,33:111]
2023-09-05 22:58:45:114 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,33:118].[@-1,43:45='pos',<0>,33:121]
2023-09-05 22:58:45:115 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,33:127].[@-1,52:55='text',<0>,33:130]
2023-09-05 22:58:45:115 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, "nil", environment.NIL) 
2023-09-05 22:58:45:115 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:33]
2023-09-05 22:58:45:115 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,34:63].[@-1,36:39='line',<0>,34:67]
2023-09-05 22:58:45:116 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,34:74].[@-1,47:49='pos',<0>,34:78]
2023-09-05 22:58:45:116 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-05 22:58:45:128 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($op.line, $op.pos, nil, $op.text, $expr.e) 
2023-09-05 22:58:45:128 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:139]
2023-09-05 22:58:45:129 action-translator LogManager.java:25 qattr [@-1,32:33='op',<0>,37:169].[@-1,35:38='line',<0>,37:172]
2023-09-05 22:58:45:129 action-translator LogManager.java:25 qattr [@-1,42:43='op',<0>,37:179].[@-1,45:47='pos',<0>,37:182]
2023-09-05 22:58:45:129 action-translator LogManager.java:25 qattr [@-1,56:57='op',<0>,37:193].[@-1,59:62='text',<0>,37:196]
2023-09-05 22:58:45:129 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,37:203].[@-1,71:71='e',<0>,37:208]
2023-09-05 22:58:45:130 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-05 22:58:45:130 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-05 22:58:45:130 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:169]
2023-09-05 22:58:45:130 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:199].[@-1,37:41='start',<0>,38:204]
2023-09-05 22:58:45:132 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:222].[@-1,60:64='start',<0>,38:227]
2023-09-05 22:58:45:132 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:247].[@-1,85:85='e',<0>,38:252]
2023-09-05 22:58:45:134 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:256].[@-1,92:95='text',<0>,38:259]
2023-09-05 22:58:45:135 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:266].[@-1,105:105='e',<0>,38:272]
2023-09-05 22:58:45:135 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-05 22:58:45:137 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-05 22:58:45:137 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:149]
2023-09-05 22:58:45:138 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:179].[@-1,37:41='start',<0>,39:184]
2023-09-05 22:58:45:138 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:202].[@-1,60:64='start',<0>,39:207]
2023-09-05 22:58:45:138 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:227].[@-1,85:85='e',<0>,39:232]
2023-09-05 22:58:45:138 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:236].[@-1,92:95='text',<0>,39:239]
2023-09-05 22:58:45:138 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:246].[@-1,105:105='e',<0>,39:252]
2023-09-05 22:58:45:139 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-05 22:58:45:140 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-05 22:58:45:140 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:157]
2023-09-05 22:58:45:140 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:187].[@-1,37:41='start',<0>,40:192]
2023-09-05 22:58:45:140 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:210].[@-1,60:64='start',<0>,40:215]
2023-09-05 22:58:45:140 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:235].[@-1,85:85='e',<0>,40:240]
2023-09-05 22:58:45:141 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:244].[@-1,92:95='text',<0>,40:247]
2023-09-05 22:58:45:141 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:254].[@-1,105:105='e',<0>,40:260]
2023-09-05 22:58:45:141 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-05 22:58:45:142 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-05 22:58:45:142 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:157]
2023-09-05 22:58:45:142 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:187].[@-1,37:41='start',<0>,41:192]
2023-09-05 22:58:45:143 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:210].[@-1,60:64='start',<0>,41:215]
2023-09-05 22:58:45:143 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:235].[@-1,85:85='e',<0>,41:240]
2023-09-05 22:58:45:143 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:244].[@-1,92:95='text',<0>,41:247]
2023-09-05 22:58:45:143 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:254].[@-1,105:105='e',<0>,41:260]
2023-09-05 22:58:45:144 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-05 22:58:45:145 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-05 22:58:45:146 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,42:154]
2023-09-05 22:58:45:147 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,42:184].[@-1,37:41='start',<0>,42:189]
2023-09-05 22:58:45:147 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,42:207].[@-1,60:64='start',<0>,42:212]
2023-09-05 22:58:45:147 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,42:232].[@-1,85:85='e',<0>,42:237]
2023-09-05 22:58:45:148 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,42:241].[@-1,92:95='text',<0>,42:244]
2023-09-05 22:58:45:148 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,42:251].[@-1,105:105='e',<0>,42:257]
2023-09-05 22:58:45:148 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-09-05 22:58:45:149 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-05 22:58:45:149 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,43:129]
2023-09-05 22:58:45:149 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,43:159].[@-1,37:41='start',<0>,43:164]
2023-09-05 22:58:45:149 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,43:182].[@-1,60:64='start',<0>,43:187]
2023-09-05 22:58:45:150 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,43:207].[@-1,85:85='e',<0>,43:212]
2023-09-05 22:58:45:150 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,43:216].[@-1,92:95='text',<0>,43:219]
2023-09-05 22:58:45:150 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,43:226].[@-1,105:105='e',<0>,43:232]
2023-09-05 22:58:45:150 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-09-05 22:58:45:150 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-05 22:58:45:151 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,44:128]
2023-09-05 22:58:45:151 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,44:158].[@-1,37:41='start',<0>,44:163]
2023-09-05 22:58:45:151 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,44:181].[@-1,60:64='start',<0>,44:186]
2023-09-05 22:58:45:152 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,44:206].[@-1,85:85='e',<0>,44:211]
2023-09-05 22:58:45:152 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,44:215].[@-1,92:95='text',<0>,44:218]
2023-09-05 22:58:45:152 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,44:225].[@-1,105:105='e',<0>,44:231]
2023-09-05 22:58:45:152 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-05 22:58:45:153 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-05 22:58:45:154 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-05 22:58:45:154 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-05 22:58:45:154 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-05 22:58:45:154 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-05 22:58:45:154 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-09-05 22:58:45:154 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-09-05 22:58:45:155 action-translator LogManager.java:25 translate 
2023-09-05 22:58:45:156 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-05 22:58:45:156 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-05 22:58:45:157 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-05 22:58:45:157 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-05 22:58:45:157 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-05 22:58:45:157 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-05 22:58:45:158 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-09-05 22:58:45:158 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-09-05 22:58:45:158 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-09-05 22:58:45:159 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-09-05 22:58:45:159 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-05 22:58:45:160 action-translator LogManager.java:25 translate 
2023-09-05 22:58:45:161 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-05 22:58:45:161 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-05 22:58:45:162 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-05 22:58:45:162 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-05 22:58:45:162 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-05 22:58:45:162 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-05 22:58:45:162 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-09-05 22:58:45:164 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-09-05 22:58:45:164 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-09-05 22:58:45:165 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-09-05 22:58:45:165 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-05 22:58:45:196 action-translator LogManager.java:25 translate 
2023-09-05 22:58:45:197 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-09-05 22:58:45:197 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:35]
2023-09-05 22:58:45:197 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:63].[@-1,33:36='line',<0>,2:66]
2023-09-05 22:58:45:198 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:73].[@-1,43:45='pos',<0>,2:76]
2023-09-05 22:58:45:198 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:82].[@-1,52:55='text',<0>,2:85]
2023-09-05 22:58:45:199 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-05 22:58:45:199 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-09-05 22:58:45:200 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:130]
2023-09-05 22:58:45:200 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:162].[@-1,39:43='start',<0>,5:167]
2023-09-05 22:58:45:200 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:185].[@-1,62:66='start',<0>,5:190]
2023-09-05 22:58:45:201 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:210].[@-1,87:87='p',<0>,5:215]
2023-09-05 22:58:45:201 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:219].[@-1,96:96='e',<0>,5:224]
2023-09-05 22:58:45:201 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-05 22:58:45:202 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-09-05 22:58:45:202 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:183]
2023-09-05 22:58:45:202 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,6:215].[@-1,39:43='start',<0>,6:220]
2023-09-05 22:58:45:203 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,6:238].[@-1,62:66='start',<0>,6:243]
2023-09-05 22:58:45:203 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,6:263].[@-1,87:87='p',<0>,6:268]
2023-09-05 22:58:45:203 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,6:272].[@-1,96:96='e',<0>,6:277]
2023-09-05 22:58:45:204 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-05 22:58:45:204 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-05 22:58:45:206 action-translator LogManager.java:25 translate 
2023-09-05 22:58:45:206 action-translator LogManager.java:25 translate  $t = $expr.e 
2023-09-05 22:58:45:206 action-translator LogManager.java:25 attr [@-1,2:2='t',<0>,2:37]
2023-09-05 22:58:45:206 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:42].[@-1,12:12='e',<0>,2:47]
2023-09-05 22:58:45:207 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-05 22:58:45:208 action-translator LogManager.java:25 translate  $t = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.t, $op.text, $right.e) 
2023-09-05 22:58:45:208 action-translator LogManager.java:25 attr [@-1,2:2='t',<0>,5:113]
2023-09-05 22:58:45:208 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,5:143].[@-1,37:41='start',<0>,5:148]
2023-09-05 22:58:45:209 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,5:166].[@-1,60:64='start',<0>,5:171]
2023-09-05 22:58:45:209 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,5:191].[@-1,85:85='t',<0>,5:196]
2023-09-05 22:58:45:209 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,5:200].[@-1,92:95='text',<0>,5:203]
2023-09-05 22:58:45:209 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,5:210].[@-1,105:105='e',<0>,5:216]
2023-09-05 22:58:45:210 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-05 22:58:51:353 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-05 22:58:51:353 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-05 22:58:53:392 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-05 22:58:53:392 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

